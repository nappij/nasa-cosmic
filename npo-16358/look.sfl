 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    1


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

    1              PROGRAM LOOK                                                                                                     
    2       C                                       CD    This program is designed to look at long printout files.  It has          
    3       C                                       CD    the features that it can jump to any place in the file (either back-      
    4       C                                       CD    wards or forwards) without having to read in any of the intermediate      
    5       C                                       CD    data.  It can also search (either forward or backward) for strings,       
    6       C                                       CD    and scroll at different speeds.                                           
    7       C                                       CD                                                                              
    8       C                                       CD        When run on a VT100 the program is puts the terminal in some          
    9       C                                       CD    rather strange modes, so if the program exits abnormally (by ^Y or        
   10       C                                       CD    by the system crashing, for example) one should push the SET-UP key       
   11       C                                       CD    followed by a shift-R (capital R) to restore the terminals default        
   12       C                                       CD    modes.                                                                    
   13       C                                       CD                                                                              
   14       C                                       CDM        Either of the following will actually start running the program;     
   15       C                                       CDM   typing RUN JPL:[JLV.LOOK]LOOK, or defining a symbol to run the            
   16       C                                       CDM   program (i.e. LOOK:==$JPL:[JLV.LOOK]LOOK.EXE) and then typing the         
   17       C                                       CDM   symbol.  The later method has the advantage that one can enter the        
   18       C                                       CDM   name of the file to be looked at and/or the symbol definition file's      
   19       C                                       CDM   name (see below) on the command line (for example:                        
   20       C                                       CDM                    LOOK PRINT.LIS/DEFINITIONS=LOOKCOM.DAT                   
   21       C                                       CDM   will run the program (if LOOK is defined as above) on the file            
   22       C                                       CDM   PRINT.LIS with the symbol definitions taken from LOOKCOM.DAT              
   23       C                                       CDM   (the DEFINITIONS switch can go before or after the main file's            
   24       C                                       CDM   name and can be abbreviated all the way to a D)).  If the switch          
   25       C                                       CDM   /NARROW is on the command line, then the screen will not be converted     
   26       C                                       CDM   into 132 column mode (this, of course, only applies to VT100 terminals).  
   27       C                                       CDM   If the switch /WRAP is present then the lines will be printed with        
   28       C                                       CDM   terminal wrapping, instead of being cut to the width of the terminal.     
   29       C                                       CDM   If the switch /BOX is present then one line of output is sacrificed       
   30       C                                       CDM   to allow a line to be drawn dividing the file text from the command       
   31       C                                       CDM   input line.                                                               
   32       C                                       CDM                                                                             
   33       C                                       CDM        The following commands are the "basic" command set of the            
   34       C                                       CDM   program:                                                                  
   35       C                                       CDM             n$         - jump by n lines (positive or negative)             
   36       C                                       CDM             n%         - jump by n blocks (positive or negative)            
   37       C                                       CDM             ^          - search (forward) for the string(s) in the search   
   38       C                                       CDM                          buffers (up to 10) and display from that line if   
   39       C                                       CDM                          found, if not found ring the terminal bell and     
   40       C                                       CDM                          turn on LED 3 (VT100's only).  Matches are found   
   41       C                                       CDM                          irregardless of lower/uppercase differences.       
   42       C                                       CDM             -^         - search (backward) for string(s), same rules as     
   43       C                                       CDM                          forward search.                                    
   44       C                                       CDM             - "string" 'string' ... ^                                       
   45       C                                       CDM                        - load search buffers with the given strings and     
   46       C                                       CDM                          search (backward) for them, same rules as          
   47       C                                       CDM                          forward search.                                    
   48       C                                       CDM             "string"   - clear the search buffers and save the given        
   49       C                                       CDM                          string as the only search string.  A string        
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    2


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

   50       C                                       CDM                          can consist of any characters, to include a        
   51       C                                       CDM                          quotation mark (") one must put two of them in     
   52       C                                       CDM                          a row ("").                                        
   53       C                                       CDM             'string' 'string' ...                                           
   54       C                                       CDM                        - add the given string(s) to the search buffers.     
   55       C                                       CDM                          A string can consist of any characters, to         
   56       C                                       CDM                          include a single quote (') one must put two of     
   57       C                                       CDM                          them in a row ('').                                
   58       C                                       CDM             !          - set reverse switch, all commands will now work     
   59       C                                       CDM                          in reverse (i.e. n$ will jump -n lines, etc.)      
   60       C                                       CDM             #          - scroll                                             
   61       C                                       CDM             -#         - scroll backward                                    
   62       C                                       CDM             (          - stop scrolling (only valid command when            
   63       C                                       CDM                          scrolling is in operation),                        
   64       C                                       CDM                          or cancel current line jump, search, or            
   65       C                                       CDM                          & command.                                         
   66       C                                       CDM             n)         - set scrolling speed to n lines per second          
   67       C                                       CDM                          (positive or negative, integer or real)            
   68       C                                       CDM                          (originally set to 2).                             
   69       C                                       CDM                          NOTE:  there is a maximum speed that will not      
   70       C                                       CDM                          be exceeded (varies with situation) even if        
   71       C                                       CDM                          scrolling speed is set at a fast value.            
   72       C                                       CDM             n*         - mark the nth line from the top of the screen       
   73       C                                       CDM                          as the boundary of the print range.  The print     
   74       C                                       CDM                          range is defined by the last two such marked       
   75       C                                       CDM                          lines.                                             
   76       C                                       CDM             n&         - print the range of lines from the top of the       
   77       C                                       CDM                          screen to the nth line from the top of the         
   78       C                                       CDM                          screen (n can be either positive or negative).     
   79       C                                       CDM                          onto device SYS$PRINT.  if n is 0 or absent        
   80       C                                       CDM                          then the range marked with the * command is        
   81       C                                       CDM                          used, if available, otherwise 23 is used for       
   82       C                                       CDM                          n.  The format of the printout will be that        
   83       C                                       CDM                          of the original file, not necessarily what         
   84       C                                       CDM                          is shown on the screen (i.e. FORTRAN carriage-     
   85       C                                       CDM                          control, and all printer control will work as      
   86       C                                       CDM                          they are supposed to).                             
   87       C                                       CDM             n-&        - same as n&, except output is put into a file       
   88       C                                       CDM                          named LOOKPRINT.LIS in the default directory       
   89       C                                       CDM                          (File format will be the same as the original      
   90       C                                       CDM                          file, except organization will be sequential)      
   91       C                                       CDM                          (appended to the latest version if a previous n-&  
   92       C                                       CDM                          or n--& command has been given, otherwise a new    
   93       C                                       CDM                          version is created).                               
   94       C                                       CDM             n--&       - same as n-&, except always creates a new version   
   95       C                                       CDM                          of the output file.                                
   96       C                                       CDM             @          - exit the program.                                  
   97       C                                       CDM             +          - re-writes the screen.                              
   98       C                                       CDM             <          - repeat the last command.                           
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    3


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

   99       C                                       CDM                                                                             
  100       C                                       CDM        If an invalid command is typed the terminal bell is rung and on      
  101       C                                       CDM   a VT100 LED #3 is turned on.  The line is parsed in such a way that a     
  102       C                                       CDM   valid command will be executed even if followed by an invalid command.    
  103       C                                       CDM   Note that no command is executed until a standard line terminator is      
  104       C                                       CDM   received (ASCII code of 1 to 31).  Note that commands are limited to      
  105       C                                       CDM   34 characters when entered in response to the prompt.  In order to        
  106       C                                       CDM   enter longer commands one can use the "command mode" DEFINE command       
  107       C                                       CDM   (see below) and then execute the symbol.  Also all search strings         
  108       C                                       CDM   are limited to 30 characters.                                             
  109       C                                       CDM                                                                             
  110       C                                       CDM        If the user types ^Z (Control-Z) whenever the program is not         
  111       C                                       CDM   currently executing a command, the program will enter "command" mode.     
  112       C                                       CDM   This mode allows the user to use any of the following commands:           
  113       C                                       CDM             DEFINE s := a1 a2 ...                                           
  114       C                                       CDM                            - which defines a symbol s in the same man-      
  115       C                                       CDM                              ner as a line in the definitions file (see     
  116       C                                       CDM                              below), including line continuations.          
  117       C                                       CDM             EXIT           - returns to the normal "look" mode.             
  118       C                                       CDM             HELP a         - where a is one of the commands shown above.    
  119       C                                       CDM             SET [NO]switch - with switch being any of WRAP, BOX, WIDE       
  120       C                                       CDM                              or NARROW.  These have the same affect as      
  121       C                                       CDM                              the command line switches of the same          
  122       C                                       CDM                              names (WIDE is the same as NONARROW),          
  123       C                                       CDM                              with the NO qualifier turning them off.        
  124       C                                       CDM             SHOW [s]       - where s is a defined symbol.  This will        
  125       C                                       CDM                              show what commands a symbol is defined         
  126       C                                       CDM                              as. (if s is omitted, all defined symbols      
  127       C                                       CDM                              are shown).                                    
  128       C                                       CDM             @filename      - Inputs the file filename as a definitions      
  129       C                                       CDM                              file.                                          
  130       C                                       CDM                                                                             
  131       C                                       CDM        The user is also allowed to define symbols for a command or          
  132       C                                       CDM   commands.  Valid symbols consist of the characters a-z (lower and         
  133       C                                       CDM   upper-case are equivalent), _, =, `, ~, [, ], {, }, ;, :,                 
  134       C                                       CDM   ,(comma), >, ?, /, \,and  |.  Symbol definitions are given in             
  135       C                                       CDM   a symbol definition file which is read at the start of execution          
  136       C                                       CDM   (or by the "command" level @ command), or by the "command" level          
  137       C                                       CDM   DEFINE command.  This file is either given by the /DEFINITIONS            
  138       C                                       CDM   switch, or a file named LOOKCOM.DAT is searched for in the fol-           
  139       C                                       CDM   lowing places:  The default directory (the file is used only if           
  140       C                                       CDM   the user owns it), the user's username directory on JPL,                  
  141       C                                       CDM   CIT, and SYS2 in that order.                                              
  142       C                                       CDM                                                                             
  143       C                                       CDM        In the symbol definition file the user can place both commands       
  144       C                                       CDM   and definitions.  Commands will be executed on encounter, and def-        
  145       C                                       CDM   initions will be placed in the definitons list.  Definitions have         
  146       C                                       CDM   the following form:                                                       
  147       C                                       CDM                 symbol := command1 command2 command3 ... command9           
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    4


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  148       C                                       CDM   Up to ten commands can be contained in each symbol (exception - a         
  149       C                                       CDM   symbol for the stop scrolling command should have only the one command    
  150       C                                       CDM   in it ( ( )) and will be executed (when the symbol is typed) in the       
  151       C                                       CDM   order they appear in the definition.  A - (minus sign) as the last        
  152       C                                       CDM   character in a line means the definition is continued on the next         
  153       C                                       CDM   line.  The following are default symbol definitions (they can be          
  154       C                                       CDM   overriden by the symbol definition file):                                 
  155       C                                       CDM             U := 23$                                                        
  156       C                                       CDM             D := -23$                                                       
  157       C                                       CDM             S := #                                                          
  158       C                                       CDM             Q := (                                                          
  159       C                                       CDM             J := 20%                                                        
  160       C                                       CDM             B := -20%                                                       
  161       C                                       CDM             P := 23&                                                        
  162       C                                       CDM             A := 23-&                                                       
  163       C                                       CDM             L := 23--&                                                      
  164       C                                       CDM             E := @                                                          
  165       C                                       CDM             M := *                                                          
  166       C                                       CDM             C := +                                                          
  167       C                                       CDM             R := <                                                          
  168       C                                       CDM                                                                             
  169       C                                       CDM   Note, that only the first character of a symbol is significant in the     
  170       C                                       CDM   symbol definition file.  Also when input as a command the symbol should   
  171       C                                       CDM   be input as only one character.                                           
  172       C                                       CDM                                                                             
  173       C                                       CDM        A line enclosed by braces ({ }) will be treated as a "command"       
  174       C                                       CDM   level command (such as SET WIDE, @filename, etc.).                        
  175       C                                       CDM                                                                             
  176       C                                       CDM        The LEDs on a VT100 terminal are used to convey various bits of      
  177       C                                       CDM   information.  Their meanings are as follows:                              
  178       C                                       CDM             1 - on indicates a command is being executed (useful since      
  179       C                                       CDM                 some of the commands don't affect the screen until          
  180       C                                       CDM                 completion).                                                
  181       C                                       CDM             2 - on indicates that reverse is on (an odd number of !         
  182       C                                       CDM                 commands have been executed).                               
  183       C                                       CDM             3 - on indicates an invalid command was encountered (either     
  184       C                                       CDM                 input from the terminal, or while executeing a def-         
  185       C                                       CDM                 inition), or a search failed.                               
  186       C                                       CDM             4 - on indicates that a range of lines has been marked for      
  187       C                                       CDM                 printing                                                    
  188       C                                       CDM                                                                             
  189       C                                       CDM                                                                             
  190       C                                       CDM   NOTE:  If while using the program (on variable length record files)       
  191       C                                       CDM          one gets garbage on the screen, try moving either one block        
  192       C                                       CDM          forward or backward to realign the record boundaries.  Also        
  193       C                                       CDM          when working with FORTRAN carriage-control files the + (plus)      
  194       C                                       CDM          carriage-control character is ignored, and when working with       
  195       C                                       CDM          printer files, all carriage-control with the exception of          
  196       C                                       CDM          line feeds is ignored, and at least one line feed before each      
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    5


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  197       C                                       CDM          record is assumed.                                                 
  198       C                                       CDM                                                                             
  199       C                                       CDM   Programmer - Jon Vavrus  12 NOV 1980                                      
  200       C                                       CDM   Revised    - Jon Vavrus  30 MAR 1981                                      
  201       C                                       CDM   Revised    - Jon Vavrus   4 MAY 1981                                      
  202       C                                       CDM   Revised    - Jon Vavrus  12 MAY 1981                                      
  203       C                                       CDM   Revised    - Jon Vavrus  31 JUL 1981 (changed CCLINE usage)               
  204       C                                       CDM   Revised    - Jon Vavrus  27 AUG 1981                                      
  205       C                                       CDM   Revised    - Jon Vavrus   3 SEP 1981                                      
  206       C                                       CDM   Revised    - Jon Vavrus  30 DEC 1981 (added ^X)                           
  207       C                                       CDM   Revised    - Jon Vavrus   4 MAY 1982 (handles non-AVO VT100's)            
  208       C                                       CDM   Revised    - Jon Vavrus  15 JUL 1982 (extract some proc's add             
  209       C                                       CDM                                         "command" level to symbol file)     
  210       C                                       CDM   Revised    - Jon Vavrus  18 AUG 1982 (bigger arrays)                      
  211       C                                       CDM   Revised    - Jon Vavrus   9 SEP 1982                                      
  212       C                                       CDM   Revised    - Jon Vavrus   4 APR 1983 (broadcast stuff)                    
  213       C                                       CDM   Revised    - Jon Vavrus  13 APR 1983                                      
  214       C                                       CDM   Revised    - Jon Vavrus  17 MAY 1983                                      
  215       C                                       CDM   Revised    - Jon Vavrus  28 MAY 1983                                      
  216       C                                       CDM   Revised    - Jon Vavrus   9 SEP 1983                                      
  217       C                                       CDM   Revised    - Jon Vavrus  27 SEP 1983                                      
  218       C                                       CM                                                                              
  219       C                                       CM    ------------------------------------------------------------------------- 
  220       C                                       CM                                                                              
  221       C                                       CM         The program works by calculating or finding a record boundary        
  222       C                                       CM    near the current position and extracting actual records from there.       
  223       C                                       CM    This is done for fixed files by calculating the record boundary from      
  224       C                                       CM    the start of the file (or start of the block for blocked files),          
  225       C                                       CM    keeping in mind the fact that records are extended to an even number      
  226       C                                       CM    of bytes (word aligned).  For variable length records a record length     
  227       C                                       CM    count word is looked for (a byte containing a number equal to or          
  228       C                                       CM    less than 133 plus the record header size (FSZ), followed by a zeroed     
  229       C                                       CM    byte), which points to another record length count word.                  
  230       C                                       CM                                                                              
  231       C                                       CM         When the current line position needs to be converted to a            
  232       C                                       CM    position in terms of blocks and bytes, the program calculates the         
  233       C                                       CM    byte count from the last line in the output arrays to the current         
  234       C                                       CM    line, then using this plus the block number of the next block to be       
  235       C                                       CM    read in the position is calculated.  This is fairly straight forward      
  236       C                                       CM    for all but fixed blocked files, in which the count of unused bytes       
  237       C                                       CM    in each block must be taken into account.  For variable length record     
  238       C                                       CM    files a further check on position is made by trying to match the          
  239       C                                       CM    line pointed to and the lines around it to a specific area in the         
  240       C                                       CM    block.                                                                    
  241       C                                       CM                                                                              
  242       C                                       CM         Command input is handled by a QIO request to the terminal.  This     
  243       C                                       CM    input is terminated by the standard terminators, whihc are not echoed.    
  244       C                                       CM    Input is done with conversion to upper case (to make life easier), and    
  245       C                                       CM    with no translation of ^U, ^R, and <DEL> (all of which is done by the     
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    6


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  246       C                                       CM    program).  One will note that while scrolling, the QIO is alternately     
  247       C                                       CM    requested and cancelled with each output to the terminal, this is done    
  248       C                                       CM    so that the terminal will not get simultaneous read and write requests.   
  249       C                                       CM                                                                              
  250       C                                       CM         Scrolling speed is controlled by the use of the SYS$SETIMR and       
  251       C                                       CM    SYS$WAITFR system services.  Thus the QIO AST for the stop scrolling      
  252       C                                       CM    command must cancel the timer request, and also set the event flag.       
  253       C                                       CM                                                                              
  254       C                                       CM         Symbol definitions are kept in several arrays (DEFS - command        
  255       C                                       CM    number and length of any search buffers, NUMDEF - associated numbers,     
  256       C                                       CM    DEFBUF - search buffers, and DEFFLG - associated command flags).          
  257       C                                       CM    The total number of defined symbols is thus limited to 60.                
  258       C                                       C                                                                               
  259       C                                       C***   CALLED ROUTINES                                                          
  260       C                                       C                                                                               
  261       C                                       CC    BLKIN   Reads in one block of data from the input file.                   
  262       C                                       CC    BLKOPN  Opens a file for block input.                                     
  263       C                                       CC    BLKSIN  Reads in 7 blocks of data from the input file.                    
  264       C                                       CC    BRDCST  Fields braodcast messages.                                        
  265       C                                       CC    COMLVL  Executes "command level" commands.                                
  266       C                                       CC    DODEF   Processes a symbol file.                                          
  267       C                                       CC    DOIT    Executes a command.                                               
  268       C                                       CC    INTASC  Converts a string of bytes into a character variable              
  269       C                                       CC    LINCON  Converts data in the input buffer into lines in the output        
  270       C                                       CC            arrays.                                                           
  271       C                                       CC    PRSCOM  Parses a command line.                                            
  272       C                                       CC    TTBRDINI Initializes broadcast handler.                                   
  273       C                                       C                                                                               
  274       C                                       C***   COMMON AREAS                                                             
  275       C                                       C                                                                               
  276       C                                       CS    BRDCM1  Contains character variables for broadcast handling.              
  277       C                                       CS              BRDNOT holds the notice to be displayed on the screen.          
  278       C                                       CS              BRDMSG which holds broadcast messages.                          
  279       C                                       C                                                                               
  280       C                                       CS    BRDCM2  Contains non-character information for broadcast handling.        
  281       C                                       CS              BRDLEN the length of strings in BRDMSG.                         
  282       C                                       CS              BRDCNT the count of strings in BRDMSG.                          
  283       C                                       CS              BRDFLG a flag telling if there are unread messages.             
  284       C                                       C                                                                               
  285       C                                       CS    CHARS   Used to pass character variables; contains LINES a character      
  286       C                                       CS            array of the output lines, and SRCHBF the search buffer, and      
  287       C                                       CS            CRLF which contains <CR><LF>, and REVVID + REGVID which are       
  288       C                                       CS            the VT100 control sequences to set/unset reverse video            
  289       C                                       C                                                                               
  290       C                                       CS    DOITNM  Contains information transferred from the main program:           
  291       C                                       CS                 INCHAN - input channel of the terminal                       
  292       C                                       CS                 TIME   - scrolling speed in -10000000*seconds/line           
  293       C                                       CS                 SBFFLG - flag indicating whether there is a string           
  294       C                                       CS                          in the search buffer                                
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    7


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  295       C                                       CS                 DIRECT - flag for reverse (-1 for reverse, else 1)           
  296       C                                       CS                 EBK    - EBK of input file                                   
  297       C                                       CS                 SBFLEN - length(s) of string(s) in search buffer(s)          
  298       C                                       CS                 RECBLK - number of bytes used per block in FIX-BLK files     
  299       C                                       CS                 RANGE  - beginning and ending block numbers and pointers     
  300       C                                       CS                          of the print range                                  
  301       C                                       CS                 VT100  - flag set .TRUE. if terminal is VT100.               
  302       C                                       CS                 LRL    - length of the longest record in input file.         
  303       C                                       CS                 LENLMT - maximum output length (if <0 then WRAP set)         
  304       C                                       CS                 PAGEND - line number of last line output to screen           
  305       C                                       CS                 PAGLEN - number of lines per page                            
  306       C                                       CS                 COMLIN - line number for command input (bottom of screen)    
  307       C                                       CS                 VT100A - flag set .TRUE. if VT100 has advanced video option  
  308       C                                       C                                                                               
  309       C                                       CS    INPUTC  Contains the input character buffer INLINE and the defined        
  310       C                                       CS            symbols SYMS and the definition search buffers DEFBUF             
  311       C                                       C                                                                               
  312       C                                       CS    INPUTN  Contains the input character buffer length LENSAV, and the        
  313       C                                       CS            symbol definitions DEFS, the number of such definitions           
  314       C                                       CS            (NDEFS), the definition flags DEFFLG, and the definition          
  315       C                                       CS            numbers NUMDEF                                                    
  316       C                                       C                                                                               
  317       C                                       CS    LNCN    Contains output arrays, and file pointers and information:        
  318       C                                       CS                 LINLEN - array of output line lengths                        
  319       C                                       CS                 LINEP  - top of screen line (or last line output by          
  320       C                                       CS                          backward scroll)                                    
  321       C                                       CS                 NLINES - number of lines in arrays                           
  322       C                                       CS                 BUFFER - array of unconverted data                           
  323       C                                       CS                 PBUF   - current position in BUFFER                          
  324       C                                       CS                 NBUF   - number of bytes in BUFFER                           
  325       C                                       CS                 BLK    - next block in file                                  
  326       C                                       CS                 FSZ    - record length for FIX files, or FSZ for VFC files   
  327       C                                       CS                 IFSZ   - word extended record length for FIX files           
  328       C                                       CS                 RFM    - files RFM                                           
  329       C                                       CS                 RAT    - files RAT (1=CR,2=FTN,3=PRN,4=none,<0=BLK set)      
  330       C                                       CS                 SBLK   - starting block of current batch of output lines     
  331       C                                       CS                 CCLINE - array containing pointer to where the line's        
  332       C                                       CS                          record starts in the file (CCLINE(1,x) = block      
  333       C                                       CS                          #, CCLINE(2,x) = byte number in block).  If         
  334       C                                       CS                          CCLINE(1,x) = 0 then it is a carriage control       
  335       C                                       CS                          line.                                               
  336       C                                       CS                 LBLK   - last block processed by LINCON                      
  337       C                                       CS                 LPBUF  - last value of PBUF processed by LINCON              
  338       C                                       C                                                                               
  339       C                                       CS    OWNER   Used to pass the file owner's UIC back to the main program        
  340       C                                       CS            from a FORTRAN OPEN.                                              
  341       C                                       C                                                                               
  342       C                                       C***   INPUT VARIABLS                                                           
  343       C                                       C                                                                               
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    8


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  344       C                                       CI    FILE    Used to input the symbol file's name.                             
  345       C                                       C                                                                               
  346       C                                       C***   INPUT/OUTPUT VARIABLES                                                   
  347       C                                       C                                                                               
  348       C                                       CIO   LINE    Used to get an error message from SYS$GETMSG and to input         
  349       C                                       CIO           a line from the symbol file, or to output error message,          
  350       C                                       CIO           and as the terminal input buffer.                                 
  351       C                                       C                                                                               
  352       C                                       C***   OUTPUT VARIABLES                                                         
  353       C                                       C                                                                               
  354       C                                       CO    FILE    Output with error message on open failure.                        
  355       C                                       CO    LINES   Output array, contains converted lines of output.                 
  356       C                                       C                                                                               
  357       C                                       C***   INPUT UNITS                                                              
  358       C                                       C                                                                               
  359       C                                       CR    INCHAN  Input channel number of the terminal.                             
  360       C                                       CR    30      Symbol file (file containing symbol definitions).                 
  361       C                                       C                                                                               
  362       C                                       C***   OUTPUT UNITS                                                             
  363       C                                       C                                                                               
  364       C                                       CW    6       Output to terminal.  Used for error messages.                     
  365       C                                       CW    9       Output to terminal.  Carriage-control LIST.                       
  366       C                                       C                                                                               
  367              PARAMETER NULL1=CHAR(0)//CHAR(0)//CHAR(0)//CHAR(0)                                                               
  368              PARAMETER NULLS=NULL1//NULL1//NULL1                                                                              
  369              EXTERNAL GETOWN,EXITR,BRDCST                                                                                     
  370              CHARACTER*1024 LINE                                                                                              
  371              CHARACTER*135 DIVLIN                                                                                             
  372              CHARACTER*132 LINES(600),CLINE                                                                                   
  373              CHARACTER*128 INLINE,BRDMSG(20)                                                                                  
  374              CHARACTER*122 BLANK                                                                                              
  375              CHARACTER*64 FILE,SYMFIL                                                                                         
  376              CHARACTER*30 SRCHBF(10),TEMP(10),DEFBUF(10,10,60)                                                                
  377              CHARACTER*22 BRDNOT                                                                                              
  378              CHARACTER*12 CHUSER                                                                                              
  379              CHARACTER*11 DEFSW                                                                                               
  380              CHARACTER*8 NARROW                                                                                               
  381              CHARACTER*4 REVVID,REGVID,WRAP                                                                                   
  382              CHARACTER*3 BOX                                                                                                  
  383              CHARACTER*2 CRLF,MSGNUM                                                                                          
  384              CHARACTER*1 SYMS(60),COMAND(12)                                                                                  
  385              REAL*4 NUMDEF(10,60)                                                                                             
  386              INTEGER*4 GETLIS(10),ERR,RFM,RAT,FSZ,TERM(2),INCHAN,                                                             
  387            1       SYS$ASSIGN,SYS$SETIMR,TIME,PBUF,EBK,SYS$TRNLOG,                                                            
  388            2       BLK,SBLK,RANGE(2,2),CCLINE(2,600),PAGEND,DSCBLK(4)                                                         
  389              INTEGER*2 GROUP,MEMBER,OWNER(2),IOSB(4),LINLEN(600),DIRECT,                                                      
  390            1       SBFLEN(10),RECBLK,DEFS(11,10,60),LENLMT,LENSAV,PAGLEN,                                                     
  391            2       HLDLEN(10),COMLIN,OUTLEN,BRDCNT,BRDLEN(20)                                                                 
  392              LOGICAL*1 BUFFER(3750),USER(12),SBFFLG,END(16),NUMFLG,MINFLG,                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE    9


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  393            1       ESC,WIDE,BSP,VT100,BELL,CR,LF,DELETE(11),FILEOK,                                                           
  394            2       DEFFLG(3,10,60),HLDFLG,VT100A,DONE,BRDFLG                                                                  
  395                                                                                                                               
  396              COMMON /OWNER/OWNER                                                                                              
  397              COMMON /DOITNM/INCHAN,TIME,SBFFLG,DIRECT,EBK,SBFLEN,RECBLK,RANGE,                                                
  398            1       VT100,LRL,LENLMT,PAGEND,PAGLEN,COMLIN,VT100A                                                               
  399              COMMON /CHARS/LINES,SRCHBF,CRLF,REVVID,REGVID                                                                    
  400              COMMON /LNCN/LINLEN,LINEP,NLINES,BUFFER,PBUF,NBUF,BLK,FSZ,IFSZ,                                                  
  401            1       RFM,RAT,SBLK,CCLINE,LBLK,LPBUF                                                                             
  402              COMMON /INPUTC/INLINE,SYMS,DEFBUF                                                                                
  403              COMMON /INPUTN/LENSAV,DEFS,NDEFS,DEFFLG,NUMDEF                                                                   
  404              COMMON /BRDCM1/BRDNOT,BRDMSG                                                                                     
  405              COMMON /BRDCM2/BRDLEN,BRDCNT,BRDFLG                                                                              
  406       C                                       C                                                                               
  407       C                                       C***   Initialize many things......                                             
  408       C                                       C                                                                               
  409              DATA BRDCNT,BRDFLG/0,.FALSE./		! Broadcast info.                                                                 
  410              DATA FILEOK/.TRUE./                                                                                              
  411              DATA GETLIS/'202000C'X,0,0,'3080002'X,0,0,'3070002'X,0,0,0/                                                      
  412              DATA END/'FE'X,'FF'X,'FF'X,'FF'X,11*0,'80'X/,TERM(1)/16/                                                         
  413              DATA BUFFER/3750*1/			! Empty buffer                                                                             
  414              DATA BLANK,ESC,BELL,BSP,CR,LF		! ASCII values                                                                    
  415            1       /' ',0027,0007,008,13,10/                                                                                  
  416              DATA REGVID,REVVID/' [0m',' [7m'/                                                                                
  417              DATA DELETE/27,'[','0','m',8,32,8,27,'[','7','m'/                                                                
  418              DATA SYMFIL/' '/				! No definition file                                                                         
  419              DATA NARROW , WRAP , BOX , DEFSW		! Valid command switches                                                       
  420            1       /'NARROW','WRAP','BOX','DEFINITIONS'/                                                                      
  421              DATA VT100A/.FALSE./			! Not an AVO VT100                                                                        
  422              DATA WIDE/0/,LENLMT/132/			! Wide mode                                                                           
  423              DATA SBFFLG/.FALSE./			! No search buffer                                                                        
  424              DATA RANGE/0,0,0,0/			! No print range                                                                           
  425              DATA TIME/-5000000/			! Scrolling speed                                                                          
  426              DATA DIRECT/1/				! Forward movement                                                                             
  427              DATA OUTLEN/0/				! Wrap mode                                                                                    
  428              DATA PAGLEN,COMLIN/23,24/			! 23 lines of output                                                                 
  429              DATA NDEFS,(SYMS(I),DEFS(1,1,I),NUMDEF(1,I),DEFFLG(1,1,I),                                                       
  430            1       DEFFLG(2,1,I),DEFFLG(3,1,I),DEFS(1,2,I),I=1,13)/13,                                                        
  431       C                                       C          Default key definitions:                                             
  432       C                                       C          Key command   number     minus  search  0 to terminate               
  433            2       'U',   1,   23.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  434            3       'D',   1,  -23.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  435            4       'S',   5,    0.,.FALSE.,.FALSE.,.FALSE.,0,                                                                 
  436            5       'Q',   6,    0.,.FALSE.,.FALSE.,.FALSE.,0,                                                                 
  437            6       'J',   2,   20.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  438            7       'B',   2,  -20.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  439            8       'E',  11,    0.,.FALSE.,.FALSE.,.FALSE.,0,                                                                 
  440            9       'P',  10,   23.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  441            A       'A',  10,   23.,.TRUE., .TRUE., .FALSE.,0,                                                                 
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   10


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  442            B       'L',   9,   23.,.TRUE., .FALSE.,.FALSE.,0,                                                                 
  443            C       'M',   8,    0.,.FALSE.,.FALSE.,.FALSE.,0,                                                                 
  444            D       'C',  12,    0.,.FALSE.,.FALSE.,.FALSE.,0,                                                                 
  445            E       'R',  13,    0.,.FALSE.,.FALSE.,.FALSE.,0/                                                                 
  446                                                                                                                               
  447              WRITE (UNIT=CRLF,FMT=100)CR,LF                                                                                   
  448       100    FORMAT (2A1)                                                                                                     
  449              WRITE (UNIT=REVVID(1:1),FMT=100)ESC                                                                              
  450              REGVID(1:1) = REVVID(1:1)                                                                                        
  451              TERM(2) = %LOC(END(1))                                                                                           
  452       C                                       C                                                                               
  453       C                                       C***   Set things up                                                            
  454       C                                       C                                                                               
  455     *        EXECUTE (PROCESS_COM_LINE)                                                                                       
  456     *        EXECUTE (OPEN_PRINTOUT)                                                                                          
  457     *        EXECUTE (SETUP_TERM)                                                                                             
  458     *        EXECUTE (GET_FIRST_SCREEN)                                                                                       
  459     *        EXECUTE (PROCESS_SYMBOL_FILE)                                                                                    
  460       C                                       C                                                                               
  461       C                                       C---   Set up to catch broadcast messages                                       
  462       C                                       C                                                                               
  463     *        IF (VT100)                                                                                                       
  464   1 *           IF (VT100A)                                                                                                   
  465   2                BRDNOT = CHAR(BELL)//CHAR(BELL)//CHAR(ESC)//'[0;1;5m'//                                                    
  466            1             'MESSAGES'//CHAR(ESC)//'8'                                                                           
  467   2                I = 20                                                                                                     
  468   1 *           ELSE                                                                                                          
  469   2                BRDNOT = CHAR(BELL)//CHAR(BELL)//'MESSAGES'//CHAR(ESC)//'8'                                                
  470   2                I = 12                                                                                                     
  471   1 *           ENDIF                                                                                                         
  472     *        ELSE                                                                                                             
  473   1             BRDNOT = CHAR(BELL)//CHAR(BELL)//'MESSAGES'                                                                   
  474   1             I = 10                                                                                                        
  475     *        ENDIF                                                                                                            
  476              BRDNOT = BRDNOT(:I)//NULLS                                                                                       
  477              CALL TTBRDINI(BRDCST)                                                                                            
  478       C                                       C                                                                               
  479       C                                       C***   Set up command input QIO request                                         
  480       C                                       C                                                                               
                  +-----------------------------------------------------------------------------------------------------------------
  481     * 1400  |DO FOREVER                                                                                                       
  482       C     |                                 C                                                                               
  483       C     |                                 C---   Output dividing line if wanted                                           
  484       C     |                                 C                                                                               
  485   1 *       |   IF (PAGLEN .EQ. (COMLIN - 2))                                                                                 
  486   2 *       |      IF (VT100A)                                                                                                
  487   3         |         CALL LIB$PUT_SCREEN(DIVLIN(:IABS(LENLMT)+3)//DIVLIN(1:1)//                                              
  488            1|               '(A',COMLIN-1,1)                                                                                  
  489   2 *       |      ELSE                                                                                                       
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   11


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  490   3         |         CALL LIB$PUT_SCREEN(DIVLIN(:80),COMLIN-1,1)                                                             
  491   2 *       |      ENDIF                                                                                                      
  492   1 *       |   ENDIF                                                                                                         
  493   1         |   IF (OUTLEN .GT. 0) CALL LIB$PUT_SCREEN(BLANK(:OUTLEN),COMLIN,10)                                              
  494   1         |   IF (VT100A) CALL LIB$PUT_SCREEN(REVVID)                                                                       
  495   1 *       |   IF (LENSAV .GT. 0)                                                                                            
  496   2         |      LINE(1+LENBUF:) = INLINE                                                                                   
  497   2         |      LENBUF = LENSAV + LENBUF                                                                                   
  498   2         |      LENSAV = 0                                                                                                 
  499   1 *       |   ENDIF                                                                                                         
  500       C     |                                 C                                                                               
  501       C     |                                 C---   Output "messages" message (without bells)                                
  502       C     |                                 C                                                                               
  503   1 *       |   IF (BRDFLG)                                                                                                   
  504   2         |      IF (VT100) CALL LIB$PUT_SCREEN(CHAR(27)//'7')                                                              
  505   2         |      CALL LIB$PUT_SCREEN(BRDNOT(3:),COMLIN,IABS(LENLMT)-28)                                                     
  506   1 *       |   ENDIF                                                                                                         
  507       C     |                                 C                                                                               
  508   1 *       |   IF (LENBUF .GT. 0)                                                                                            
  509   2         |      CALL LIB$PUT_SCREEN('Command: '//LINE(:LENBUF),COMLIN,1)                                                   
  510   1 *       |   ELSE                                                                                                          
  511   2         |      CALL LIB$PUT_SCREEN('Command: ',COMLIN,1)                                                                  
  512   1 *       |   ENDIF                                                                                                         
  513   1         |   LENBUF = LENBUF + 1                                                                                           
  514   1         |   J = 35 - LENBUF                                                                                               
  515       C     |                                 C                                                                               
  516       C     |                                 C***   Input loop                                                               
  517       C     |                                 C                                                                               
                  |  +--------------------------------------------------------------------------------------------------------------
  518   1 *       |  |DO FOREVER                                                                                                    
  519   2         |  |   CALL SYS$QIOW(,%VAL(INCHAN),%VAL('1331'X),IOSB,,,                                                          
  520            1|  |         %REF(LINE(LENBUF:)),%VAL(J),,TERM,,)                                                                 
  521   2         |  |   LENBUF = IOSB(2) + LENBUF                                                                                  
  522   2 *       |  |   IF (ICHAR(LINE(LENBUF:LENBUF)) .EQ. 127)                                                                   
  523       C     |  |                              C                                                                               
  524       C     |  |                              C---   Check for delete                                                         
  525       C     |  |                              C                                                                               
  526   3 *       |  |      IF (LENBUF .GT. 1)                                                                                      
  527   4         |  |         LENBUF = LENBUF - 1                                                                                  
  528   4 *       |  |         IF (VT100A)                                                                                          
  529   5         |  |            CALL SYS$QIOW(,%VAL(INCHAN),%VAL('30'X),,,,DELETE,                                                
  530            1|  |                  %VAL(11),,,,)                                                                               
  531   4 *       |  |         ELSE                                                                                                 
  532   5         |  |            CALL SYS$QIOW(,%VAL(INCHAN),%VAL('30'X),,,,DELETE(5),                                             
  533            1|  |                  %VAL(3),,,,)                                                                                
  534   4 *       |  |         ENDIF                                                                                                
  535   3 *       |  |      ENDIF                                                                                                   
  536   2 *       |  |   ELSE                                                                                                       
  537       C     |  |                              C                                                                               
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   12


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  538       C     |  |                              C---   Check for ^U/^X                                                          
  539       C     |  |                              C                                                                               
  540   3 *       |  |      IF (ICHAR(LINE(LENBUF:LENBUF)) .EQ. 21 .OR.                                                             
  541            1|  |            ICHAR(LINE(LENBUF:LENBUF)) .EQ. 24)                                                               
  542   4         |  |         LENBUF = 1                                                                                           
  543   4 *       |  |         EXECUTE (ERASE_COMMAND)                                                                              
  544   3 *       |  |      ELSE                                                                                                    
  545       C     |  |                              C                                                                               
  546       C     |  |                              C---   Check for ^R                                                             
  547       C     |  |                              C                                                                               
  548   4 *       |  |         IF (ICHAR(LINE(LENBUF:LENBUF)) .EQ. 18)                                                              
  549   5 *       |  |            EXECUTE (ERASE_COMMAND)                                                                           
  550   5         |  |            CALL SYS$QIOW(,%VAL(INCHAN),%VAL('30'X),,,,%REF(LINE),                                            
  551            1|  |                  %VAL(LENBUF-1),,,,)                                                                         
  552   4 *       |  |         ELSE                                                                                                 
  553       C     |  |                              C                                                                               
  554       C     |  |                              C---   Check for ^Z                                                             
  555       C     |  |                              C                                                                               
  556   5 *       |  |            IF (ICHAR(LINE(LENBUF:LENBUF)) .EQ. 26)                                                           
  557       C     |  |                              C                                                                               
  558       C     |  |                              C===   Erase screen                                                             
  559       C     |  |                              C                                                                               
  560   6         |  |               CALL LIB$ERASE_PAGE(1,1)                                                                       
  561   6 *       |  |               IF (BRDFLG)                                                                                    
  562   7         |  |                  IF (VT100A) CALL LIB$PUT_SCREEN(REVVID)                                                     
  563   7 *       |  |                  IF (BRDCNT .EQ. 1)                                                                          
  564   8         |  |                     CALL LIB$PUT_OUTPUT('THERE IS A BROADCAST '//                                            
  565            1|  |                           'MESSAGE'//CHAR(BELL),1,1)                                                         
  566   7 *       |  |                  ELSE                                                                                        
  567   8         |  |                     WRITE (UNIT=MSGNUM,FMT='(I2)') BRDCNT                                                    
  568   8 *       |  |                     IF (BRDCNT .LT. 10)                                                                      
  569   9         |  |                        CALL LIB$PUT_OUTPUT('THERE ARE'//MSGNUM//                                             
  570            1|  |                              ' BROADCAST MESSAGES'//CHAR(BELL),1,1)                                          
  571   8 *       |  |                     ELSE                                                                                     
  572   9         |  |                        CALL LIB$PUT_OUTPUT('THERE ARE '//MSGNUM//                                            
  573            1|  |                              ' BROADCAST MESSAGES'//CHAR(BELL),1,1)                                          
  574   8 *       |  |                     ENDIF                                                                                    
  575   7 *       |  |                  ENDIF                                                                                       
  576   7         |  |                  CALL LIB$SET_CURSOR(3,1)                                                                    
  577   6 *       |  |               ENDIF                                                                                          
  578   6         |  |               IF (VT100A) CALL LIB$PUT_SCREEN(REGVID)                                                        
                  |  |              +-----------------------------------------------------------------------------------------------
  579   6 *       |  |              |DO FOREVER                                                                                     
  580   7         |  |              |   CALL LIB$GET_INPUT(CLINE,'Command: ',LENGTH)                                                
  581   7         |  |              |   CALL COMLVL(CLINE(:LENGTH),DONE)                                                            
  582   7 *       |  |              |   UNDO IF (DONE)                                                                              
                  |  |              <----                                                                                           
  583   6 *       |  |              |END DO FOREVER                                                                                 
                  |  |              +-----------------------------------------------------------------------------------------------
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   13


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  584   6         |  |               CALL DOIT(-1,.TRUE.,0.,.FALSE.)                                                                
  585   6         |  |               CALL DOIT(-12,.FALSE.,0.,.FALSE.)                                                              
  586   6         |  |               LENBUF = LENBUF - 1                                                                            
  587   6 *       |  |               CYCLE 1400                                                                                     
                  |<------------------                                                                                              
  588   5 *       |  |            ELSE                                                                                              
  589   6         |  |               LENBUF = LENBUF - 1                                                                            
  590   6 *       |  |               UNDO                                                                                           
                  |  <----------------                                                                                              
  591   5 *       |  |            ENDIF                                                                                             
  592   4 *       |  |         ENDIF                                                                                                
  593   3 *       |  |      ENDIF                                                                                                   
  594   2 *       |  |   ENDIF                                                                                                      
  595   1 *       |  |END DO FOREVER                                                                                                
                  |  +--------------------------------------------------------------------------------------------------------------
  596   1         |   OUTLEN = LENBUF                                                                                               
  597   1         |   IF (VT100A) CALL LIB$PUT_SCREEN(REGVID)                                                                       
  598   1         |   CALL LIB$SET_CURSOR(1,1)                                                                                      
  599       C     |                                 C                                                                               
  600       C     |                                 C***   Execute commands                                                         
  601       C     |                                 C                                                                               
  602   1         |   CALL STR$TRANSLATE(LINE,LINE,' ','	')                                                                         
  603   1         |   CALL STR$TRIM(LINE(:LENBUF),LINE(:LENBUF),LENBUF)                                                             
                  |  +--------------------------------------------------------------------------------------------------------------
  604   1 *       |  |DO FOREVER                                                                                                    
  605   2         |  |   CALL PRSCOM(LINE,LENBUF,ICOM,NUMFLG,ANUMB,MINFLG,0,0)                                                      
  606   2 *       |  |   UNDO IF (ICOM .EQ. 0)                                                                                      
                  |  <----                                                                                                          
  607   2         |  |   IF (ICOM .GT. 0) CALL DOIT(ICOM,NUMFLG,ANUMB,MINFLG)                                                       
  608   2 *       |  |   UNDO IF (ICOM .EQ. 5)                                                                                      
                  |  <----                                                                                                          
  609   1 *       |  |END DO FOREVER                                                                                                
                  |  +--------------------------------------------------------------------------------------------------------------
  610     *       |END DO FOREVER                                                                                                   
                  +-----------------------------------------------------------------------------------------------------------------
  611       C                                       C                                                                               
  612       C                                       C***********************************************************************        
  613       C                                       C****************************   PROCEDURES   ***************************        
  614       C                                       C***********************************************************************        
  615       C                                       C                                                                               
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   14


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  616     *        PROCEDURE (ERASE_COMMAND)                                                                                        
  617       C                                       CP    This procedure erase the command part of the bottom line.                 
  618   1 *           IF (VT100A)                                                                                                   
  619   2                CALL LIB$PUT_SCREEN(REGVID//BLANK(:LENBUF)//REVVID,COMLIN,10)                                              
  620   1 *           ELSE                                                                                                          
  621   2                CALL LIB$PUT_SCREEN(BLANK(:LENBUF),COMLIN,10)                                                              
  622   1 *           ENDIF                                                                                                         
  623   1             CALL LIB$SET_CURSOR(COMLIN,10)                                                                                
  624     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   15


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  625     *        PROCEDURE (GET_FIRST_SCREEN)                                                                                     
  626       C                                       CP    This procedure inputs and formats the first screen-full of output.        
  627       C                                       C                                                                               
  628       C                                       C***   Read in first bunch of data and output                                   
  629       C                                       C                                                                               
  630   1             BLK = 1                                                                                                       
  631   1             SBLK = BLK                                                                                                    
  632   1 *           IF (EBK .GT. 6)                                                                                               
  633   2                CALL BLKSIN(BLK,NBUF,BUFFER(1))                                                                            
  634   2 *              IF (NBUF .EQ. 0)                                                                                           
  635   3 *                 EXECUTE (READ_ERROR)                                                                                    
  636   2 *              ENDIF                                                                                                      
  637   1 *           ELSE                                                                                                          
  638   2                NBUF = 0                                                                                                   
                        +-----------------------------------------------------------------------------------------------------------
  639   2 *             |DO FOR I=1,EBK                                                                                             
  640   3               |   CALL BLKIN(BLK,J,BUFFER(NBUF+1))                                                                        
  641   3 *             |   IF (J .EQ. 0)                                                                                           
  642   4 *             |      EXECUTE (READ_ERROR)                                                                                 
  643   3 *             |   ENDIF                                                                                                   
  644   3               |   NBUF = NBUF + J                                                                                         
  645   2 *             |END DO FOR                                                                                                 
                        +-----------------------------------------------------------------------------------------------------------
  646   1 *           ENDIF                                                                                                         
  647   1             CALL LINCON(.TRUE.)                                                                                           
  648   1             J = PAGLEN                                                                                                    
  649   1 *           IF (NLINES .LT. PAGLEN)                                                                                       
                        +-----------------------------------------------------------------------------------------------------------
  650   2 *             |DO FOREVER                                                                                                 
  651   3 *             |   IF (BLK .GT. EBK)                                                                                       
  652   4               |      J = NLINES                                                                                           
  653   4 *             |      UNDO                                                                                                 
                        <-------                                                                                                    
  654   3 *             |   ENDIF                                                                                                   
  655   3               |   CALL BLKIN(BLK,I,BUFFER(NBUF+1))                                                                        
  656   3 *             |   IF (I .EQ. 0)                                                                                           
  657   4 *             |      EXECUTE (READ_ERROR)                                                                                 
  658   3 *             |   ENDIF                                                                                                   
  659   3               |   NBUF = NBUF + I                                                                                         
  660   3               |   CALL LINCON(.FALSE.)                                                                                    
  661   3 *             |   UNDO IF (NLINES .GE. PAGLEN)                                                                            
                        <----                                                                                                       
  662   2 *             |END DO FOREVER                                                                                             
                        +-----------------------------------------------------------------------------------------------------------
  663   1 *           ENDIF                                                                                                         
  664   1             CALL LIB$ERASE_PAGE(1,1)                                                                                      
  665   1             CALL LIB$SET_CURSOR(1,1)                                                                                      
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   16


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

                     +--------------------------------------------------------------------------------------------------------------
  666   1 *          |DO FOR I=1,J                                                                                                  
  667   2 *          |   IF (LENLMT .LT. 0)                                                                                         
  668   3 *          |      IF (LINLEN(I) .LE. (-LENLMT))                                                                           
  669   4            |         CALL LIB$PUT_SCREEN(LINES(I)(:LINLEN(I))//CRLF)                                                      
  670   3 *          |      ELSE                                                                                                    
  671   4            |         CALL LIB$PUT_SCREEN(LINES(I)(:-LENLMT)//CRLF//                                                       
  672            1   |               LINES(I)(1-LENLMT:LINLEN(I))//CRLF)                                                            
  673   3 *          |      ENDIF                                                                                                   
  674   2 *          |   ELSE                                                                                                       
  675   3 *          |      IF (LINLEN(I) .LT. LENLMT)                                                                              
  676   4            |         CALL LIB$PUT_SCREEN(LINES(I)(:LINLEN(I))//CRLF)                                                      
  677   3 *          |      ELSE                                                                                                    
  678   4            |         CALL LIB$PUT_SCREEN(LINES(I)(:LENLMT)//CRLF)                                                         
  679   3 *          |      ENDIF                                                                                                   
  680   2 *          |   ENDIF                                                                                                      
  681   1 *          |END DO FOR                                                                                                    
                     +--------------------------------------------------------------------------------------------------------------
  682   1             PAGEND = J                                                                                                    
  683   1             IF (PAGLEN .EQ. 22) CALL LIB$PUT_SCREEN(CRLF)                                                                 
  684   1             IF (VT100A) CALL LIB$PUT_SCREEN(REVVID)                                                                       
  685   1             CALL LIB$PUT_SCREEN('Block 1',24,IABS(LENLMT)-6)                                                              
  686   1             IF (VT100A) CALL LIB$PUT_SCREEN(REGVID)                                                                       
  687   1             CALL LIB$SET_CURSOR(1,1)                                                                                      
  688     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   17


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  689     *        PROCEDURE (MAIN_DIR_SEARCH)                                                                                      
  690       C                                       CP    This routine searches the directories of the users username on the        
  691       C                                       CP    various disks (JPL, CIT, and SYS2 in that order) for the                  
  692       C                                       CP    symbol file (LOOKCOM.DAT), and if found opens it.                         
  693   1             CALL INTASC(I,USER,CHUSER)                                                                                    
  694   1             SYMFIL='JPL:['//CHUSER(:INDEX(CHUSER,' ')-1)//']LOOKCOM.DAT'                                                  
  695   1             OPEN (UNIT=30,NAME=SYMFIL,TYPE='OLD',READONLY,ERR=1000,                                                       
  696            1          ACCESS='SEQUENTIAL',FORM='FORMATTED')                                                                   
                     +--------------------------------------------------------------------------------------------------------------
  697   1 *          |DO LABEL                                                                                                      
  698   2 *          |   LABEL 1000                                                                                                 
  699   3            |      SYMFIL(1:3) = 'CIT'                                                                                     
  700   3            |      OPEN (UNIT=30,NAME=SYMFIL,TYPE='OLD',READONLY,ERR=1100,                                                 
  701            1   |            ACCESS='SEQUENTIAL',FORM='FORMATTED')                                                             
  702   2 *          |   LABEL 1100                                                                                                 
  703   3            |      SYMFIL = 'SYS2'//SYMFIL(4:)                                                                             
  704   3            |      OPEN (UNIT=30,NAME=SYMFIL,TYPE='OLD',READONLY,ERR=1200,                                                 
  705            1   |            ACCESS='SEQUENTIAL',FORM='FORMATTED')                                                             
  706   2 *          |   LABEL 1200                                                                                                 
  707   3            |      FILEOK = .FALSE.                                                                                        
  708   1 *          |END DO LABEL                                                                                                  
                     +--------------------------------------------------------------------------------------------------------------
  709     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   18


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  710     *        PROCEDURE (NO_INPUT_EXIT)                                                                                        
  711       C                                       CP    This routine is an error routine if something goes wrong with getting     
  712       C                                       CP    input from the terminal.                                                  
  713   1             CALL LIB$PUT_OUTPUT(' CANNOT INPUT FROM SYS$INPUT.')                                                          
  714   1             CALL EXIT                                                                                                     
  715     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   19


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  716     *        PROCEDURE (OPEN_PRINTOUT)                                                                                        
  717       C                                       CP    This procedure opens the input file.                                      
  718       C                                       C                                                                               
  719       C                                       C***  Try to open printout file                                                 
  720       C                                       C                                                                               
  721   1             J = LIB$SKPC(' ',LINE)                                                                                        
  722   1             FILE = LINE(J:)                                                                                               
  723   1             I = INDEX(FILE,' ') - 1                                                                                       
  724   1             CALL BLKOPN(FILE(:I),ERR,RFM,RAT,FSZ,EBK,LRL)                                                                 
  725   1 *           IF (ERR .NE. 1)                                                                                               
  726   2                IF (I .LE. 0) I = 1                                                                                        
  727   2                CALL SYS$GETMSG(%VAL(ERR),J,LINE,%VAL(15),)                                                                
  728   2                CALL LIB$PUT_OUTPUT('****   UNABLE TO OPEN FILE '//FILE(:I))                                               
  729   2                CALL LIB$PUT_OUTPUT(LINE(:J))                                                                              
  730   2                CALL EXIT                                                                                                  
  731   1 *           ENDIF                                                                                                         
  732   1 *           IF (RFM .EQ. 1 .AND. FSZ)                                                                                     
  733   2                IFSZ = FSZ + 1                                                                                             
  734   1 *           ELSE                                                                                                          
  735   2                IFSZ = FSZ                                                                                                 
  736   1 *           ENDIF                                                                                                         
  737   1 *           IF (RAT .LT. 0 .AND. RFM .EQ. 1)                                                                              
  738   2                RECBLK = IFSZ*(512/IFSZ)                                                                                   
  739   1 *           ELSE                                                                                                          
  740   2                RECBLK = 512                                                                                               
  741   1 *           ENDIF                                                                                                         
  742     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   20


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  743     *        PROCEDURE (PROCESS_COM_LINE)                                                                                     
  744       C                                       CP    This procedure processes the command line.                                
  745       C                                       C                                                                               
  746       C                                       C***  Get file name off command line or prompt for it                           
  747       C                                       C***  Also check for /DEFINITIONS switch                                        
  748       C                                       C                                                                               
  749   1             CALL LIB$GET_FOREIGN(LINE,'Filename: ',LENGTH)                                                                
  750   1             CALL STR$UPCASE(LINE(:LENGTH),LINE(:LENGTH))                                                                  
  751       C                                       C                                                                               
  752       C                                       C***  Get rid of tabs                                                           
  753       C                                       C                                                                               
  754   1             CALL STR$TRANSLATE(LINE(:LENGTH),LINE(:LENGTH),' ','	')                                                       
  755       C                                       C                                                                               
  756       C                                       C***  Get the switches                                                          
  757       C                                       C                                                                               
                     +--------------------------------------------------------------------------------------------------------------
  758   1 *          |DO FOREVER                                                                                                    
  759   2            |   I = INDEX(LINE(:LENGTH),'/') + 1                                                                           
  760   2 *          |   UNDO IF (I .EQ. 1)                                                                                         
                     <----                                                                                                          
  761   2            |   J = INDEX(LINE(I:LENGTH),'/') + I - 2                                                                      
  762   2            |   IF (J .EQ. (I - 2)) J = LENGTH                                                                             
  763   2            |   K = INDEX(LINE(I:LENGTH),' ') + I - 2                                                                      
  764   2            |   IF (K .EQ. (I - 2)) K = LENGTH                                                                             
  765   2            |   IF (K .LT. J) J = K                                                                                        
                     |  +-----------------------------------------------------------------------------------------------------------
  766   2 *          |  |DO                                                                                                         
  767       C        |  |                           C                                                                               
  768       C        |  |                           C---   WRAP                                                                     
  769       C        |  |                           C                                                                               
  770   3 *          |  |   IF ((J - I) .LE. 3)                                                                                     
  771   4 *          |  |      IF (LINE(I:J) .EQ. WRAP(:J-I+1))                                                                     
  772   5            |  |         LENLMT = -LENLMT                                                                                  
  773   5 *          |  |         UNDO                                                                                              
                     |  <----------                                                                                                 
  774   4 *          |  |      ENDIF                                                                                                
  775   3 *          |  |   ENDIF                                                                                                   
  776       C        |  |                           C                                                                               
  777       C        |  |                           C---   NARROW                                                                   
  778       C        |  |                           C                                                                               
  779   3 *          |  |   IF ((J - I) .LE. 5)                                                                                     
  780   4 *          |  |      IF (LINE(I:J) .EQ. NARROW(:J-I+1))                                                                   
  781   5            |  |         WIDE = 1                                                                                          
  782   5 *          |  |         IF (LENLMT .LT. 0)                                                                                
  783   6            |  |            LENLMT = -80                                                                                   
  784   5 *          |  |         ELSE                                                                                              
  785   6            |  |            LENLMT = 80                                                                                    
  786   5 *          |  |         ENDIF                                                                                             
  787   5 *          |  |         UNDO                                                                                              
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   21


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

                     |  <----------                                                                                                 
  788   4 *          |  |      ENDIF                                                                                                
  789   3 *          |  |   ENDIF                                                                                                   
  790       C        |  |                           C                                                                               
  791       C        |  |                           C---   BOX                                                                      
  792       C        |  |                           C                                                                               
  793   3 *          |  |   IF ((J - I) .LE. 2)                                                                                     
  794   4 *          |  |      IF (LINE(I:J) .EQ. BOX(:J-I+1))                                                                      
  795   5            |  |         PAGLEN = 22                                                                                       
  796   5 *          |  |         UNDO                                                                                              
                     |  <----------                                                                                                 
  797   4 *          |  |      ENDIF                                                                                                
  798   3 *          |  |   ENDIF                                                                                                   
  799       C        |  |                           C                                                                               
  800       C        |  |                           C---   Definitions file                                                         
  801       C        |  |                           C                                                                               
  802   3            |  |   K = INDEX(LINE,'=')                                                                                     
  803   3 *          |  |   IF (K .NE. 0 .AND. K .NE. J .AND. (K - I) .LE. 11)                                                      
  804   4 *          |  |      IF (LINE(I:K-1) .EQ. DEFSW(:K-I))                                                                    
  805   5            |  |         SYMFIL = LINE(K+1:J)                                                                              
  806   5            |  |         L = INDEX(SYMFIL,']') + 1                                                                         
  807   5 *          |  |         IF (INDEX(SYMFIL(L:),'.') .EQ. 0)                                                                 
  808   6            |  |            L = INDEX(SYMFIL,';')                                                                          
  809   6 *          |  |            IF (L .EQ. 0)                                                                                  
  810   7            |  |               SYMFIL = LINE(K+1:J)//'.'                                                                   
  811   6 *          |  |            ELSE                                                                                           
  812   7            |  |               SYMFIL = SYMFIL(:L-1)//'.'//SYMFIL(L:)                                                      
  813   6 *          |  |            ENDIF                                                                                          
  814   5 *          |  |         ENDIF                                                                                             
  815   5 *          |  |         UNDO                                                                                              
                     |  <----------                                                                                                 
  816   4 *          |  |      ENDIF                                                                                                
  817   3 *          |  |   ENDIF                                                                                                   
  818   3            |  |   CALL LIB$PUT_OUTPUT(' ****   INVALID SWITCH   ****')                                                    
  819   3            |  |   CALL EXIT                                                                                               
  820   2 *          |  |END DO                                                                                                     
                     |  +-----------------------------------------------------------------------------------------------------------
  821   2            |   LINE = LINE(:I-2)//LINE(J+1:)                                                                              
  822   2            |   LENGTH = LENGTH - J + I - 2                                                                                
  823   1 *          |END DO FOREVER                                                                                                
                     +--------------------------------------------------------------------------------------------------------------
  824     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   22


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  825     *        PROCEDURE (PROCESS_SYMBOL_FILE)                                                                                  
  826       C                                       CP    This procedure processes the symbol/command file.                         
                     +--------------------------------------------------------------------------------------------------------------
  827   1 * 300      |DO                                                                                                            
  828   2 *          |   IF (SYMFIL .EQ. ' ')                                                                                       
  829       C        |                              C                                                                               
  830       C        |                              C***  Get user information to try and find a definitions file                   
  831       C        |                              C                                                                               
  832   3            |      GETLIS(2) = %LOC(USER(1))                                                                               
  833   3            |      GETLIS(3) = %LOC(I)                                                                                     
  834   3            |      GETLIS(5) = %LOC(GROUP)                                                                                 
  835   3            |      GETLIS(8) = %LOC(MEMBER)                                                                                
  836   3            |      CALL SYS$GETJPI(,,,GETLIS,,,)                                                                           
  837   3            |      OPEN (UNIT=30,NAME='LOOKCOM.DAT',TYPE='OLD',READONLY,ERR=400,                                           
  838            1   |            ACCESS='SEQUENTIAL',FORM='FORMATTED',USEROPEN=GETOWN)                                             
  839   3 *          |      IF (OWNER(1) .NE. GROUP .OR. OWNER(2) .NE. MEMBER)                                                      
  840   4            |         CLOSE (UNIT=30)                                                                                      
  841   4 *          |         EXECUTE (MAIN_DIR_SEARCH)                                                                            
  842   3 *          |      ENDIF                                                                                                   
                     |     +--------------------------------------------------------------------------------------------------------
  843   3 *          |     |DO LABEL                                                                                                
  844   4 *          |     |   LABEL 400                                                                                            
  845   5 *          |     |      EXECUTE (MAIN_DIR_SEARCH)                                                                         
  846   3 *          |     |END DO LABEL                                                                                            
                     |     +--------------------------------------------------------------------------------------------------------
  847   2 *          |   ELSE                                                                                                       
  848   3            |      OPEN (UNIT=30,NAME=SYMFIL,TYPE='OLD',READONLY,ERR=500,                                                  
  849            1   |            ACCESS='SEQUENTIAL',FORM='FORMATTED')                                                             
                     |     +--------------------------------------------------------------------------------------------------------
  850   3 *          |     |DO LABEL                                                                                                
  851   4 *          |     |   LABEL 500                                                                                            
  852   5            |     |      CALL LIB$PUT_SCREEN(REVVID//'Could not open file '//                                              
  853            1   |     |            SYMFIL(:INDEX(SYMFIL,' ')-1)//REGVID//CHAR(BELL),                                           
  854            2   |     |            24,20)                                                                                      
  855   5 *          |     |      UNDO 300                                                                                          
                     <-------------                                                                                                 
  856   3 *          |     |END DO LABEL                                                                                            
                     |     +--------------------------------------------------------------------------------------------------------
  857   2 *          |   ENDIF                                                                                                      
  858       C        |                              C                                                                               
  859       C        |                              C***   Read in lines and interpret them                                         
  860       C        |                              C                                                                               
  861   2            |   IF (FILEOK) CALL DODEF                                                                                     
  862   1 *          |END DO                                                                                                        
                     +--------------------------------------------------------------------------------------------------------------
  863     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   23


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  864     *        PROCEDURE (READ_ERROR)                                                                                           
  865       C                                       CP    This procedure is executed if an error occurs while reading the           
  866       C                                       CP    input file.                                                               
  867   1             CALL LIB$PUT_OUTPUT(' ERROR READING FILE')                                                                    
  868   1             CALL EXIT                                                                                                     
  869     *        END PROCEDURE                                                                                                    
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   24


 LINE NST
  NUM LVL S INPUT S-FORTRAN STATEMENT

  870     *        PROCEDURE (SETUP_TERM)                                                                                           
  871       C                                       CP    This procedure opens and sets up the terminal.                            
  872       C                                       C                                                                               
  873       C                                       C***   Open a channel to SYS$INPUT                                              
  874       C                                       C                                                                               
  875   1 *           IF (.NOT.SYS$TRNLOG('TT',I,SRCHBF(1),,,))                                                                     
  876   2 *              EXECUTE (NO_INPUT_EXIT)                                                                                    
  877   1 *           ENDIF                                                                                                         
  878   1 *           IF (INDEX(SRCHBF(1)(:I),'LPA0') .NE. 0)                                                                       
  879   2 *              IF (.NOT.SYS$TRNLOG('SYS$INPUT',I,SRCHBF(1),,,))                                                           
  880   3 *                 EXECUTE (NO_INPUT_EXIT)                                                                                 
  881   2 *              ENDIF                                                                                                      
  882   1 *           ENDIF                                                                                                         
  883   1 *           IF (ICHAR(SRCHBF(1)) .EQ. 27)                                                                                 
  884   2                I = I - 4                                                                                                  
  885   2                SRCHBF(1) = SRCHBF(1)(5:)                                                                                  
  886   1 *           ENDIF                                                                                                         
  887   1 *           IF (.NOT.SYS$ASSIGN(SRCHBF(1)(:I),INCHAN,,))                                                                  
  888   2 *              EXECUTE (NO_INPUT_EXIT)                                                                                    
  889   1 *           ENDIF                                                                                                         
  890       C                                       C                                                                               
  891       C                                       C***   Set terminal characteristics                                             
  892       C                                       C                                                                               
  893   1             CALL SETERM(INCHAN,WIDE,LENLMT)                                                                               
  894       C                                       C                                                                               
  895       C                                       C***   Declare exit handler                                                     
  896       C                                       C                                                                               
  897   1             DSCBLK(2) = %LOC(EXITR)                                                                                       
  898   1             DSCBLK(3) = 1                                                                                                 
  899   1             DSCBLK(4) = %LOC(I)                                                                                           
  900   1             CALL SYS$DCLEXH(DSCBLK)                                                                                       
  901       C                                       C                                                                               
  902       C                                       C***   If wanted format dividing line                                           
  903       C                                       C                                                                               
  904   1 *           IF (VT100A)                                                                                                   
  905   2                DIVLIN(1:1) = REVVID(1:1)                                                                                  
  906   2                DIVLIN(2:) = '(0qqqqqqqqqqqqqqqqqqqqqqqqqqq'//                                                             
  907            1             'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq'//                                            
  908            2             'qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq'                                               
  909   1 *           ELSE                                                                                                          
  910   2                DIVLIN = '--------------------------------'//                                                              
  911            1             '---------------------------------------------------'                                                
  912   1 *           ENDIF                                                                                                         
  913     *        END PROCEDURE                                                                                                    
  914              END                                                                                                              
 
 CFG, INC.      S-FORTRAN PROCESSOR VERSION 1.6(9)        LOOK                  29-SEP-83      15:31:32      PAGE   25


                                        PROCEDURE CROSS-REFERENCE TABLE

 LINE   PROCEDURE NAME                              REFERENCE LINES

  616  ERASE_COMMAND                  
                                543   549 

  625  GET_FIRST_SCREEN               
                                458 

  689  MAIN_DIR_SEARCH                
                                841   845 

  710  NO_INPUT_EXIT                  
                                876   880   888 

  716  OPEN_PRINTOUT                  
                                456 

  743  PROCESS_COM_LINE               
                                455 

  825  PROCESS_SYMBOL_FILE            
                                459 

  864  READ_ERROR                     
                                635   642   657 

  870  SETUP_TERM                     
                                457 

       0 DIAGNOSTICS GENERATED
