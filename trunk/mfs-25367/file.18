C
      SUBROUTINE MAXLIK (X, CLASS, EM, EK, B, COVINV)
C
C  COMPUTE GAUSSIAN STATISTICS AND TEST USING TRAINING SAMPLES
C
      DIMENSION X(1), CLASS(1), EM(1), EK(1), B(1), COVINV(1)
      COMMON /CLSSFR/ NN, MM, NRECS, NSAMP, NSC
C
C  COMPUTE THE GAUSSIAN STATISTICS OF THE TRAINING SAMPLES
      CALL SUBLOP (X, CLASS, EM, EK, B, COVINV)
C
C  TEST THE CLASSIFICATION OF THE TRAINING SAMPLES
      CALL PTEST (X, CLASS, EM, B, COVINV)
      RETURN
      END
C
      SUBROUTINE SUBLOP (X, CLASS, EM, EK, B, COVINV)
C
C  SUPERVISED BATCH LEARNING OF PARAMETERS
C  COMPUTE MEAN VECTORS AND COVARIANCE MATRICES
C
      LOGICAL*1 X(NN,MM,LKK)
      DIMENSION EM(NN,MM), B(MM), COVINV(1)
      DOUBLE PRECISION CLASS(MM), EK(NN,NN), DET
      COMMON /CLSSFR/ NN, MM, NRECS, NSAMP, LKK
C
C     LOOP OVER CLASSES
      WRITE (6,4550)
      K = 0
      DO 9500 I3=1,MM
C
      DO 9000 I1=1,NN
      MEAN = 0
        DO 4000 LK=1,LKK
 4000   MEAN = MEAN + X(I1,I3,LK)
 9000 EM(I1,I3) = FLOAT(MEAN) / FLOAT(LKK)
C
      DO 9200 I1=1,NN
      DO 9200 I2=1,I1
      EK(I1,I2) = 0.0
        DO 9100 LK=1,LKK
 9100   EK(I1,I2) = EK(I1,I2) + (X(I1,I3,LK)-EM(I1,I3)) *
     .  (X(I2,I3,LK)-EM(I2,I3))
      EK(I1,I2) = EK(I1,I2) / (LKK-1)
      EK(I2,I1) = EK(I1,I2)
 9200 CONTINUE
C
      WRITE (6,4577) I3, CLASS(I3), LKK
      DO 9300 N1=1,NN
 9300 WRITE (6,4554) EM(N1,I3), (EK(N1,N2), N2=1,N1)
C
C  INVERT COVARIANCE MATRICES, COMPUTE GAUSSIAN FUNCTION CONSTANT TERMS
      CALL GASINV (EK, NN, DET)
      B(I3) = -0.5 * (NN*ALOG(2.0*3.14159265) + DLOG(DET))
      WRITE (6,4557) DET
C
C     PACK THE LOWER TRIANGULAR PART OF THE INVERSE COVARIANCE MATRIX
      DO 9400 N1=1,NN
      DO 9400 N2=1,N1
      K = K + 1
 9400 COVINV(K) = EK(N1,N2)
 9500 CONTINUE
      RETURN
C
 4550 FORMAT ('1'/20X,'ESTIMATED GAUSSIAN PARAMETERS'/20X,29('*')//5X,
     .'MEAN VECTORS',10X,'COVARIANCE MATRICES')
 4554 FORMAT (F15.2,(5X,16F7.2))
 4557 FORMAT (/20X,'DETERMINANT =',1PE10.3)
 4577 FORMAT (//I20,A10,I6,' SAMPLES')
      END
C
      SUBROUTINE PTEST (X, CLASS, EM, B, COVINV)
C
C  CLASSIFIES KNOWN DATA SAMPLES - PARAMETRIC CLASSIFICATION
C
      DIMENSION EM(1), B(1), COVINV(1), KS(20)
      LOGICAL*1 X(NN,MM,NSC), MCLASS
      DOUBLE PRECISION CLASS(MM)
      COMMON /CLSSFR/ NN, MM, NRECS, NSAMP, NSC
C
      WRITE (6,2008) CLASS
      TE = 0.0
C
      DO 1301 NC = 1,MM
      DO 1221 NW=1,MM
 1221 KS(NW) = 0
C
      DO 1400 NS1 = 1,NSC
 1400 CALL MALICA (X(1,NC,NS1), MCLASS, KS, EM, B, COVINV, 1)
C
      EFF = 100.0 * KS(NC) / NSC
      WRITE (6,2009) NC, CLASS(NC), NSC, KS(NC), EFF, (KS(N), N=1,MM)
 1301 TE = TE + EFF
C
      AVE = TE / FLOAT(MM)
      WRITE (6,2000) AVE
      RETURN
C
 2000 FORMAT (//30X,18HAVERAGE ACCURACY =,F6.1,8H PERCENT/30X,32(1H*))
 2008 FORMAT ('1'/30X,29('*')/30X,'* RESULTS OF CLASSIFICATION *'/30X,'*
     .     TRAINING SAMPLES      *'/30X,29('*')///14X,'NUMBER OF  NUMBER
     .     PERCENT     NUMBER OF SAMPLES CLASSIFIED AS'/6X,'CLASS    SAM
     .PLES   CORRECT    CORRECT',10A9/(43X,10A9))
 2009 FORMAT (/I4,A9,I7,I10,F12.1,10I9,(/42X,10I9))
      END
C
      SUBROUTINE PCLASS (S, MCLASS, CLASS, EM, B, COVINV)
C
C  CLASSIFIES UNKNOWN DATA SAMPLES - PARAMETRIC CLASSIFICATION
C
      LOGICAL*1 S(NN,NSAMP), MCLASS(NSAMP)
      DIMENSION EM(1), B(1), COVINV(1), KS(20)
      DOUBLE PRECISION CLASS(MM)
      COMMON /CLSSFR/ NN, MM, NRECS, NSAMP, NSC
C
      DO 10 NC=1,MM
   10 KS(NC) = 0
C
      DO 12 NREC=1,NRECS
      READ (10) S
      CALL MALICA (S, MCLASS, KS, EM, B, COVINV, NSAMP)
   12 WRITE (11) MCLASS
C
      NTOT = NSAMP * NRECS
      WRITE (6,2010)
      DO 20 NC=1,MM
      PCT = 100.0 * KS(NC) / NTOT
   20 WRITE (6,2011) NC, CLASS(NC), KS(NC), PCT
      WRITE (6,2012) NTOT
      RETURN
C
 2010 FORMAT ('1'/30X,29('*')/30X,'* RESULTS OF CLASSIFICATION *'/30X,
     .'*',7X,'DATA SAMPLES',8X,'*'/30X,29('*')///20X,'CLASS',15X,'SAMPLE
     .S',15X,'PERCENT'/20X,5('*'),2(15X,7('*')))
 2011 FORMAT (/I18,A9,I20,F21.2)
 2012 FORMAT (/14X,'TOTAL SAMPLES',I20/14X,13('*'))
      END
C
      SUBROUTINE MALICA (X1, KMAX, KS, EM, B, COVINV, NSS)
C
C          MAXIMUM LIKELIHOOD CLASSIFICATION
C
      DIMENSION KS(1), EM(NN,MM), B(MM), COVINV(1), DX(20), AX(20)
      LOGICAL*1 X1(NN,NSS), KMAX(NSS)
      COMMON /CLSSFR/ NN, MM, NRECS, NSAMP, NSC
C
      DO 2000 NS1=1,NSS
      DO 1000 NF1=1,NN
 1000 AX(NF1) = X1(NF1,NS1)
C
C     FIND MAXIMUM PROBABILITY OVER CLASSES
      GMAX = -1.0 E 50
      K = 0
      DO 1900 I=1,MM
      G = B(I)
C
C       COMPUTE GAUSSIAN EXPONENT (-1/2) (X-M) (KINV) (X-M)
        DO 6300 II=1,NN
        DX(II) = AX(II) - EM(II,I)
C
C           COMPUTE TERMS FROM LOWER TRIANGULAR MATRIX
            SUM = 0.0
            JJ = 0
 6200       CONTINUE
            JJ = JJ + 1
            IF (JJ.EQ.II) GO TO 6250
            K = K + 1
            SUM = SUM + DX(JJ)*COVINV(K)
            GO TO 6200
C
C         COMPUTE 1/2 DIAGONAL TERM OF (X-M) (KINV)
 6250     K = K + 1
          SUM = SUM + 0.5*DX(JJ)*COVINV(K)
C
 6300   G = G - SUM*DX(II)
C
      IF (G.LT.GMAX) GO TO 1900
      MAX = I
      GMAX = G
 1900 CONTINUE
      KS(MAX) = KS(MAX) + 1
 2000 KMAX(NS1) = MAX
      RETURN
      END
C
      SUBROUTINE GASINV (A, N, DET)
C
C  COMPUTE INVERSE AND DETERMINANT OF SYMMETRIC MATRIX A
C
      DOUBLE PRECISION A(30,30), DET, TEST, TEMP, FAC, W, D
      DIMENSION IORD(20)
      DET = 1.0
      DO 1 I=1,N
    1 IORD(I) = I
      DO 2 K=1,N
      IF (K.EQ.N) GO TO 3
      TEST = DABS(A(K,K))
      KP1 = K + 1
      L = K
      DO 4 I=KP1,N
      IF (TEST.GE.DABS(A(I,K))) GO TO 4
      TEST = DABS(A(I,K))
      L = I
 4    CONTINUE
      IF (L.EQ.K) GO TO 3
      DO 5 J=1,N
      TEMP = A(L,J)
      A(L,J) = A(K,J)
    5 A(K,J) = TEMP
      J = IORD(L)
      IORD(L) = IORD(K)
      IORD(K) = J
      DET = -DET
    3 DET = DET*A(K,K)
      A(K,K) = 1.0 / A(K,K)
      DO 6 J=1,N
      IF (J.EQ.K) GO TO 6
      A(K,J) = A(K,J) * A(K,K)
 6    CONTINUE
      DO 7 I=1,N
      IF (I.EQ.K) GO TO 7
      FAC = A(I,K)
      A(I,K) = -A(I,K) * A(K,K)
      DO 8 J=1,N
      IF (J.EQ.K) GO TO 8
      W = FAC * A(K,J)
      D = A(I,J) - W
      IF (DABS(D).LT.0.00001*DABS(W)) D = 0.0
      A(I,J) = D
 8    CONTINUE
 7    CONTINUE
 2    CONTINUE
      NM1 = N-1
      DO 9 J=1,NM1
 12   CONTINUE
      IF (IORD(J).EQ.J) GO TO 9
      K = IORD(J)
      IORD(J) = IORD(K)
      IORD(K) = K
      DO 10 I=1,N
      TEMP = A(I,J)
      A(I,J) = A(I,K)
   10 A(I,K) = TEMP
      GO TO 12
 9    CONTINUE
      DO 15 I=2,N
      I1 = I - 1
      DO 15 J=1,I1
      A(I,J) = (A(I,J)+A(J,I))/2.0
   15 A(J,I) = A(I,J)
      RETURN
      END
