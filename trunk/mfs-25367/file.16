C
C     MAIN PROGRAM  -  DRIVER FOR BLOB ROUTINE
C
C     THE FOLLOWING LIST DEFINES THE PARAMETERS USED BY THE BLOB
C     SUBROUTINES, ALONG WITH SAMPLE VALUES.
C
C     NOTE THAT NROW, NCOL, VSIZV, AND VSIZH MUST BE MULTIPLES OF 2 AND
C     NROW = VSIZV * VDIMV
C     NCOL = VSIZH * VDIMH
C
C     NROW = 256     THE VERTICAL SIZE OF THE PICTURE BEING CONTOURED
C     HAFM = 128     HALF OF NROW
C     NCOL = 256     THE HORIZONTAL SIZE OF THE PICTURE BEING CONTOURED
C     HAFN = 128     HALF OF NCOL
C     TCHA = 4       TOTAL NUMBER OF CHANNELS IN THIS PICTURE
C     VSIZV = 32     VERTICAL DIMENSION OF VIRTUAL SEGMENT IN PIXELS
C     VSIZH = 32     HORIZONTAL DIMENSION OF VIRTUAL SEGMENT IN PIXELS
C     RSIZ = 1024    SIZE OF VIRTUAL SEGMENT IN WORDS (VSIZV*VSIZH)
C     NREC = 256     NUMBER OF RECS IN VIRT FILE = VDIMV*VDIMH*TCHA
C     BLKS = 65      NUMBER OF VIRTUAL SEGMENTS PER CHANNEL PLUS 1
C     DSIZ = 4096    MAXIMUM SIZE OF THE DIRECTIONAL LISTS
C     VDIMV = 8      VERTICAL DIMENSION OF PICTURE IN VIRTUAL SEGMENTS
C     VDIMH = 8      HORIZONTAL DIMENSION OF PICTURE IN VIRTUAL SEGMENTS
C     VFIL = 11      UNIT NUMBER OF VIRTUAL FILE
C     MIPS = 9999    MAXIMUM INITIAL POINTS ALLOWED FOR PICTURE
C
C     DEFINE FILE VFIL (NREC,RSIZ,U,NXTREC)
C
C***********************************************************************
C
      DIMENSION SEG(28,32,6,4), RDATA(4,192), BLOBM(4)
      REAL MEANS(4), IPMEAN(4), IPSSQ(4)
      INTEGER BKSTAT(25), OUT(96)
      INTEGER   PMEANS(7000,4)
      INTEGER ADIR(2000), DIR(2000), XCPL(96), YCPL(96)
      INTEGER BOUND(96,56), IPBS(96)
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      LOGICAL*1 STATUS(96,56),SLINE(4,192),TSL(768)
      EQUIVALENCE (SEG(1,1,1,1),PMEANS(1,1))
C
      COMMON//ATOP,DTOP
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON/BLOB1/BLOBN
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON/IPL/IPX,IPY,IPCNT,EXT
      COMMON /LEVELS/ FVAL, TVAL, NCHA
      COMMON /LAST/ XLAST,YLAST
      COMMON/VMEMRY/PGCNT
      COMMON /CPL/ TOPCPL
C
      DEFINE FILE 11 ( 96,896,U,NXTREC)
C
      NROW = 112
      NCOL = 192
      VSIZV = 28
      VSIZH = 32
      HAFM = NROW/2
      HAFN = NCOL/2
      TCHA = 4
      VDIMV = NROW/VSIZV
      VDIMH = NCOL/VSIZH
      RSIZ = VSIZV*VSIZH
      NREC = VDIMV*VDIMH*TCHA
      BLKS = VDIMV*VDIMH + 1
      VFIL = 11
      DSIZ = 2000
      MIPS = 7000
      N = NCOL
      M = NROW
      MAXMN = (MAX0(M,N))/2
      N4 = 4 * NCOL
C
      CALL REFORM (SEG, RDATA, SLINE)
C
      CALL BLOB (DIR,OUT,ADIR,SEG ,XCPL,YCPL,BLOBM,IPSSQ,MEANS,
     #   BKSTAT,IPMEAN,STATUS)
C
      REWIND 8
      REWIND 9
      REWIND 12
      CALL RECON(ADIR,SLINE,TSL,STATUS,PMEANS,BOUND,IPBS,N4)
      STOP
      END
C
      SUBROUTINE REFORM (SEG, RDATA, BDATA)
C
C     SUBROUTINE REFORM EXTRACTS THE AREA OF INTEREST FROM THE
C     INPUT PICTURE IN VECTOR FORMAT AND PARTITIONS IT INTO VIRTUAL
C     SEGMENTS FOR BLOB PROGRAM.
C
C     MODIFIED BY HANS G. MOIK NASA/GSFC CODE 933, SEPTEMBER 1976
C     MODIFIED BY JULIA M. HODGES, DECEMBER 1977
C
C **********************************************************************
C
      IMPLICIT INTEGER*4 (A-Z)
      REAL*4 SEG(VSIZV,VSIZH,VDIMH,TCHA),RDATA(TCHA,NCOL)
      LOGICAL*1 BDATA(TCHA,NCOL)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
C
C     INITIALIZE INPUT UNIT, STARTING LINE, STARTING SAMPLE,
C                NUMBER OF LINES, NUMBER OF SAMPLES.
      UNIT=12
      SL=1
      SS=1
      NL=NROW
      NS=NCOL
      WRITE( 6,1603)
C
      DO 5 YSEG = 1, VDIMV
         LINE = 0
C
C        BUILD ONE ROW OF VIRTUAL SEGMENTS
         DO 4 SLNUM = 1, VSIZV
            LINE = LINE + 1
            CALL GADLIN (RDATA, BDATA, UNIT, SS, NS, LINE, &80, &90)
C
C           NO ERR, SO MOVE DATA TO VIRTUAL PICTURE FILE
    7       DO 3 CHAN = 1, TCHA
               COL = 0
               DO 2 XSEG = 1, VDIMH
                  DO 1 SEGCOL = 1, VSIZH
                     COL = COL + 1
                     SEG(LINE, SEGCOL, XSEG, CHAN) = RDATA(CHAN, COL)
    1             CONTINUE
    2          CONTINUE
    3       CONTINUE
    4   CONTINUE
C
C        WRITE ONE ROW OF SEGMENTS PER CHANNEL
         DO 5 CHAN = 1, TCHA
            DO 5 XSEG = 1, VDIMH
               BLK = (CHAN-1)*(BLKS-1) + (YSEG-1)*VDIMH + XSEG
               WRITE(6,1602) BLK
               WRITE(VFIL'BLK)((SEG(X,Y,XSEG,CHAN),X=1,VSIZV),Y=1,VSIZH)
    5 CONTINUE
      RETURN
C
C     ERROR RETURNS FOR GADLIN
   90 WRITE( 6,1600)
      RETURN
   80 WRITE( 6,1601)
      RETURN
C
 1600 FORMAT (' PERMANENT I/O ERROR ON INPUT TAPE')
 1601 FORMAT (' END OF FILE OR VOLUME ON INPUT TAPE')
 1602 FORMAT (' WRITING BLOCK',I6)
 1603 FORMAT (' STARTING THE REFORMATING')
      END
C
      SUBROUTINE GADLIN (RDATA, BDATA, UNIT, SS, NS, LINE, *, *)
C
C     SUBROUTINE GADLIN MOVES ONE LINE OF PICTURE DATA
C        TO REAL NUMBER ARRAY
C     INPUT TAPE SHOULD BE IN VECTOR FORMAT.
C
C **********************************************************************
C
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER    UNIT
      REAL*4 RDATA(TCHA,NCOL)
      LOGICAL*1 BDATA(TCHA,NCOL)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
C
C     READ A LINE OF PICTURE DATA
      READ (UNIT,END=400,ERR=500) BDATA
C
C     STORE EACH RECORD BYTE (PIXEL COMPONENT VALUE)
C        AS A FULL WORD REAL NUMBER.
      DO 100 I=1,NS
         DO 200 J = 1, TCHA
         RDATA(J,I) = BDATA(J,I)
  200    CONTINUE
  100 CONTINUE
C
      RETURN
C
C     ERROR RETURN FOR READ
  400 RETURN 1
  500 RETURN 2
      END
C
      SUBROUTINE BLOB (DIR,OUT,ADIR,VMEM,XCPL,YCPL,BLOBM,IPSSQ,MEANS,
     #   BKSTAT,IPMEAN,STATUS)
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C     MODIFIED BY HANS G. MOIK, NASA/GSFC CODE 933 IN SEPTEMBER 1976
C     FOR IBM 360 WITH OS/MVT
C     MODIFIED BY JULIA M. HODGES, DECEMBER 1977
C
C     THIS PROGRAM TRACES OUT THE CONTOUR BASED ON THE FIRST
C     N CHANNELS OF THE PRINCIPAL COMPONENT TRANSFORM WHERE N
C     CAN BE UP TO ALL THE TRANSFORMED CHANNELS.
C
C  FILES USAGE:
C     IP - THIS FILE HOLDS ALL THE INFORMATION ABOUT ALL THE
C          INTIAL POINTS (IP) FOR A PICTURE AND THE MEAN OF EACH CONTOUR
C           THE DATA IS FIXED LENGTH RECORDS.
C          ( FORTRAN UNIT NUMBER 8 )
C     DIR - THIS FILE HOLDS THE DIRECTIONAL INFORMATION FOR ALL THE
C           CONTOURS. THE DATA IS VARIABLE LENGTH RECORDS.
C           ( FORTRAN UNIT NUMBER 9 )
C     VFILE - THIS IS THE VIRTUAL PICTURE MEMORY FILE WHICH IS
C             USED TO STORE THE PICTURE SEGMENTS THAT ARE NOT
C             CURRENTLY NEEDED IN CORE.  (READ ONLY FILE )
C             ( FORTRAN UNIT NUMBER 11 )
C     OUTPUT - FILE USED TO PRINT STATISTICS AND ANY ERROR MESSAGES.
C              ( FORTRAN UNIT NUMBER 6 )
C     INPUT - FILE USED TO READ IN FVAL, TVAL, TCHA, AND IPRINT
C             (  FORTRAN UNIT NUMBER 5  )
C
C       FVAL - THE CURRENT F-TEST VALUE
C       TVAL - THE CURRENT T-TEST VALUE
C     POSSIBLE VALUES FOR FVAL AND TVAL ARE LISTED BELOW,
C     THEY BOTH DON'T HAVE TO BE AT THE SAME LEVEL.
C     FURTHERMORE THE LEVELS USED IN IPCPAR AND COMPAR NEED
C     NOT BE THE SAME. (GROUPS OF FOUR PIXELS HAVE BEEN ASSUMED
C     FOR THESE VALUES.)
C LEVEL      F-VALS        T-VALS
C   1        29.45         1.44
C   2        47.467        1.943
C   3       141.1          2.447
C   4       261.0          3.1433
C   5       884.6          3.707
C   6      1514.0          5.959
C
C       ADIR - A LIST OF ALL THE DIRECTIONALS FOR THIS IP
C       ATOP - POINTS TO THE TOP ENTRY IN THE ACTUAL DIRECTIONAL LIST
C       DIR - STACK USED TO ALLOW THE PROGRAM TO BACKUP IN ITS TRACING
C               OF CONTOURS WHEN ITS FORWARD PATH IS BLOCKED
C       DTOP - POINTS TO THE TOP OF THE DIRECTION STACK
C     XLAST - THE X COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C     YLAST - THE Y COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C       IPX - THE X COORDINATE OF THE CURRENT INITAL POINT (IP)
C       IPY - THE Y COORDINATE OF THE CURRENT IP
C       IPMEAN - THE MEAN OF THE CURRENT IP
C       IPSSQ - THE SUM OF THE SQUARES OF THE PIXEL GROUP IN THE IP
C       IPCNT - RUNNING SUM OF THE NUMBER OF IPS
C       EXT - BOOLEAN FLAG TO INDICATE INTERNAL OR EXTERNAL CONTOUR
C                TRUE = EXTERNAL
C                FALSE = INTERNAL
C       STATUS - ARRAY HOLDING THE STATUS FLAGS FOR EACH
C                 PIXEL GROUP.
C       BLOBM - HAS THE MEAN OF THE CURRENT BLOB GROUP
C       BLOBN - HAS THE NUMBER OF PIXELS IN THE CURRENT BLOB
C         VMEM - VIRTUAL MEMORY OF OUR PICTURE;
C                IT HOLDS FOUR SUBPICTURES.
C          TOPCPL - TOP OF THE COMPARISON POINTER LIST
C         XCPL - X COORDINATE OF THE PIXEL GROUPS IN THE CPL
C         YCPL - Y COORDINATE OF THE PIXEL GROUPS IN THE CPL
C       N - THE HORIZONTAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C       M - THE VERTICAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C                  (M AND N MUST BE MULTIPLES OF 2.)
C     MAXMN = (MAX(M,N))/2
C       PIXEL GROUP - IS A GROUP OF FOUR PIXEL ELEMENTS,
C                     WHOSE COORDINATES ARE GIVEN BELOW.
C                     (J,K) , (J,K+1) , (J+1,K) , (J+1,K+1)
C                     THIS DEFINES ONE PIXEL GROUP WHERE J IS DEFINED
C                     BY    J=1,3,5,,,,,N-1 WHERE N IS THE
C                     HORIZONTAL SIZE OF THE PICTURE
C                     AND   K=1,3,5,,,,,M-1 WHERE M IS THE VERTICAL
C                     SIZE OF THE PICTURE
C       DONE - BOOLEAN FLAG USED TO TELL CONTOUR THERE ARE NO MORE IPS
C       IPDONE - BOOLEAN FLAG RETURNED BY GETPIX TO SAY IT'S DONE WITH
C                 THE PRESENT CONTOUR
C       X - THE X COORDINATE OF THE CURRENT PIXEL GROUP
C       Y - THE Y COORDINATE OF THE CURRENT PIXEL GROUP
C       MEAN - REAL FUNCTION TO COMPUTE THE MEAN OF 1 PIXEL GROUP
C       MEANS - ARRAY HOLDING THE MEANS OF PRINCIPLE COMPONENTS
C               FOR THE PRESENT IP
C       TDCNT - RUNNING COUNT OF TOTAL NUMBER OF DIRECTIONALS
C               IN THIS PICTURE
C       IN - ARRAY HOLDING COUNT OF NUMBER OF INTERNAL CONTOURS OF SIZE
C               1 , 2 , 3  PIXEL GROUPS
C       EX  - SAME AS IN BUT FOR EXTERNAL CONTOURS
C
C **********************************************************************
C
      REAL IPMEAN(TCHA),IPSSQ(TCHA)
      REAL VMEM(VSIZV,VSIZH,4,TCHA)
      REAL MEAN
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER BKSTAT(BLKS), OUT(HAFN)
      INTEGER ATOP,DTOP,ADIR( DSIZ),DIR( DSIZ)
      INTEGER XLAST,YLAST,BLOBN,PGCNT
      INTEGER XCPL(MAXMN),YCPL(MAXMN),TOPCPL
      INTEGER X,Y,TDCNT,CHAN,IN(3),EX(3)
      LOGICAL EXT,DONE,IPDONE
      LOGICAL*1 STATUS(HAFN,HAFM)
      DIMENSION BLOBM (TCHA),MEANS(TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON /LEVELS/ FVAL, TVAL, NCHA
      COMMON // ATOP,DTOP
      COMMON /LAST/ XLAST,YLAST
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
      COMMON/BLOB1/BLOBN
      COMMON/VMEMRY/PGCNT
      COMMON /CPL/ TOPCPL
      COMMON/PIX/N,M,MAXMN,NEXTB
      DATA TDCNT/0/
      DATA IN,EX/6*0/
C
C       INITALIZATION OF VARIABLES
      IPRINT=0
      READ (5,109) FVAL,TVAL
      READ(5,111) NCHA,IPRINT
      IF (NCHA.GT. TCHA) NCHA= TCHA
      WRITE(6,113) NCHA
      WRITE(6,106) FVAL, TVAL
      CALL INITV (0, VMEM, BKSTAT)
      IPCNT = 0
      PGCNT = 0
      ITCNT = 0
C
C     THESE NEXT DO LOOPS ARE REALLY ZEROING OUT STATUS
C     THIS ASSUMES THAT .FALSE. IS REPRESENTED BY A ZERO BYTE
      DO 1 I=1, HAFM
         DO 1 J=1,HAFN
            STATUS(J,I) = .FALSE.
    1 CONTINUE
C
      IPX = 1
      IPY = 1
      GO TO 7
    2 CONTINUE
      CALL NEWIP (DONE,XCPL,YCPL,STATUS,OUT,ADIR,DIR,VMEM,BKSTAT)
      IF( DONE ) GO TO 6
C
C         INITIALIZATION FOR EACH CONTOUR
    7 BLOBN=4
         DO 11 CHAN=1,NCHA
         IPSSQ(CHAN) = SSQ(IPX,IPY,CHAN,VMEM,BKSTAT)
         IPMEAN(CHAN) = MEAN(IPX,IPY,CHAN,VMEM,BKSTAT)
   11    BLOBM(CHAN) = IPMEAN(CHAN)
C
      ATOP = 1
      DTOP=1
      DIR(DTOP)=1
      ADIR(ATOP)=1
      X=IPX
      Y=IPY
      IPCNT=IPCNT+1
      IF( IPY .LT. ITCNT )GO TO 4
      ITCNT = ITCNT + ( VSIZV/ 2 )
      WRITE(6,107) IPY,IPCNT,TDCNT,PGCNT
C
C       GO LOOK FOR ANOTHER PIXEL GROUP
    4 CALL GETPIX (X, Y, IPDONE, ADIR, DIR, BLOBM, IPMEAN, IPSSQ,
     .STATUS, VMEM, BKSTAT, OUT)
      IF( .NOT. IPDONE ) GO TO 4
C
      TDCNT=TDCNT+ATOP
         DO 12 I=1,NCHA
         RMEANS   = BLOBM(I)/FLOAT(BLOBN/4)
   12    MEANS(I) = RMEANS + 0.5
      WRITE(8) IPX,IPY,BLOBN,ATOP,MEANS
      IF(IPRINT.NE.0) WRITE(6,701) IPX,IPY,BLOBN,ATOP,MEANS
      CALL PSTAT (IPX, IPY, ADIR(ATOP), 1, STATUS)
      CALL SET (IPX, IPY, STATUS)
C
C       INCREMENT "IN" OR "EX" IF NECESSARY
      IF( ATOP .GT. 5 )GO TO 10
      IF( EXT )GO TO 9
      IN(ATOP/2+1)=IN(ATOP/2+1)+1
      GO TO 10
    9 EX(ATOP/2+1)=EX(ATOP/2+1)+1
   10 IF( BLOBN .EQ. 4 )GO TO 2
      WRITE(9) ( ADIR(I) , I=1,ATOP )
      IF(IPRINT.NE.0) WRITE(6,702) (ADIR(I),I=1,ATOP)
C
C       SET THE IN CONTOUR BIT FOR CONTOUR JUST COMPLETED
      CALL SICB (ADIR, STATUS)
      GO TO 2
C
    6 TDCNT=TDCNT-IPCNT
      WRITE(6,103) IPCNT,TDCNT
      WRITE(6,104) IN,EX
      RETURN
C
  103 FORMAT(' CONTOURS: NO OF INITIAL POINTS=',I5,//
     #   1X,'TOTAL NO OF DIRECTIONALS=',I9)
  104 FORMAT('0INTERNAL CONTOURS:  IN(1-3)=',3(I5,2X),/
     #   ' EXTERNAL CONTOURS  EX(1-3)=',3(I5,2X))
  105 FORMAT(2I1)
  106 FORMAT('1FLEVEL=',F10.3,'    TLEVEL=',F10.3)
  107 FORMAT('0IPY=',I4,'  IP COUNT=',I5,'  DIR COUNT=',I6,
     #    '  PAGE FAULTS=',I5)
  109 FORMAT(2F10.3)
  111 FORMAT(I2,I1)
  113 FORMAT(5X,'CHANNELS USED =',I3)
  701 FORMAT(8(1X,I4))
  702 FORMAT(20(1X,I4))
      END
C
      LOGICAL FUNCTION COMPAR (X, Y, ADIR, DIR, BLOBM, IPMEAN, IPSSQ,
     C STATUS, VMEM, BKSTAT)
C
C     THIS FUNCTION COMPARES TWO PIXEL GROUPS TO DETERMINE
C     IF THEY BELONG TO THE SAME CONTOUR, UPDATING
C     STATUS FLAGS AS NECESSARY.
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C
C     XLAST - THE X COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C     YLAST - THE Y COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C
C       ADIR - A LIST OF ALL THE DIRECTIONALS FOR THIS IP
C       ATOP - POINTS TO THE TOP ENTRY IN THE ACTUAL DIRECTIONAL LIST
C       DIR - STACK USED TO ALLOW THE PROGRAM TO BACKUP IN ITS TRACING
C               OF CONTOURS WHEN ITS FORWARD PATH IS BLOCKED
C       DTOP - POINTS TO THE TOP OF THE DIRECTION STACK
C
C
C       BLOBM - HAS THE MEAN OF THE CURRENT BLOB GROUP
C       BLOBN - HAS THE NUMBER OF PIXELS IN THE CURRENT BLOB
C
C
C       IPX - THE X COORDINATE OF THE CURRENT INITAL POINT (IP)
C       IPY - THE Y COORDINATE OF THE CURRENT IP
C       IPMEAN - THE MEAN OF THE CURRENT IP
C       IPSSQ - THE SUM OF THE SQUARES OF THE PIXEL GROUP IN THE IP
C       IPCNT - RUNNING SUM OF THE NUMBER OF IPS
C       EXT - BOOLEAN FLAG TO INDICATE INTERNAL OR EXTERNAL CONTOUR
C                TRUE = EXTERNAL
C                FALSE = INTERNAL
C
C       FVAL - THE CURRENT F-TEST VALUE
C       TVAL - THE CURRENT T-TEST VALUE
C
C **********************************************************************
C
      REAL MEAN
      REAL IPMEAN(TCHA), IPSSQ(TCHA)
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER XLAST,YLAST
      INTEGER ATOP,DTOP,ADIR( DSIZ),DIR( DSIZ)
      INTEGER BLOBN
      INTEGER CHAN
      INTEGER X,Y,GSTAT
      INTEGER BKSTAT(BLKS)
      LOGICAL EXT
      LOGICAL*1 STATUS(HAFN,HAFM)
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      DIMENSION BLOBM(TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON /LAST/ XLAST,YLAST
      COMMON // ATOP,DTOP
      COMMON/BLOB1/BLOBN
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
      COMMON /LEVELS/ FVAL, TVAL ,NCHA
      COMMON/PIX/N,M,MAXMN,NEXTB
C
      COMPAR=.FALSE.
      IF ( GSTAT(X,Y,STATUS) .GT. 3) RETURN
      DO 1 CHAN=2,NCHA
         XYM = MEAN(X,Y,CHAN,VMEM,BKSTAT)
         F1 = IPSSQ(CHAN) - 4.0 * IPMEAN(CHAN) * IPMEAN(CHAN)
         F2 = SSQ(X,Y,CHAN,VMEM,BKSTAT) - 4.0*XYM*XYM
         IF (F1 .LE. 0.0 .OR. F2 .LE. 0.0) RETURN
         T = (IPMEAN(CHAN) - XYM) * SQRT(12.0/(F1+F2))
C
C       PERFORM THE T-TEST ON THE TWO GROUPS
         IF(ABS(T) .GE. TVAL) RETURN
C
C       PERFORM THE F-TEST ON THE TWO GROUPS
         F = F1/F2
         IF (F .GE. FVAL .OR. 1.0/F .GE. FVAL) RETURN
    1 CONTINUE
    5 COMPAR=.TRUE.
      IF(GSTAT(X,Y,STATUS) .NE.0) GO TO 6
      BLOBN=BLOBN+4
      DO 2 CHAN=2, TCHA
         BLOBM(CHAN) = BLOBM(CHAN) + MEAN(X,Y,CHAN,VMEM,BKSTAT)
    2 CONTINUE
C
C     UPDATE THE STATUS OF THE PRESENT GROUP BEFORE WE GO TO THE NEXT
    6 IF( XLAST .NE. X )GO TO 20
      IF( YLAST .GT. Y )GO TO 10
      CALL PSTAT(XLAST,YLAST,ADIR(ATOP),2,STATUS)
      RETURN
C
   10 CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 4, STATUS)
      RETURN
C
   20 IF( XLAST .GT. X )GO TO 30
      CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 1, STATUS)
      RETURN
C
   30 CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 3, STATUS)
      RETURN
      END
C
      SUBROUTINE ERR (ERRNUM, ADIR, DIR, STATUS, OUT)
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C       ADIR - A LIST OF ALL THE DIRECTIONALS FOR THIS IP
C       ATOP - POINTS TO THE TOP ENTRY IN THE ACTUAL DIRECTIONAL LIST
C       DIR - STACK USED TO ALLOW THE PROGRAM TO BACKUP IN ITS TRACING
C               OF CONTOURS WHEN ITS FORWARD PATH IS BLOCKED
C       DTOP - POINTS TO THE TOP OF THE DIRECTION STACK
C       STATUS - ARRAY HOLDING THE STATUS FLAGS FOR EACH
C                PIXEL GROUP. EACH STATUS FLAG IS 3 BITS LONG
C                AND THERE ARE (NROW X NCOL)/4 OF THEM FOR A
C                NROW X NCOL PICTURE.  THEY ARE MANIPULATED
C                WITH A COMPASS SUBROUTINE CALLED GSTAT.
C       N - THE HORIZONTAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C       M - THE VERTICAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C                  (M AND N MUST BE MULTIPLES OF 2.)
C
C **********************************************************************
C
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER ATOP,DTOP,ADIR( DSIZ),DIR( DSIZ)
      INTEGER ERRNUM, X, Y, OUT(HAFN), STA(9)
      LOGICAL*1 STATUS(HAFN,HAFM)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON // ATOP,DTOP
      COMMON/PIX/N,M,MAXMN,NEXTB
      DATA STA/1HN,1HA,1HD,1HT,1HE,1HA,1HD,1HT,1H*/
C
      IF( ERRNUM .LT. 1 .OR. ERRNUM .GT. 10 )GO TO 50
C
      GO TO(1,2,3,4,5,6,7,8,9,10),ERRNUM
1     WRITE (6,100) MAXMN
      STOP
2     WRITE(6,101)
      INDX = 0
      DO 41 Y=1, HAFM
         DO 40 X=1,HAFN
            INDX = STATUS(X,Y)
            IF (INDX .GE. 0 .AND. INDX .LE. 7) GO TO 40
            INDX = 8
            OUT(X) = STA(INDX+1)
   40    CONTINUE
         WRITE(6,600) Y,OUT
   41 CONTINUE
      STOP
3     WRITE(6,102)
      STOP
4     WRITE(6,103)
      STOP
5     WRITE(6,104)
      STOP
6     WRITE(6,105)
      STOP
7     WRITE(6,106)
      STOP
8     WRITE(6,107)
      STOP
9     WRITE(6,108)
      STOP
10    WRITE(6,109)
      STOP
C
50    WRITE(6,51)
      STOP 0
C
C **********************************************************************
C
      ENTRY ERRMSG ( X,Y )
C
      WRITE(6,110) X, Y
C
C     ERRTRA IS IBM'S SUBROUTINE TRACEBACK ROUTINE
      CALL ERRTRA
      STOP
C
51    FORMAT('0ERROR NUMBER PASSED TO ERR IS LESS THAN 0 OR GREATER THAN
     . 10')
100   FORMAT('0TOPCPL GREATER THAN ',I3)
101   FORMAT('0TOPCPL LESS THAN ZERO',//)
102   FORMAT('0EOF OR NO INPUT DATA')
103   FORMAT('0DIR LIST OVERFLOW')
104   FORMAT('0POINTER TO TOP OF DIRECTIONAL LIST HAS GONE NEGATIVE')
105   FORMAT('0CONFLICT OF DIRECTIONS ON DIRECTION LIST')
106   FORMAT('0DIRECTIONAL LIST OVERFLOW')
107   FORMAT('0ATOP GREATER THAN DCNT')
108   FORMAT('0EOF DETECTED ON THE DIR FILE')
109   FORMAT('0   X AND/OR Y > &PDIM AND/OR X AND/OR Y < 0')
110   FORMAT(' ERROR IN PIXEL X=',I4,'  Y=',I4)
600   FORMAT(' ROW',I4,2X,100I1)
      END
C
      SUBROUTINE GETPIX (X, Y, IPDONE, ADIR, DIR, BLOBM, IPMEAN, IPSSQ,
     C STATUS, VMEM, BKSTAT, OUT)
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C
C   THIS SUBROUTINE LOOKS FOR PIXEL GROUPS TO ADD TO THE
C   CONTOUR. THE STATEMENT NUMBER GROUPS (X00,X25,X50,X75 WHERE X IS 1,
C     2,3, OR 4) REPRESENT THE DIFFERENT DIRECTION OF ENTERING
C   PIXEL GROUP. THE ARRAY 'ADIR' SERVES AS A LIST OF THESE DIRECTIONS
C   THAT WERE TAKEN TO TRACE OUT THE CONTOUR. THE ARRAY 'DIR' IS A
C   STRING THAT IS LET OUT AS THE CONTOUR IS TRACED OUT SO THAT IF WE
C   HAVE TO BACKUP WE CAN FIND OUR WAY BACK. THE FUNCTION COMPAR IS USED
C   TO COMPARE THE BLOB PIXEL GROUP (PRESENTLY THIS INCLUDES ONLY THE IP
C     PIXEL GROUP BUT COULD BE MADE TO INCLUDE ALL GROUPS THAT
C   CAN BE ADDED TO THE BLOB GROUP.
C
C            (X,Y) ARE COORDINATE PAIRS.
C       X - ON ENTRY CONTAINS PIXEL GROUP TO START LOOKING FROM
C                ON EXIT IT CONTAINS NEXT GROUP TO ADD TO THE BLOB
C                IF ONE EXISTS.
C       Y - SAME AS X BUT Y COORDINATE
C       IPDONE - FLAG TO TELL MAIN PROGRAM WE ARE DONE WITH THIS CONTOUR
C       IPX - THE X COORDINATE OF THE CURRENT INITAL POINT (IP)
C       IPY - THE Y COORDINATE OF THE CURRENT IP
C       IPMEAN - THE MEAN OF THE CURRENT IP
C       IPSSQ - THE SUM OF THE SQUARES OF THE PIXEL GROUP IN THE IP
C       IPCNT - RUNNING SUM OF THE NUMBER OF IPS
C       EXT - BOOLEAN FLAG TO INDICATE INTERNAL OR EXTERNAL CONTOUR
C                TRUE = EXTERNAL
C                FALSE = INTERNAL
C     XLAST - THE X COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C     YLAST - THE Y COORDINATE OF THE PIXEL GROUP AT THE FRONT OF
C             OUR CURRENT CONTOUR.  (USUALLY THE LAST GROUP FOUND BY
C             GETPIX , EXCEPT IF WE HAD TO BACK UP )
C       BLOBM - HAS THE MEAN OF THE CURRENT BLOB GROUP
C       BLOBN - HAS THE NUMBER OF PIXELS IN THE CURRENT BLOB
C       ADIR - A LIST OF ALL THE DIRECTIONALS FOR THIS IP
C       ATOP - POINTS TO THE TOP ENTRY IN THE ACTUAL DIRECTIONAL LIST
C       DIR - STACK USED TO ALLOW THE PROGRAM TO BACKUP IN ITS TRACING
C               OF CONTOURS WHEN ITS FORWARD PATH IS BLOCKED
C       DTOP - POINTS TO THE TOP OF THE DIRECTION STACK
C       N - THE HORIZONTAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C       M - THE VERTICAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C                  (M AND N MUST BE MULTIPLES OF 2.)
C
C **********************************************************************
C
      REAL IPMEAN(TCHA), IPSSQ(TCHA)
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL
      INTEGER XLAST,YLAST
      INTEGER BLOBN
      INTEGER BKSTAT(BLKS), OUT(HAFN)
      INTEGER ATOP,DTOP,ADIR( DSIZ),DIR( DSIZ)
      INTEGER X,Y
      LOGICAL EXT
      LOGICAL COMPAR,IPDONE
      LOGICAL*1 STATUS(HAFN,HAFM)
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      DIMENSION BLOBM(TCHA)
      COMMON/DIM/NCOL,NROW,HAFN,HAFM,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
      COMMON /LAST/ XLAST,YLAST
      COMMON/BLOB1/BLOBN
      COMMON // ATOP,DTOP
      COMMON/PIX/N,M,MAXMN,NEXTB
C
1     XLAST=X
      YLAST=Y
      LDIR=ADIR(ATOP)
      GO TO(100,200,300,400),LDIR
C
C       LOOK ON THE LEFT SIDE FOR NEXT PIXEL GROUP
  100 IF( YLAST .LE. IPY )GO TO 125
      Y=YLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
C       LOOK AHEAD FOR THE NEXT PIXEL GROUP
  125 IF( XLAST .GE. N-1 )GO TO 150
      X=XLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      X=XLAST
C
C       LOOK TO THE RIGHT SIDE FOR THE NEXT PIXEL GROUP
  150 IF( YLAST .GE. M-1 )GO TO 175
      Y=YLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
C      THE IF TEST CATCHES CONTOURS MADE UP OF ONLY AN IP
C       HAVE TO BACKUP CAN'T FIND A PIXEL GROUP THAT WILL
C       PASS THE F-TEST AND T-TEST
  175 IF( ATOP .EQ. 1 )GO TO 510
      CALL PSTAT(XLAST,YLAST,ADIR(ATOP),3,STATUS)
      DTOP=DTOP-1
      IF(DTOP.LT.0) CALL ERR(5,ADIR,DIR,STATUS,OUT)
      XLAST=XLAST-2
      ATOP=ATOP+1
      IF(ATOP .GE. DSIZ) CALL ERR(7,ADIR,DIR,STATUS,OUT)
      ADIR(ATOP)=3
      X=XLAST
      IF( DTOP .EQ. 1 )GO TO 510
      LDIR=DIR(DTOP)
      GO TO(150,225,600,475),LDIR
C
  200 IF( XLAST .GE. N-1 )GO TO 225
      X=XLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      X=XLAST
C
  225 IF( YLAST .GE. M-1 )GO TO 250
      Y=YLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
  250 IF( XLAST .LE. 2 ) GO TO 275
      X=XLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      X=XLAST
C
  275 CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 4, STATUS)
      DTOP=DTOP-1
      IF(DTOP.LT.0) CALL ERR(5,ADIR,DIR,STATUS,OUT)
      YLAST=YLAST-2
      ATOP=ATOP+1
      IF(ATOP .GE. DSIZ) CALL ERR(7,ADIR,DIR,STATUS,OUT)
      ADIR(ATOP)=4
      Y=YLAST
      IF( DTOP .EQ. 1 ) GO TO 510
      LDIR=DIR(DTOP)
      GO TO(175,250,325,600),LDIR
C
  300 IF( YLAST .GE. M-1 ) GO TO 325
      Y=YLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
  325 IF( XLAST .LE. 2 )GO TO 350
      X=XLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      X=XLAST
C
  350 IF( YLAST .LE. IPY )GO TO 375
      Y=YLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
  375 CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 1, STATUS)
      DTOP=DTOP-1
      IF(DTOP.LT.0) CALL ERR(5,ADIR,DIR,STATUS,OUT)
      XLAST=XLAST+2
      ATOP=ATOP+1
      IF(ATOP .GE. DSIZ) CALL ERR(7,ADIR,DIR,STATUS,OUT)
      ADIR(ATOP)=1
      X=XLAST
      IF( DTOP .EQ. 1 )GO TO 510
      LDIR=DIR(DTOP)
      GO TO(600,275,350,425),LDIR
C
  400 IF( XLAST .LE. 2 )GO TO 425
      X=XLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      X=XLAST
C
  425 IF( YLAST .LE. IPY )GO TO 450
      Y=YLAST-2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C  GO TO 500
      Y=YLAST
C
  450 IF( XLAST .GE. N-1 )GO TO 475
      X=XLAST+2
      IF ( COMPAR(X,Y,ADIR,DIR,BLOBM,IPMEAN,IPSSQ,STATUS,VMEM,BKSTAT)  )
     C   GO TO 500
      X=XLAST
C
  475 CALL PSTAT (XLAST, YLAST, ADIR(ATOP), 2, STATUS)
      DTOP=DTOP-1
      IF(DTOP.LT.0) CALL ERR(5,ADIR,DIR,STATUS,OUT)
      YLAST=YLAST+2
      ATOP=ATOP+1
      IF(ATOP .GE. DSIZ) CALL ERR(7,ADIR,DIR,STATUS,OUT)
      ADIR(ATOP)=2
      Y=YLAST
      IF( DTOP .EQ. 1) GO TO 510
      LDIR=DIR(DTOP)
      GO TO(125,600,375,450),LDIR
C
  500 IF( X .NE. IPX )GO TO 520
      IF( Y .NE. IPY )GO TO 520
      IPDONE=.TRUE.
      GO TO 523
  520 IPDONE=.FALSE.
  523 ATOP=ATOP+1
      IF(ATOP .GE. DSIZ) CALL ERR(7,ADIR,DIR,STATUS,OUT)
      DTOP=DTOP+1
C
      IF(DTOP .GT. DSIZ) CALL ERR(4, ADIR, DIR, STATUS, OUT)
C
C  WE NOW PUT THE DIRECTION WE LEAVE LAST GROUP IN "ADIR" AND "DIR"
      IF( X .NE. XLAST )GO TO 530
      IF( Y .GT. YLAST )GO TO525
      ADIR(ATOP)=4
      DIR(DTOP)=4
      RETURN
C
  525 DIR(DTOP)=2
      ADIR(ATOP)=2
      RETURN
C
  530 IF( X .GT. XLAST )GO TO 540
      DIR(DTOP)=3
      ADIR(ATOP)=3
      RETURN
C
  540 DIR(DTOP)=1
      ADIR(ATOP)=1
      RETURN
C
C       THIS ERR IS AN IMPOSSIBLE CONDITION AND SHOULD NEVER HAPPEN
  600 CALL ERR(6)
C
C       WE HAVE BACKED UP TO THE IP AND MUST
C       TELL MAIN PROGRAM WE ARE DONE WITH THIS CONTOUR
  510 IPDONE=.TRUE.
      RETURN
      END
C
      INTEGER FUNCTION GSTAT (X, Y, STATUS)
C     ENTRY POINTS GSTAT, PSTAT, SET
C
C              LISTED BELOW ARE ALL POSSIBLE STATUS VALUES
C       N - MEANS NOT ON ANY CONTOUR BOUNDARY (NOT TO BE CONFUSED WITH
C               THE "N" IN COMMON BLOCK /PIX/ )
C       A - MEANS START OF A CONTOUR WHEN SCANNING LEFT TO RIGHT
C       D - MEANS END OF CONTOUR WHEN SCANNING FROM LEFT TO RIGHT
C       T - MEANS IT'S IN THE MIDDLE SOMEWHERE
C
C             NOT IN CONTOUR      IN CONTOUR
C                 N = 0
C                 A = 1             A = 5
C                 D = 2             D = 6
C                 T = 3             T = 7
C                ( NOTE N=4 IS AN IMPOSSIBLE CONDITION )
C              THE STATUS IS CALCULATED BY FINDING THE PRESENT STATUS
C              IN THE PRESENT PASS TABLE. THEN USING THIS VALUE IN
C              THE NEW STATUS TABLE ALONG WITH THE PAST STATUS VALUE.
C
C                PRESENT PASS STATUS TABLE
C
C                               DIRECTION OUT OF
C                               THE PIXEL GROUP
C                               *  UP   * DOWN  *
C                               *  OR   *  OR   *
C                               * RIGHT * LEFT  *
C                         ***********************
C                          UP   *       *       *
C              DIRECTION   OR   *   A   *   T   *
C                INTO     LEFT  *       *       *
C                THE      ***********************
C               PIXEL     DOWN  *       *       *
C               GROUP      OR   *   T   *   D   *
C                         RIGHT *       *       *
C                         ***********************
C
C                           NEW STATUS TABLE
C
C                           PRESENT PASS STATUS
C                        *       *       *       *
C                        *   A   *   D   *   T   *
C                 ********************************
C                        *       *       *       *
C                    N   *   A   *   D   *   T   *
C                 ********************************
C     PREVIOUS           *       *       *       *
C                    A   *   A   *   T   *   A   *
C       PASS      ********************************
C                        *       *       *       *
C      STATUS        D   *   T   *   D   *   D   *
C                 ********************************
C                        *       *       *       *
C                    T   *   A   *   D   *   T   *
C                 ********************************
C **********************************************************************
C
      IMPLICIT INTEGER*4 (A-Z)
      INTEGER*4 PRESTA(4,4), NEWSTA(4,3)
      LOGICAL*1 STATUS(HAFN,HAFM)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
C
      DATA PRESTA/ 3, 3, 1, 1, 2, 2, 3, 3, 2, 2, 3, 3, 3, 3, 1, 1/
      DATA NEWSTA/ 1, 1, 3, 1, 2, 3, 2, 2, 3, 1, 2, 3/
      DATA CBIT /4/
C
C-----------------------------------------------------------------------
C
C     ENTRY GSTAT GETS THE CURRENT  STATUS OF THE PIXEL GROUP
C     LOCATION (X,Y) WHERE X IS THE COLUMN NUMBER AND
C     Y IS THE ROW NUMBER OF THE DESIRED LOCATION.
C
      GSTAT = STATUS(X/2+1,Y/2+1)
      RETURN
C
C-----------------------------------------------------------------------
C
      ENTRY PSTAT (X, Y, IN, OUT, STATUS)
C
C     ENTRY PSTAT STORES THE NEW STATUS OF PIXEL GROUP
C     LOCATED AT (X,Y)
C
      IGSTAT = STATUS(X/2+1,Y/2+1)
      PSTAT = PRESTA( IN,OUT )
      IGSTAT = NEWSTA( IGSTAT+1,PSTAT )
      STATUS (X/2+1,Y/2+1) = IGSTAT
      RETURN
C
C-----------------------------------------------------------------------
C
      ENTRY SET (X, Y, STATUS)
C
C     ENTRY SET SETS THE INCONTOUR BIT ON FOR PIXEL GROUP (X,Y)
C
      BITCHK = STATUS(X/2+1,Y/2+1)
      LGRSLT=LOR(CBIT,BITCHK)
      STATUS(X/2+1,Y/2+1) = LGRSLT
      SET = 0
      RETURN
      END
C
      LOGICAL FUNCTION IPCPAR (X, Y, XCPL, YCPL, VMEM, BKSTAT)
C
C       THIS FUNCTION COMPARES TWO PIXEL GROUPS TOGETHER TO SEE IF
C       THEY ARE STATISTICALLY DIFFERENT ENOUGH FOR (X, Y) TO BE
C       A NEW IP.
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C     MODIFIED BY JULIA M. HODGES, DECEMBER 1977
C
C         TOPCPL - TOP OF THE COMPARSON POINTER LIST
C         XCPL - X COORDINATE OF THE PIXEL GROUPS IN THE CPL
C         XCPL - Y COORDINATE OF THE PIXEL GROUPS IN THE CPL
C       FVAL - THE CURRENT F-TEST VALUE
C       TVAL - THE CURRENT T-TEST VALUE
C
C **********************************************************************
C
      REAL MEAN
      INTEGER XCPL(MAXMN),YCPL(MAXMN),TOPCPL
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL
      INTEGER X,Y,GSTAT, CHAN
      INTEGER BKSTAT(BLKS)
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON/CPL/TOPCPL
      COMMON /LEVELS/ FVAL,TVAL,NCHA
C
      IPCPAR=.FALSE.
C
      DO 1 CHAN=1,NCHA
         XYM = MEAN(X,Y,CHAN,VMEM,BKSTAT)
         XLYLM = MEAN(XCPL(TOPCPL),YCPL(TOPCPL),CHAN,VMEM,BKSTAT)
         F1 = SSQ(XCPL(TOPCPL),YCPL(TOPCPL),CHAN,VMEM,BKSTAT)
     #         - 4.0*XLYLM*XLYLM
         F2 = SSQ(X,Y,CHAN,VMEM,BKSTAT) - 4.0*XYM*XYM
         IF (F1 .LE.0.0 .OR. F2 .LE. 0.0) RETURN
         T = (XLYLM - XYM) * SQRT(12.0/(F1+F2))
         IF (ABS(T) .GE. TVAL) RETURN
         F = F1/F2
         IF (F .GE. FVAL .OR. 1.0/F .GE.FVAL) RETURN
    1 CONTINUE
C
      IPCPAR=.TRUE.
      RETURN
      END
C
      REAL FUNCTION MEAN (X, Y, CHAN, VMEM, BKSTAT)
C
C       THIS SUBROUTINE COMPUTES THE MEAN OF A PIXEL GROUP
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C **********************************************************************
C
      INTEGER BKSTAT(BLKS)
      INTEGER X,Y,CHAN
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
C
C
      MEAN = ( PIXEL(X,Y,CHAN,VMEM,BKSTAT) +
     C        PIXEL(X+1,Y,CHAN,VMEM,BKSTAT)  +
     C        PIXEL(X,Y+1,CHAN,VMEM,BKSTAT)  +
     C        PIXEL (X+1,Y+1,CHAN,VMEM,BKSTAT)  ) / 4.0
C
      RETURN
      END
C
      SUBROUTINE NEWIP(DONE,XCPL,YCPL,STATUS,OUT,ADIR,DIR,VMEM,BKSTAT)
C
C     THIS SUBROUTINE LOCATES THE INITIAL POINT FOR
C     A NEW CONTOUR.
C
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C     MODIFIED BY JULIA M. HODGES, DECEMBER 1977
C
C            TOPCPL - TOP OF THE COMPARISON POINTER LIST
C         XCPL - X COORDINATE OF THE PIXEL GROUPS IN THE CPL
C         XCPL - Y COORDINATE OF THE PIXEL GROUPS IN THE CPL
C       N - THE HORIZONTAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C       M - THE VERTICAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C                    (M AND N MUST BE MULTIPLES OF 2)
C       MAXMN - MAXIMUM OF M AND N
C       IPX - THE X COORDINATE OF THE CURRENT INITAL POINT (IP)
C       IPY - THE Y COORDINATE OF THE CURRENT IP
C       IPMEAN - THE MEAN OF THE CURRENT IP
C       IPSSQ - THE SUM OF THE SQUARES OF THE PIXEL GROUP IN THE IP
C       IPCNT - RUNNING SUM OF THE NUMBER OF IPS
C       EXT - BOOLEAN FLAG TO INDICATE INTERNAL OR EXTERNAL CONTOUR
C                TRUE = EXTERNAL
C                FALSE = INTERNAL
C       DONE - SEE DESCRIPTION IN MAIN ROUTINE
C       TOPCPL - POINTS TO TOP OF THE CPL LISTS
C
C **********************************************************************
C
      INTEGER ADIR(DSIZ), DIR(DSIZ)
      INTEGER BKSTAT(BLKS), OUT(HAFN)
      INTEGER XCPL(MAXMN),YCPL(MAXMN),TOPCPL
      INTEGER Y,X
      INTEGER START,STAT,GSTAT
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL
      LOGICAL EXT,DONE,IPCPAR
      LOGICAL*1 STATUS(HAFN,HAFM)
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON/CPL/TOPCPL
      COMMON/DIM/NCOL,NROW,HAFN,HAFM,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
C
      EXT=.FALSE.
      IF( IPX .EQ. N-1 )GO TO 8
      TOPCPL=0
      Y=IPY
C
C       BUILD UP THE CPL TO THE LAST IP
      DO 3 X=1,IPX,2
         STAT = LAND(GSTAT(X,Y,STATUS),3) + 1
         GO TO (3,1,2,3), STAT
C
C        ADD COORDINATES TO CPL LIST
    1    TOPCPL = TOPCPL +1
         IF (TOPCPL .GT. MAXMN) CALL ERR(1,ADIR,DIR,STATUS,OUT)
         XCPL(TOPCPL) = X
         YCPL(TOPCPL) = Y
         GO TO 3
C
C        DELETE LAST COORDINATES FROM CPL
    2    TOPCPL = TOPCPL - 1
         IF (TOPCPL .LT. 0) CALL ERR(2,ADIR,DIR,STATUS,OUT)
    3 CONTINUE
C
C     NOW REAL SEARCH FOR A NEW IP STARTS
      START=IPX+2
      DO 7 X=START,N,2
         STAT = LAND(GSTAT(X,Y,STATUS),3) + 1
         GO TO (6,4,5,7), STAT
C
C        ADD COORDINATES TO CPL
    4    TOPCPL = TOPCPL + 1
         IF (TOPCPL .GT. MAXMN) CALL ERR(1,ADIR,DIR,STATUS,OUT)
         YCPL(TOPCPL) = Y
         XCPL(TOPCPL) = X
         GO TO 7
C
C        DELETE LAST COORDINATES FROM CPL
    5    TOPCPL = TOPCPL - 1
         IF (TOPCPL .LT. 0) CALL ERR(2,ADIR,DIR,STATUS,OUT)
         GO TO 7
C
C        TEST FOR NEW IP
    6    IF (TOPCPL .EQ. 0) GO TO 15
         IF (.NOT. IPCPAR(X,Y,XCPL,YCPL,VMEM,BKSTAT)) GO TO 14
    7 CONTINUE
C
    8 IF( IPY .GE. M-1 )GO TO 13
      START=IPY + 2
      DO 12 Y=START,N,2
         TOPCPL = 0
         DO 12 X=1,N,2
            STAT = LAND(GSTAT(X,Y,STATUS),3) + 1
            GO TO (9,10,11,12), STAT
C
C           CHECK FOR NEW IP
    9       IF (TOPCPL .EQ. 0) GO TO 15
            IF (.NOT. IPCPAR(X,Y,XCPL,YCPL,VMEM,BKSTAT)) GO TO 14
            GO TO 12
C
C           ADD COORDINATES TO TOP OF CPL
   10       TOPCPL = TOPCPL + 1
            IF (TOPCPL .GT. MAXMN) CALL ERR(1,ADIR,DIR,STATUS,OUT)
            YCPL(TOPCPL) = Y
            XCPL(TOPCPL) = X
            GO TO 12
C
C           DELETE LAST COORDINATES FROM CPL
   11       TOPCPL = TOPCPL - 1
            IF (TOPCPL .LT. 0) CALL ERR(2,ADIR,DIR,STATUS,OUT)
   12 CONTINUE
C
   13 DONE=.TRUE.
      RETURN
   15 EXT=.TRUE.
   14 DONE=.FALSE.
C
C       SETS IPX AND IPY TO COORDINATES OF NEW IP
      IPX=X
      IPY=Y
      RETURN
      END
C
      REAL FUNCTION PIXEL (X, Y, CHANUM, VMEM, BKSTAT)
C
C     THIS FUNCTION MAKES THE PICTURE LOOK LIKE THE WHOLE
C     THING IN MEMORY AT THE SAME TIME TO THE REST OF THE
C     PROGRAM.  THIS IS ACCOMPLISHED BY KEEPING FOUR SEGMENTS FROM
C     EACH CHANNEL IN ARRAY VMEM.
C
C     JAMES J. BESEMER        18 JULY 1974
C     MODIFIED BY PETER C. MILLER    OCT. 23, 1074
C     MODIFIED BY PETER C. MILLER    MAR. 20, 1976
C
C     BKSTAT - ARRAY OF FLAGS USED TO TELL WHICH SEGMENTS OF
C              PICTURE FILE IS CURRENTLY IN CORE. IS ZERO IF NOT
C              IN CORE, ELSE IT POINTS TO ITS LOCATION IN VMEM.
C     MEM - ARRAY POINTING TO BLOCK IN WHICH HAS SEGMENT WE NEED
C     X - X COORDINATE OF THE DESIRED PIXEL
C     Y - Y COORDINATE OF THE DESIRED PIXEL
C     CHANUM - CHANNEL NUMBER OF THE DESIRED PIXEL
C     BLK   HOLDS THE RECORD NUMBER OF THE RECORD BEING LOADED FROM
C           RANDOM FILE.
C     VMEM - VIRTUAL MEMORY FOR OUR PICTURE
C       N - THE HORIZONTAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C       M - THE VERTICAL DIMENSION OF THE PICTURE MATRIX IN PIXELS
C                  (M AND N MUST BE MULTIPLES OF 2.)
C     MAXMN = (MAX(M,N))/2
C       PIXEL GROUP - IS A GROUP OF FOUR PIXEL ELEMENTS,
C                     WHOSE COORDINATES ARE GIVEN BELOW.
C                     (J,K) , (J,K+1) , (J+1,K) , (J+1,K+1)
C                     THIS DEFINES ONE PIXEL GROUP WHERE J IS DEFINED
C                     BY    J=1,3,5,,,,,N-1 WHERE N IS THE HORIZONTAL
C                     SIZE OF THE PICTURE
C                     AND   K=1,3,5,,,,,M-1 WHERE M IS THE VERTICAL
C                     SIZE OF THE PICTURE
C
C **********************************************************************
C
      REAL INITV
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER X,Y,CHANUM,BKSTAT(BLKS),CHAN,MEM(4),BLK
      INTEGER PGCNT
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON/VMEMRY/PGCNT
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
C
C     SEE IF X AND Y ARE LEGAL VALUES
      IF( X .LT. 0 .OR. X .GT. N )CALL ERRMSG( X,Y )
      IF( Y .LT. 0 .OR. Y .GT. M )CALL ERRMSG( X,Y )
C
C     CHECK TO SEE CHANUM IS A LEGAL VALUE
      IF( CHANUM .LT. 0 .OR. CHANUM .GT.  TCHA )STOP 11
C
C     CALCULATE REQUIRED BLOCK
      IB = ((Y-1)/VSIZV)*VDIMH + ((X-1)/VSIZH) + 1
      KX = MOD( X-1, VSIZH) + 1
      KY = MOD( Y-1, VSIZV) + 1
C
C     SEE IF BLOCK IS IN CORE
      IF( BKSTAT( IB ) .NE. 0 )GO TO 2
C
C     IT WASN'T SO GET IT
      NEXTB = NEXTB + 1
      IF( NEXTB .GT. 3 )NEXTB = 0
      NEXT = NEXTB + 1
      BKSTAT( MEM(NEXT) ) = 0
      BKSTAT( IB ) = NEXT
      MEM( NEXT ) = IB
C
C     READ IN NEEDED SEGMENT OF PICTURE FOR ALL CHANNELS
      DO 4 CHAN=1, TCHA
         BLK = (CHAN - 1) * (BLKS - 1) + IB
         READ(VFIL'BLK) ((VMEM(I,J,NEXT,CHAN),I=1,VSIZV),J=1,VSIZH)
    4 CONTINUE
C
C     INCREMENT THE PAGE FAULT COUNT
      PGCNT = PGCNT + 1
    2 PIXEL = VMEM(KY,KX,BKSTAT(IB),CHANUM)
      RETURN
C
C-----------------------------------------------------------------------
C
      ENTRY INITV (X, VMEM, BKSTAT)
C
C     INITALIZE VIRTUAL SYSTEM
C
      DO 20 I=1, BLKS
         BKSTAT(I) = 0
   20 CONTINUE
C
      DO 21 I=1,4
         MEM(I) = BLKS
   21 CONTINUE
      NEXTB = 0
C
C     THIS IS JUST TO AVOID A DIAGNOSTIC
      INITV = 0
      RETURN
      END
C
      SUBROUTINE SICB (ADIR, STATUS)
C
C     SICB - SET IN CONTOUR BIT
C     WHICH IS THE HIGH ORDER BIT IN EACH THREE-BIT STATUS GROUP.
C     THIS MEANS THAT THIS PIXEL GROUP IS IN THE BOUNDARY OF
C     SOME CONTOUR.
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C
C       ADIR - A LIST OF ALL THE DIRECTIONALS FOR THIS IP
C       ATOP - POINTS TO THE TOP ENTRY IN THE ACTUAL DIRECTIONAL LIST
C       DIR - STACK USED TO ALLOW THE PROGRAM TO BACKUP IN ITS TRACING
C               OF CONTOURS WHEN ITS FORWARD PATH IS BLOCKED
C       DTOP - POINTS TO THE TOP OF THE DIRECTION STACK
C       IPX - THE X COORDINATE OF THE CURRENT INITAL POINT (IP)
C       IPY - THE Y COORDINATE OF THE CURRENT IP
C
C **********************************************************************
C
C
      INTEGER X,Y,DIRECT,GSTAT
      INTEGER ATOP,DTOP,ADIR( DSIZ)
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      LOGICAL*1 STATUS(HAFN,HAFM)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON // ATOP,DTOP
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
C
      X=IPX
      Y=IPY
C
      DO 8 DIRECT=2,ATOP
         CALL SET (X,Y,STATUS)
         ITMP = ADIR(DIRECT)
         GO TO (4,5,6,7), ITMP
    4    X = X + 2
         GO TO 8
C
    5    Y = Y + 2
         GO TO 8
C
    6    X = X - 2
         GO TO 8
C
    7    Y = Y - 2
    8 CONTINUE
C
      RETURN
      END
C
      REAL FUNCTION SSQ (X, Y, CHAN, VMEM, BKSTAT)
C
C     THIS SUBROUTINE COMPUTES THE SUM OF THE SQUARES FOR A PIXEL GROUP
C     WRITTEN BY PETER C. MILLER IN THE FALL AND WINTER OF 1974
C
C **********************************************************************
C
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER X,Y,CHAN
      INTEGER BKSTAT(BLKS)
      DIMENSION VMEM (VSIZV,VSIZH,4,TCHA)
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON/PIX/N,M,MAXMN,NEXTB
      COMMON /IPL/ IPX,IPY,IPCNT,EXT
C
      SSQ=0.0
      DO 1 I=1,2
         DO 1 J=1,2
            TEMP = PIXEL(X+J-1, Y+I-1, CHAN, VMEM, BKSTAT)
            SSQ = SSQ + TEMP*TEMP
    1 CONTINUE
C
      RETURN
      END
C
      SUBROUTINE RECON (ADIR,SLINE,TSL,STATUS,PMEANS,BOUND,IPBS,N4)
C
C     THIS PROGRAM IS ONE POSSIBLE WAY OF REBUILDING THE CONTOURED
C     PICTURE, AND THE OUTPUT FROM IT IS EASILY CHANGED.
C
C     WRITTEN BY PETER C. MILLER IN FALL AND WINTER 0F 1974
C     MODIFIED FOR OPERATION UNDER OS/MVT ON IBM 360 AND CONTOUR
C     OUTPUT BY HANS G. MOIK, NASA/GSFC CODE 933 IN SEPTEMBER 1976
C
C     BLOBN - NUMBER OF PIXELS IN THE CURRENT BLOB
C     SLINE - LINE BUFFER FOR RECONSTRUCTED PICTURE
C     M, N - VERTICAL, HORIZONTAL DIMENSIONS OF THE PICTURE MATRIX
C                  (M AND N MUST BE MULTIPLES OF 2.)
C     MAXMN = (MAX(M,N))/2
C     IPX - THE X COORDINATE OF THE CURRENT INITIAL POINT (IP)
C     IPY - THE Y COORDINATE OF THE CURRENT IP
C     IPMEAN - THE MEAN OF THE CURRENT IP
C     IPSSQ - THE SUM OF THE SQUARES OF THE PIXEL GROUP IN THE IP
C     IPCNT - RUNNING SUM OF THE NUMBER OF IPS
C     EXT - BOOLEAN FLAG TO INDICATE INTERNAL OR EXTERNAL CONTOUR
C                TRUE = EXTERNAL
C                FALSE = INTERNAL
C     STATUS - ARRAY HOLDING THE STATUS FLAGS FOR EACH
C                PIXEL GROUP. EACH STATUS FLAG IS 1 BYTE LONG
C                AND IS MANIPULATED BY SUBROUTINE GSTAT.
C     PMEANS - ARRAY WHICH HOLDS THE GRAY LEVEL INFO. FOR EACH THE
C              PICTURE.
C     ATOP - TOP OF DIRECTIONAL LIST
C     ADIR - HOLDS THE DIRECTIONALS FOR ONE IP
C     BOUND - THE BOUNDARIES OF EACH CONTOUR ARE TRACED OUT IN THIS
C              ARRAY. POINTERS ARE LEFT BEHIND POINTING INTO THE PMEAN
C              SO WE CAN INDIRECTLY WRITE THE PICTURE.
C     TIPBS - TOP OF IP BOUNDARY STACK
C     IPCNT - RUNNING COUNT OF THE NUMBER OF IP WE HAVE PROCESSED
C     IPBS - IP BOUNDARY STACK USED TO KEEP TRACK OF WHICH BOUNDARY
C            WE ARE INSIDE OF.
C
C **********************************************************************
C
      REAL PMEANS( MIPS, TCHA)
      INTEGER HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,BLKS,DSIZ,
     C  VDIMH,VDIMV,VFIL,MIPS
      INTEGER ATOP,ADIR(DSIZ)
      INTEGER X, Y, TIPBS, START, IPCNT, STAT, IPBS(MAXMN), GSTAT
      INTEGER CHAN, TAPE, BOUND(HAFN,HAFM), BLOBN, TMP
      LOGICAL*1 TSL(N4), SLINE(TCHA,NCOL), STATUS(HAFN,HAFM)
      LOGICAL EXT
      COMMON/DIM/NCOL,NROW,HAFM,HAFN,TCHA,VSIZH,VSIZV,RSIZ,NREC,BLKS,
     # DSIZ,VDIMH,VDIMV,VFIL,MIPS
      COMMON // ATOP,DTOP
      COMMON/BLOB1/BLOBN
      COMMON/IPL/IPX,IPY,IPCNT,EXT
      COMMON/PIX/N,M,MAXMN,NEXTB
C
      TAPE=10
      DO 300 I=1, HAFN
      DO 300 J=1, TCHA
  300 SLINE(J,I)=0
C
      IPCNT=0
      DO 2 Y=1,HAFM
         DO 2 X=1,HAFN
            STATUS(X,Y) = 0
            BOUND(X,Y) = 0
    2 CONTINUE
C
C     READ THE IP INFORMATION FOR ONE REGION
    3 IPCNT = IPCNT + 1
      IF( IPCNT .GT.  MIPS )GO TO 25
      READ(8,END=16)IPX,IPY,BLOBN,ATOP,(PMEANS(IPCNT,CHAN),CHAN=1,TCHA)
C
C     DO WE HAVE A SINGLE POINT IP?
      IF( BLOBN .NE. 4 )GO TO 4
C
C     YES
      CALL PSTAT(IPX,IPY,1,1,STATUS)
      BOUND(IPY/2+1,IPX/2+1)=IPCNT
      GO TO 3
    4 Y = IPY
      X=IPX
C
C     READ THE DIRECTIONAL INFORMATION FOR ONE REGION
      READ(9,END=21)( ADIR(I) , I=1,ATOP )
      LASTD=1
C
C     TRACE OUT THE CONTOUR
      DO 15 NXTDIR=2,ATOP
      CALL PSTAT(X,Y,LASTD,ADIR(NXTDIR),STATUS)
      BOUND(Y/2+1,X/2+1)=IPCNT
      LASTD=ADIR(NXTDIR)
      GO TO(11,12,13,14),LASTD
   11    X = X + 2
         GO TO 15
   12    Y = Y + 2
         GO TO 15
   13    X = X - 2
         GO TO 15
   14    Y = Y - 2
   15 CONTINUE
C
      CALL PSTAT(IPX,IPY,ADIR(ATOP),1,STATUS)
      IF( X .NE. IPX .OR. Y .NE. IPY)WRITE(6,105) IPCNT
C
C     PROCESS NEXT REGION
      GO TO 3
C
C     GENERATE CONTOUR PICTURE
   16 CONTINUE
      DO 333 Y=1,HAFM
         DO 331 X=1,HAFN
            TMP = BOUND(X,Y)
            IF (TMP .NE. 0) TMP=255
            IX = 2*X - 1
            TSL(IX  )=TMP
            TSL(IX+1)=TMP
  331    CONTINUE
      DO 333 I=1,2
  333 WRITE (TAPE) TSL
C
C     FILL IN BETWEEN THE BOUNDARIES
      DO 20 Y=1,M,2
      TIPBS=0
         DO 20 X=1,N,2
            STAT = GSTAT(X,Y,STATUS) + 1
            GO TO (17,18,19,20),STAT
   17       BOUND(X/2+1,Y/2+1) = IPBS(TIPBS)
            GO TO 20
   18       TIPBS = TIPBS + 1
            IF (TIPBS .GT. MAXMN) GO TO 26
            IPBS(TIPBS) = BOUND(X/2+1,Y/2+1)
            GO TO 20
   19       TIPBS = TIPBS - 1
            IF (TIPBS .GE. 0) GO TO 20
            WRITE(6,101)
   20 CONTINUE
C
C     WRITE OUT THE PICTURE
      DO 33 Y = 1,HAFM
         DO 32 CHAN = 1,TCHA
         DO 31 X= 1,HAFN
            IXB=BOUND(X,Y)
            IF(IXB .EQ. 0) GO TO 30
            TMP = PMEANS(IXB,CHAN) + 0.5
   30       CONTINUE
            IX=2*X-1
            SLINE(CHAN,IX  )=TMP
            SLINE(CHAN,IX+1)=TMP
   31    CONTINUE
   32    CONTINUE
      DO 33 I=1,2
   33 WRITE (13) SLINE
      WRITE(6,109)
      RETURN
C
21    WRITE(6,102)
25    WRITE(6,103) MAXIPS
      RETURN
C
26    WRITE(6,106)
      RETURN
C
100   FORMAT(16I3)
101   FORMAT('0IPBS UNDERFLOW')
102   FORMAT( '0EOF DETECTED ON THE DIRECTIONAL FILE')
103   FORMAT('0IPCNT GT MAX IP COUNT  ',I6)
105   FORMAT('0 CONTOUR ',I6,' DID NOT RETURN TO ITS INITIAL POINT')
106   FORMAT('0IPBS OVERFLOW')
109   FORMAT('0RECON COMPLETED')
      END
