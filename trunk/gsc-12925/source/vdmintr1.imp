{  $INCLUDE : 'compile.inc'   }
{  $INCLUDE : 'vdmintrp.int'    }
{  $INCLUDE : 'vdmgen.int'      }
{  $INCLUDE : 'dspas.int'     }
{  $INCLUDE : 'plpas.int'     }
{  $INCLUDE : 'utility.int'   }
{ $INCLUDE : 'sldetc.int' }

implementation of vdmintrp;

  USES dspas;
  USES vdmgen;
  USES plpas;
  USES slide;
  USES sldetc;

 var
   sangle,
   eangle,
   point   : integer;
   p       : array [1..10] of integer;
   a       : array [1..3] of byte;
   b       : array [1..3] of char;
   textline: lstring(127);
   c       : word;

   procedure int;
     begin
       lclr := 3;
       fclr := 3;
       tclr := 3;
       lt1  := 1;
       lt2  := 0;
       intst:= 0;
       tfli := 1;
       cpath:= 0;
       mt1  := 0;
       mt2  := 0;
       msize:= 1;
       mclr := 3;
       version := 0;
     end;

   procedure vdmipt;
     var
       opcode : char;
       f       : text;

   procedure vdmint;
     begin
       read(f,b[1]);
       a[1] := wrd( b[1] );
       read(f,b[2]);
       a[2] := wrd( b[2] );
       a[3] := #00;
       a[1] := a[1] and #3f;
       a[2] := a[2] and #0f;
       c := byword(  a[3], a[1]) * 16;
       point := ord( c or a[2]);
     end;

   procedure getcrd(num : integer);
     var
       i : integer;
     begin
       for i := 1 to num do
         begin
           vdmint;
           p[i] := point;
         end;
     end;

   procedure getstr;
     var
       i : integer;
       ch: char;
     begin
       read(f,ch);
       i := 1;
       while ch <> chr(#1e) do
         begin
           textline[i] := ch;
           i := i + 1;
           read(f,ch);
         end;
       textline.len := wrd( i - 1 );
     end;

    procedure getval(num : integer);
      var
        i : integer;
      begin
        for i := 1 to num do
          begin
            read(f,b[i]);
            a[i] :=  wrd( b[i] );
          end;
      end;

     begin
       assign(f, name);
       reset(f);
       repeat
         read(f, opcode);
         case opcode of
             chr(#20) : begin
                          getcrd(2);
                          if plchoice <> 2 then
                            dsymbol(p[1],p[2],mclr,mt1,mt2,msize)
                          else
                            plsymbol(p[1],p[2],mclr,mt1,mt2,msize);
                        end;
             chr(#21) : begin
                          getcrd(4);
                          if plchoice <> 2 then
                            dsline(p[1],p[2],p[3],p[4],lclr,lt1,lt2)
                          else
                            plline(p[1],p[2],p[3],p[4],lclr,lt1,lt2);
                        end;
             chr(#22) : begin
                          getcrd(4);
                          if plchoice <> 2 then
                            dsbar(p[1],p[2],p[3],p[4],fclr,intst)
                          else
                            plbar(p[1],p[2],p[3],p[4],fclr,intst);
                        end;
             chr(#24) : begin
                          getval(1);
                          getcrd(2);
                          getstr;
                          if plchoice <> 2 then
                            dstext(p[1],p[2],tfli,tclr,textline,
                                   textline.len,cpath)
                          else
                            pltext(p[1],p[2],tfli,tclr,textline,
                                    textline.len,cpath);
                        end;
             chr(#25) : begin
                          getcrd(3);
                          sangle := 0;
                          eangle := 360;
                          if plchoice <> 2 then
                            dscir(p[1],p[2],p[3],sangle,eangle,fclr,
                                  intst)
                          else
                            plcircle(p[1],p[2],p[3],sangle,eangle,fclr,
                                     intst)
                        end;
             chr(#30) : begin
                          getval(1);
                          msize := ord( a[1] and #0f );
                        end;
             chr(#31) : begin
                          getval(2);
                          mt1 := ord( a[1] and #0f );
                          mt2 := ord( a[2] and #0f );
                        end;
             chr(#33) : begin
                          getval(3);
                          lt1 := ord( a[2] and #0f );
                           lt2 := ord( a[3] and #0f );
                        end;
             chr(#34) : begin
                          getval(1);
                          intst := ord( a[1] and #0f );
                         end;
             chr(#39) : begin
                          getval(1);
                          case a[1] of
                            #30 : cpath := 0;
                            #31 : cpath := 90;
                            #32 : cpath := 180;
                            #33 : cpath := 270;
                            otherwise
                          end;
                        end;
             chr(#3c) : begin
                          getval(1);
                          tfli := ord( a[1] and #0f );
                        end;
             chr(#40) : begin
                          getval(3);
                          if ( a[1] = #40 ) and ( a[2] = #31 )then
                            fclr := ord( a[3] and #0f );
                          if ( a[1] = #40 ) and ( a[2] = #32 )then
                            mclr := ord( a[3] and #0f );
                          if ( a[1] = #40 ) and ( a[2] = #34 )then
                            lclr := ord( a[3] and #0f );
                          if ( a[1] = #41 ) and ( a[2] = #31 )then
                            tclr := ord( a[3] and #0f );
                        end;
             chr(#54) : begin
                          getstr;
                          int;
                        end;
             chr(#60) : begin
                          getcrd(1);
                          version := p[1];
                          read(f,b[1]);
                        end;
             otherwise
         end;
       until ( opcode = chr(#55) ) or ( version <> 0 );
       if plchoice = 2 then plfinish;
       close ( f );
     end;

end.
