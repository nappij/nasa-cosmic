   (* $INCLUDE : 'compile.inc' *)
   (* $INCLUDE : 'getparam.int' *)
   (* $INCLUDE : 'utility.int' *)
   (* $INCLUDE : 'vbpas.int' *)
   (* $INCLUDE : 'dspas.int' *)
   (* $INCLUDE : 'graphpak.int' *)
   (* $INCLUDE : 'barexec.int' *)
   (* $INCLUDE : 'barpict.int' *)

   implementation of barpict;

      uses getparam;

      uses utility;

      uses vbpas;

      uses dspas;

      uses graphpak;

      uses barexec;



   function mxsrqq ( consts a, b : real ): real; extern;

   procedure date (var s : string ); extern;

   procedure chartinfo; extern;
   procedure get_list;	extern;
   procedure skelebar;	extern;
   procedure format;	extern;

   procedure picture;

   var
	xzero	    : integer;
	yzero	    : integer;
	size	    : byte;
	alloc	    : real;
	cum	    : ^matrix;
	cum1	    : array [1..2] of ^supinteger;
	current     : entity;
	data,data1  : ^matrix;
	day	    : string(8);
	error	    : boolean;
	i,j,n,k,d   : byte;
	line,pix    : integer;
	l,m	    : integer;
	max1,max2   : real;
	max,min1    : real;
	offset3     : byte4;
	width3	    : byte4;
	t	    : lstring(6);
	temp	    : ^supreal;
	temp1,x1    : ^supinteger;
	tics1,tics2 : tic10;
	total,total1: byte;
	ndon,ndoff  : byte;
	aline	    : array[1..2] of integer;

   begin
      if plotchoice <> 2 then begin
	there(0,24);
	write('Calculating and Drawing...       ');
      end;
      xzero := xy[9];
      yzero := xy[10];
      aline[1] := 0; aline[2] := 0;
      if (period = 0)or(period > 4) then total := 12 else total := 13;
      total1 := total + 1;
      new(data,2);
      new(data1,2);
      new(data^[1],total1);
      new(data^[2],total1);
      new(data1^[1],total1);
      new(data1^[2],total1);
      new(cum,2);
      new(cum^[1],total1);
      new(cum^[2],total1);
      new(cum1[1],total1);
      new(cum1[2],total1);
      new(temp,3);
      new(temp1,3);
      new(x1,total1);

      (***** alter display space and get data *****)

      dsbar (xy[9]+1,xy[6]+12,xy[3]-1,xy[10]-1,0,9); (* erasing old *)
      current := first;
      i := 1; j := 1;
      repeat
	 with current^ do
	    begin
	       size := node_data^[etype].character_size;
	       case etype of
		  3 : if (field^ = '        ') or (field^.len = 0) then
			 begin
			    date(day);
			    field^.len := 8;
			    field^[1] := day[1];
			    field^[2] := day[2];
			    field^[3] := '/';
			    field^[4] := day[4];
			    field^[5] := day[5];
			    field^[6] := '/';
			    field^[7] := day[7];
			    field^[8] := day[8];
			 end;
		  4 : begin
			 recode (1,field^,alloc);
		      end;
		  5 : if (i <= 2) and (j <= total1) then
			begin			   (*enter_mode = incremental*)

			  if enter_mode = 1 then
			     [ recode (1,field^,data^[i]^[j]);
			       if (dis_mode in [2, 3]) or (j = 1) then
				  dstext(x,y,size,color1,field^,field^.len,0);]

			  else			   (* enter_mode = cumulative *)

			     [ recode (1,field^,cum^[i]^[j]);
			       if (dis_mode in [1, 3]) and (j <> 1) then
				  dstext(x,y,size,color1,field^,field^.len,0);];

			  if (field^ = null) or (field^ = '      ') then
			      aline[i] := aline[i] + 1
			  else
			      aline[i] := 0;

			  j := j + 1;
			  if j > total1 then
			     begin
				j := 1;
				i := i + 1;
			     end;
			end;
		  otherwise begin end; end;

	       if etype in [1,2] then	(* center the title and sub_title *)
		  begin
		    n := (node_data^[etype].input_length - field^.len) div 2;
		    dstext( (x+(n*8)),y,size,color1,field^,field^.len,0);
		  end
	       else begin
		  if etype <> 5 then
		     dstext(x,y,size,color1,field^,field^.len,0);
	       end;
	    end;  (* with *)
	  current := current^.down;
      until current = first;

      width3[1] := 20; width3[2] := 14; width3[3] := 10;
      offset3[1] := 0; offset3[2] := 16; offset3[3] := 12;
      max := 0;
      for i := 1 to 2 do
	 begin
	    if enter_mode = 1 then
	       sum (1,total1,data^[i]^,cum^[i]^,error)
	    else
	       sum (2,total1,data^[i]^,cum^[i]^,error);
	    for j := 1 to total1 do max := mxsrqq(cum^[i]^[j], max);
	 end;
      max := mxsrqq(max,alloc);

      if (max > 0) and (aline[1] < total1) then
	begin
	  if cum^[1]^[1] > 0.0 then temp^[1] := cum^[1]^[1]
			       else temp^[1] := 0.0;
	  if cum^[2]^[1] > 0.0 then temp^[2] := cum^[2]^[1]
			       else temp^[2] := 0.0;
	  temp^[3] := max;
	  ticlabel(3,temp^,d,tics2,error);
	  temp^[3] := alloc;
	  scale(3,temp^,temp1^,height,tics2[d],error);
	  temp1^[3] := yzero - temp1^[3];
	  if curve <> 1 then begin
	     dsline(xy[9]+1,temp1^[3],xy[3]-1,temp1^[3],color1,1,0);
	     dsline(xy[9]+1,temp1^[3]+1,xy[3]-1,temp1^[3]+1,color1,1,0);
	  end;
	  (***** data values *****)

	  for i := 1 to 2 do
	     for n := 1 to total do
		if data^[i]^[n+1] <= 0 then data1^[i]^[n] := 0
		   else data1^[i]^[n] := data^[i]^[n+1] * 2;

	  minmax(total,data1^[1]^,max1,min1,error);
	  minmax(total,data1^[2]^,max2,min1,error);
	  if max1 >= max2 then ticlabel(total,data1^[1]^,k,tics1,error)
			  else ticlabel(total,data1^[2]^,k,tics1,error);

	  m := (height div 2);

	  for i := 1 to 2 do
	     begin
	       j := i;
	       if (curve <> 2) and (aline[i] < total) then    (* display bars *)
		  begin
		    scale(total,data1^[i]^,x1^,m,tics1[k],error);
		    bars(total,x1^,2,j,color2[i],fill2[i],xzero,yzero+1,
			 xy[18],xy[31],width3,offset3);
		  end; (* if curve *)
		j := j - 1;
		pix := xzero - xy[31] + 6;
		line := yzero + 2 + xy[18] * (4 + j);
		if pattern2[i] = 1 then [ ndon := 2; ndoff := 4 ]
				   else [ ndon := 1; ndoff := 0 ];
		dsline ( pix,line+4,pix+26,line+4,color2[i],ndon,ndoff);
		pix := xzero-58;
		line := yzero - 30 + (j - 1) * 16;
		dsbar (pix,line,pix+8,line+8,color2[i],fill2[i]);
		dsline(pix-72,line,pix-72,line+8,color2[i],ndon,ndoff);
	      end;

	  (***** cumulatives *****)

      pix := first^.down^.down^.down^.down^.x + xy[31];
      line := first^.down^.down^.down^.down^.y + xy[18];
      for i := 1 to 2 do
	  begin
	     if aline[i] < total then begin
	       scale(total1,cum^[i]^,cum1[i]^,height,tics2[d],error);
	       for n := 1 to (total-aline[i]) do begin
		   cum1[i]^[n] := cum1[i]^[n+1];
		   cum^[i]^[n] := cum^[i]^[n+1];
	       end; (* for *)
	     end;   (* if  aline *)

	     t.len := 6;
	     if enter_mode = 1 then		   (* enter incremental *)
		begin
		  if dis_mode in [1, 3] then	   (* display cumulative *)
		     for n := 1 to total do begin
			  if ord(n) <= ( ord(total) - ord(aline[i]) ) then
			     recode(2,t,cum^[i]^[n])
			  else copylst ( '      ', t );
			  l := pix + (n-1)* xy[31];
			  m := line + i * xy[18];
			  dstext(l,m,size,color1,t,t.len,0);
		     end;   (* for n, if dis_mode   *)
		end	      (* if enter_mode = 1 *)
	     else begin 			   (* enter cumulative *)
		  for n:= 1 to total1 do
		     begin
			if ord(n) <= ( ord(total1) - ord(aline[i]) ) then
			   recode(2,t,data^[i]^[n])
			else
			   copylst('      ', t);
			l := node_data^[5].x + (n-1) * xy[31];
			m := line - 40 + (i * xy[18]);
			if (dis_mode in [2,3]) or (n = 1) then	  (* incremnetal *)
			   dstext(l, m, size, color1, t, t.len, 0);
		     end; (* for n *)
	     end;	 (* if enter_mode = 0 *)
	     if pattern2[i] = 1 then [ ndon := 2; ndoff := 4 ]
				else [ ndon := 1; ndoff := 0 ];
	     if (aline[i] < total) and (curve <> 1) then
		 ogive(total-aline[i],cum1[i]^,color2[i],ndon,ndoff,temp1^[i],xzero,yzero,xy[31]);
	  end;	(* for i  *)		     (* draw the curve *)

	  (***** ticmark labels *****)

	  yzero := yzero - 4;
	  t := '-';
	  if curve <> 2 then
	     begin
		pix := xzero - 40;
		line := yzero;
		dsbar(xzero-40,line-height,xzero-1,line,0,9);
		for l := 1 to k do
		   begin
		      dstext(pix+34,line,size,color1,t,t.len,0);
		      dstext(pix,line,size,color1,tics1[l],6,0);
		      line := line - (height div (k-1));
		   end;
	     end;
	  if curve <> 1 then
	     begin
		pix := xy[19]-40;
		line := yzero;
		dsbar(xy[19]-40,yzero-height,xy[19]-1,yzero,0,9);
		for l := 1 to d do
		   begin
		      dstext(pix+34,line,size,color1,t,t.len,0);
		      dstext(pix,line,size,color1,tics2[l],6,0);
		      line := line - (height div (d-1));
		   end;
	     end;
	end;
	dispose ( data1^[1]); dispose ( data1^[2]);dispose ( data1);
	dispose ( data^[1]);  dispose ( data^[2]); dispose ( data );
	dispose ( cum^[1] );  dispose ( cum^[2] ); dispose ( cum );
	dispose ( cum1[1] );  dispose ( cum1[2] );
	dispose ( temp	  );  dispose ( temp1	); dispose ( x1  );
   end;
   end.

