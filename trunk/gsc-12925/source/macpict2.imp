   (* $INCLUDE : 'compile.inc' *)
   (* $INCLUDE : 'getparam.int' *)
   (* $INCLUDE : 'utility.int' *)
   (* $INCLUDE : 'graphpak.int' *)
   (* $INCLUDE : 'vbpas.int' *)
   (* $INCLUDE : 'dspas.int' *)
   (* $INCLUDE : 'macexec.int' *)
   (* $INCLUDE : 'macpict.int' *)

   implementation of macpict;

      uses getparam;

      uses utility;

      uses graphpak;

      uses vbpas;

      uses dspas;

      uses macexec;


   procedure chartinfo; extern;
   procedure get_list; extern;
   procedure skelemac; extern;
   procedure format; extern;


   procedure picture;

   var
	xzero	    : integer;
	yzero	    : integer;
	size	    : byte;
	data1	    : array [1..4] of ^supinteger;
	current     : entity;
	data	    : ^matrix;
	day	    : string(8);
	error,neg   : boolean;
	i,j,k,n     : byte;
	line,pix    : integer;
	l,m	    : integer;
	offset4     : byte4;
	width4	    : byte4;
	t	    : lstring(6);
	tics	    : array[1..4] of tic10;
	d,e	    : byte;
	line1	    : integer4;
	curve	    : integer4;
        newnode     : entity;

   begin
      if plotchoice <> 2 then begin
	there(0,24);
	write('Calculating and Drawing...       ');
      end;
      new(data,4);
      new(data^[1],total+1);
      new(data^[2],total+1);
      new(data^[3],total+1);
      new(data^[4],total+1);
      new(data1[1],total);
      new(data1[2],total);
      new(data1[3],total);
      new(data1[4],total);

      (***** alter display space and get data *****)

      dsbar (xy[7]+1,xy[5]+1,xy[8]-1,xy[6]-1,0,9); (* erasing old *)
      current := first;
      i := 1; j := 1;
      line1[1] := 0;
      line1[2] := 0;
      line1[3] := 0;
      line1[4] := 0;
      e := 0;
      n := 1;
      for k := 1 to 4 do curve[k] := 0;
      t[1] := ' ';
      l := 1;
      repeat
	 with current^ do
	    begin
	       size := node_data^[etype].character_size;
	       case etype of
		  3 : begin
			dstext(xy[l+30],xy[35],1,color1,current^.field^,current^.field^.len,270);
			l := l + 1;
		      end;
		  4 : if i <= 4 then
			 if j <= total then
			    begin
			       recode (1,field^,data^[i]^[j]);
			       if (field^='      ')or(field^=null)or(field^=' ') then line1[i] := line1[i] + 1
						   else line1[i] := 0;
			       j := j + 1;
			       if j > total then
				  begin
				     j := 1;
				     i := i + 1;
				  end
			    end;
		  otherwise begin end; end;

	      if etype = 1 then
		 begin
		   n := (node_data^[etype].input_length - field^.len) div 2;
		   dstext( (x+(n*8)), y, size, color1, field^, field^.len, 0);
		 end
	      else
		 dstext(x,y,size,color1,field^,field^.len,0);

	      current := current^.down;
	    end; (* with *)

       until current = first;

      xzero := xy[7]; yzero := xy[6];
      newnode := first^.up;
      while newnode^.etype <> 4 do newnode := newnode ^.up;
      pix := newnode^.x - (total - 1) * xy[40];

      width4[1]:=20; width4[2]:=14; width4[3]:=10; width4[4]:=8;
      offset4[1]:=0; offset4[2]:=16; offset4[3]:=12; offset4[4]:=9;
      k := 0;
      for i := 1 to 4  do
	begin
	if (bcplot[i] = 'b') or (bcplot[i] = 'B')  then
	  [ curve[i] := 1;  e := e + 1 ]
	  else curve[i] := 2;
	end;
      for i := 1 to 4 do
	 begin
	   if line1[i] < total then
	    begin
	    if curve[i] = 1 then
	      begin
		for j := 1 to total do
		  if data^[i]^[j] < 0 then data^[i]^[j] := 0
		   else data^[i]^[j] := data^[i]^[j] * 2;
		m := height div 2;
	      end
	     else
	     begin
	       neg := false;
	       for j := 1 to total do
		 if data^[i]^[j] < 0 then neg := true;
	       if neg then m := height div 2 else m := height;
	     end;
	    data^[i]^[total+1]:=xy[42];
	    ticlabel(total+1,data^[i]^,d,tics[i],error);
	    scale(total,data^[i]^,data1[i]^,m,tics[i][d],error);
	    if curve[i] = 1 then
	     [k := k + 1;
	     bars(total,data1[i]^,e,k,clr[i],fill[i],xzero,yzero+1,10,xy[9],width4,offset4)]
	    else
	     if curve[i] = 2 then
	       ogive(total-line1[i],data1[i]^,clr[i],ndon[i],ndoff[i],0,xzero,yzero-ord(neg)*m,xy[9]);
	(***** ticmarks labels *****)

	   l := yzero-height;
	   dsbar(xy[i+30]+6,l,xy[i+30]+42-(i div 4)*2,yzero-1,0,9);
	   for j := d downto 2 do
	     begin
	       dstext(xy[i+30]+8-(i div 4)*2,l,1,color1,tics[i][j],tics[i][j].len,0);
	       l := l + (height div (d-1));
	     end;
	   end;
	 end;

   dsline(xy[36],xy[37],xy[36],xy[38],color1,1,0);
   dsline(xy[39],xy[37],xy[39],xy[38],color1,1,0);

   for j := 4 downto 1 do dispose (data^[j]);  dispose (data);
   for j := 4 downto 1 do dispose (data1[j]);
   end;
   end.
