 Overlay Function Interface: char;


Var
   command : char;


Begin
   Clear_The_Screen;
   Textbackground(blue);
   Gotoxy(20,1);
   Writeln('SELECT FROM THE FOLLOWING FUNCTIONS:');Writeln;
   Gotoxy(20,8);Textbackground(black);
   Script('PERFORM SENSITIVITY ON AN ','A','SCII FILE','AS CREATED BY MAINFRAME SAMIS.');
   Writeln;Writeln;
   Script('PERFORM SENSITIVITY ON A ','B','INARY FILE','CONTAINING A SPECIFIC CASE AS GENERATED BY IPEG.');
   Writeln;Writeln;
   {Script('PERFORM A SIMPLE ', 'I','PEG2 ANALYSIS','OF A PROCESS AS DESCRIBED ON A FORMAT A.');}
   Script('','E','XIT TO OPERATING SYSTEM.','');
   Writeln;Writeln;
   command := Read_Keyboard(56,['A','B','E'{,'I'},'a','b','e']);
   Textcolor(yellow);Interface := Upcase(command);
   Textbackground(black);
End;


Overlay Procedure Initialize_variable_names_min_max_and_default_values;

Var i : integer;

Begin
n_variables:= 43;
ivnames[1] := 'Eqpt';  ivnames[2] := 'Sqft';
ivnames[3] := 'Dlab';  ivnames[4] := 'Mats';
ivnames[5] := 'Util';  ivnames[6] := 'El';
ivnames[7] := 'Eitcr'; ivnames[8] := 'Fl';
ivnames[9] := 'Beta';  ivnames[10] := 'X';
ivnames[11] := 'Nu';   ivnames[12] := 'Z';
ivnames[13] := 'Rlab'; ivnames[14] := 'Rutil';
ivnames[15] := 'G';    ivnames[16] := 'W';
ivnames[17] := 'Tau';  ivnames[18] := 'Lambda';
ivnames[19] := 'Ir';   ivnames[20] := 'R';
ivnames[21] := 'P1';   ivnames[22] := 'P2';
ivnames[23] := 'P3';   ivnames[24] := 'D1';
ivnames[25] := 'D2';   ivnames[26] := 'Gf';
ivnames[27] := 'Ge';   ivnames[28] := 'Ts';
ivnames[29] := 'Tm';   ivnames[30] := 'Tc';
ivnames[31] := 'L';    ivnames[32] := 'A';
ivnames[33] := 'Uf';   ivnames[34] := 'Lf';
ivnames[35] := 'T';    ivnames[36] := 'M';
ivnames[37] := 'B';    ivnames[38] := 'Tlf';
ivnames[39] := 'Xec';  ivnames[40] := 'Xfc';
ivnames[41] := 'Xopr'; ivnames[42] := 'N';
ivnames[43] := 'Crt';

ivunits[1] := '$';            ivunits[2] := 'Sq_ft';
ivunits[3] := '$/Year';       ivunits[4] := '$/Year';
ivunits[5] := '$/Year';       ivunits[6] := 'Years';
ivunits[7] := 'Fraction/yr';  ivunits[8] := 'Years';
ivunits[9] := 'Fraction/yr';  ivunits[10] := 'Fraction/yr';
ivunits[11] := 'Fraction/yr'; ivunits[12] := 'Fraction/yr';
ivunits[13] := '$/$';         ivunits[14] := '$/sq_ft';
ivunits[15] := 'Fraction/yr'; ivunits[16] := 'Years';
ivunits[17] := 'Fraction/yr'; ivunits[18] := '$/$';
ivunits[19] := 'Fraction/yr'; ivunits[20] := 'Fraction/yr';
ivunits[21] := '$/Sq_ft';     ivunits[22] := '$/Sq_ft';
ivunits[23] := '$/Sq_ft';     ivunits[24] := 'Fraction';
ivunits[25] := 'Fraction';    ivunits[26] := 'Fraction/yr';
ivunits[27] := 'Fraction/yr'; ivunits[28] := 'Years';
ivunits[29] := 'Year';        ivunits[30] := 'Years';
ivunits[31] := 'Fraction/yr'; ivunits[32] := 'Fraction/yr';
ivunits[33] := 'Fraction/yr'; ivunits[34] := 'Fraction/yr';
ivunits[35] := 'Years';       ivunits[36] := 'Years';
ivunits[37] := 'Years';       ivunits[38] := 'Fraction/yr';
ivunits[39] := 'Fraction/yr'; ivunits[40] := 'Fraction/yr';
ivunits[41] := 'Fraction/yr'; ivunits[42] := 'Fraction';
ivunits[43] := 'Years';

 For i:=1 to 5 do
vmax[i]:= power(10.0,9.0);
vmax[6]:= 50.0;      vmax[7]:= 1.0;
vmax[8]:= 100.0;     vmax[9]:= 1.0;
vmax[10]:= 1.0;      vmax[11]:= 1.0;
vmax[12]:= 1.0;      vmax[13]:= 500.0;
vmax[14] := 1000.0;  vmax[15]:= 1.0;
vmax[16]:= 1000.0;   vmax[17]:= 1.0;
vmax[18]:= 100.0;    vmax[19]:= 1.0;
vmax[20]:= 1.0;      vmax[21]:= 5.0;
vmax[22]:= 1000.0;   vmax[23]:= 500.0;
vmax[24]:= 1000.0;   vmax[25]:= 1000.0;
vmax[26]:= 1.0;      vmax[27]:= 1.0;
vmax[28]:= 25.0;     vmax[29]:= 2000.0;
vmax[30]:= 25.0;     vmax[31]:= 1.0;
vmax[32]:= 1.0;      vmax[33]:= 1.0;
vmax[34]:= 1.0;      vmax[35]:= 20.0;
vmax[36]:= 10.0;     vmax[37]:= 5.0;
vmax[38]:= 1.0;      vmax[39]:= 1.0;
vmax[40]:= 1.0;      vmax[41]:= 1.0;
vmax[42]:= 10.0;     vmax[43]:= rinf_c;
vmax[44]:= rinf_c;   vmax[45]:= rinf_c;

vdef[6]  := 7.0;
vdef[7]  := 0.11;     vdef[8]  := 40;       vdef[9]  := 0.02;
vdef[10] := 0.03;     vdef[11] := 0.04;     vdef[12] := 0;
vdef[13] := 0.7;      vdef[14] := 6.0;      vdef[15] := 0.07;
vdef[16] := 0.16;     vdef[17] := 0.5;      vdef[18] := 1.20;
vdef[19] := 0.0925;   vdef[20] := 0.2;      vdef[21] := 0.4;
vdef[22] := 60;       vdef[23] := 63.8;     vdef[24] := 8;
vdef[25] := 1.4;      vdef[26] := 0.08;     vdef[27] := 0.04;
vdef[28] := 1;        vdef[29] := 1988;     vdef[30] := 3;
vdef[31] := 0.635;    vdef[32] := 0.11;     vdef[33] := 0.667;
vdef[34] := 0.333;    vdef[35] := 7;        vdef[36] := 5;
vdef[37] := 3;        vdef[38] := 0.67;     vdef[39] := 0.15;
vdef[40] := 0.15;     vdef[41] := 0.10;     vdef[42] := 1.25;
vdef[43] := 12;

For i := 1 to n_variables do vmin[i] := 0;

vmin[6]:= 1.0;       vmin[8]:= 1.0;
vmin[19]:= 0.01;     vmin[43]:= 2.0;
vmin[18]:= 1.0;      vmin[29]:= 1950.0;
vmin[44]:= 1.0;      vmin[45]:=1;

vnames[1] := 'C[1]';   vnames[2] := 'C[2]';
vnames[3] := 'C[3]';   vnames[4] := 'C[4]';
vnames[5] := 'C[5]';   vnames[6] := 'Price1';
vnames[7] := 'Price2'; vnames[8] := 'Opr';
vnames[9] := 'Otx';    vnames[10] := 'Bval';
vnames[11] := 'Ins';   vnames[12] := 'Int';
vnames[13] := 'Rpl';   vnames[14] := 'Itc';
vnames[15] := 'Eqr';   vnames[16] := 'Wcap';
vnames[17] := 'Fac';   vnames[18] := 'Pvelp';
vnames[19] := 'Pvecc'; vnames[20] := 'Pvitc';
vnames[21] := 'Pvewc'; vnames[22] := 'Pvdep';
vnames[23] := 'Pvsuci';

vunits[1]  := ''; vunits[2] := '$/Sq. Ft.';
For i := 3 to 5 do vunits[i] := '';
vunits[6] := '$/Unit'; vunits[7] := '$/Unit';
For i := 8 to 23  do vunits[i] := '$';
End;

Overlay Procedure Reorganize_ipeg_input_file;

Var ch_r        : char;
    done,done2 : boolean;
    j,k,l,m,n  : integer;

Procedure readstring;

Var ch_r : char;

Begin
	read(ipe,ch_r);
	While not (ch_r in ['0'..'9','A'..'Z','*']) do read(ipe,ch_r);
     input_str := ch_r;
	While (ch_r <> ' ') and (not eoln(ipe)) do
	Begin
		read(ipe,ch_r);
		if ch_r <> ' ' then
		input_str := input_str + ch_r;
	End
End; {** of readstring **}

Procedure readnumbers(number_per_line:integer);

Var 	k: integer;
Begin
	For k:=1 to number_per_line do
         read(ipe,tempa[k]);
     readln(ipe)
End; {*readnumbers*}

Procedure get_directory;

Begin
assign(dir,'dir.dat');
rewrite(dir);
With dir_data do
   Begin
   ch_r:= 't';
   j:= 0;
   While (ch_r <> '+') do {** create directory file **}
      Begin
      read(ipe,size_index);
      readstring;
      reference:= input_str;
      read(ipe,lines_of_data);
      readln(ipe);
      company_rec := j;
      write(dir,dir_data);
      j := j + 1;
      read(ipe,ch_r)
      End
   End;
   readln (ipe)
End; {**of get_directory**}

Procedure Get_process_data;
Begin
With proc_dat do
   Begin
   For n := 1 to no_proc do
      Begin
      readln (ipe);
      readln (ipe,process_descriptive_name);
      readnumbers(5);
      for m := 1 to 5 do save5[m] := tempa[m];
      readnumbers(6);
      save13_14[13] := tempa[1];
      save13_14[14] := tempa[2];
      save27 := tempa[3];
      l := 21;
      For m := 4 to 6 do
         Begin
         l := l + 1;
         save22_26[l] := tempa[m]
         End;
      readnumbers (5);
      save22_26[25] := tempa[1];
      save22_26[26] := tempa[2];
      p_quans := tempa[3];
      save6_7[6] := tempa[4];
      save6_7[7] := tempa[5];
      readln(ipe,process_product_units);
      write(pro,proc_dat);
      End
   End;
Close(pro);
proc_start:= proc_start + no_proc
End;

Procedure get_company_and_process_data;

Begin
assign(com,'comp.dat');
assign(pro,'proc.dat');
rewrite(pro);
rewrite(com);
done:= false;
For k:= 0 to (j - 1)  do
Begin
With comp_dat do
Begin
readln(ipe);
		readln(ipe,company_descriptive_name);
		readstring;
		l:= 0;
		no_proc:= 1;
		process_list[1]:= input_str;
		done2:= false;
		While (not done2) do
		Begin
		  l:= l + 1;
		  if (l > 6) then
		  Begin
			readln(ipe);
			l:= 0
		  End;
		  readstring;
		  if input_str[1] = '*' then done2:= true
		  else
		  Begin
			no_proc:= no_proc + 1;
			process_list[no_proc]:= input_str;
		  End
		End;
		readln(ipe);
		For l:= 1 to 5 do
			read(ipe,save1_5[l]);
		readln(ipe);
		read(ipe,i_quan);
		read(ipe,p_quan);
		readln(ipe);
		readln(ipe,industry_units);
		readln(ipe,product_units);
		l:= 5;
		For n:= 1 to 3 do
		Begin	readnumbers(6);
			For m:= 1 to 6 do
			Begin	l:= l + 1;
				save6_31[l]:= tempa[m]
			End
		End;
		readnumbers(3);
		save6_31[24]:= tempa[1];
		save6_31[25]:= tempa[2];
		save6_31[26]:= tempa[3];
		l:= l + 3;
		readnumbers(6);
		For m:= 1 to 5 do
		Begin	l:= l + 1;
			save6_31[l]:= tempa[m]
		End;
		tb:= tempa[6];
		l:= 31;
		For n:= 1 to 2 do
		Begin	readnumbers(6);
			For m:= 1 to 6 do
			Begin	l:= l + 1;
				save32_43[l]:= tempa[m]
			End
		End;
		process_rec:= proc_start
       End;{With}
       comp_dat.number_of_processes:= no_proc;
       write(com,comp_dat);
       get_process_data;
       End; {*For*}
       close(dir);
       close(com)
End; {**get_company_and_process_data**}

Begin {**get_IPEG_inputs_for_this_case**}

     proc_start:= 0;
     reset(ipe);
     get_directory;
     get_company_and_process_data

End; {reorganize ipeg input file}


Overlay Procedure Display_changed_vars;

Var i                : integer;
    equal,first_time : boolean;

Procedure Printline (saved,wkng : real; i : integer);

Var line_number : integer;

Begin
if first_time then
   Begin
   line_number := 4;
   Clear_The_Screen;
   Writeln (' ':22,'** Changed Variable Status **');
   Writeln ('The following variables have working values different from saved values:');
   Writeln;
   Writeln ('   Variable           Saved value         Working value');
   Writeln ('   --------           -----------         -------------');
   End;
first_time := false;
line_number := line_number + 1;
if line_number = 22 then
   Begin
   line_number := 1;
   Wait_for_keypress(7);
   End;
if i <= 43 then writeln (ivnames[i]:8,'       ',saved:18:2,' ':10,wkng:10:2)
else if i = 44 then writeln ('I.Quan':9,'       ',saved:19:2,' ':10,wkng:10:2)
else writeln ('P.Quan':9,'       ',saved:19:2,' ':10,wkng:10:2)
End;

Begin
first_time := true;
equal := true;
with comp_dat do
   Begin
   for i := 1 to 5 do if save1_5[i] <> working[i] then printline (save1_5[i],working[i],i);
   for i := 6 to 31 do if save6_31[i] <> working[i] then printline (save6_31[i],working[i],i);
   for i := 32 to 43 do if save32_43[i] <> working[i] then printline (save32_43[i],working[i],i);
   End;
if comp_dat.i_quan <> wkg_i_quan then printline (comp_dat.i_quan,wkg_i_quan,44);
if comp_dat.p_quan <> wkg_p_quan then printline (comp_dat.p_quan,wkg_p_quan,45);
Wait_for_keypress(8);
End;


Overlay Procedure Change_working_vars;

Var choice        : integer;
    ok            : boolean;
    new_value     : real;

Procedure Change_a_real (Var old_val : real; min,max : real);

Begin
ok := false;
   Repeat
   Ask_Question(false,'Enter new value: ');
   get_number (9,real_number,new_value,idum);
   if (new_value >= min) and (new_value <= max) then ok := true
   else
      Begin
      writeln (new_value:15:2,' is outside the limits of this variable');
      Ask_Question(false,'Do you wish to retain it anyway (Y/N) ? Y');
      user_response := Read_Keyboard(10,['n','N','y','Y',^M]);
      if (user_response in ['N','n']) then
         Begin
         Clear_Message_Line;
         Writeln('Please enter a real number greater G.E.',min:15:2,' and L.E to ',max:10:2);
         Change_a_real (old_val,min,max);
         ok := true;
         End
      else ok := true
      End
   until ok;
old_val := new_value;
End;

Begin
Display_indep_var_names_and_id;
   Repeat
   Ask_Question(false,'Enter the ID number of the variable you wish to change (0 to end): ');
   get_number (11,integer_number,rdum,choice);
   if (choice > 0) and (choice < 44) then
      Begin
      Clear_Message_Line;
      writeln ('The present value of ',ivnames[choice],' is ',working[choice]:15:2);
      Change_a_real (working[choice],0.001,1000.0);
      End
   else if choice = 44 then
      Begin
      Clear_Message_Line;
      writeln ('The present value of I.Quan is ',comp_dat.i_quan:15:2);
      Change_a_real (wkg_i_quan,0.001,1000.0)
      End
   else if choice = 45 then
      Begin
      Clear_Message_Line;
      writeln ('The present value of P.Quan is ',comp_dat.p_quan:15:2);
      Change_a_real (wkg_p_quan,0.001,1000.0)
      End
   Until choice = 0;
Set_Window(1,1,80,24,false);
End;


Overlay Procedure Create_an_ipeg_input_file;

Var i :integer;

Procedure Get_input(var_name:vocab;var its_val:real; min,max:real);

Var ok : boolean;

Begin
ok := false;
repeat
 Gotoxy(1,24);Clreol;
 Write('Value of ',var_name,' : ');
 Get_number(12,real_number,its_val,idum);
if (its_val < min) or (its_val > max) then
Begin
  Clear_Message_Line;
  write(its_val:15:2,' is outside the limits of this variable');
  Ask_Question(false,'Do you wish to retain it anyway (Y/N) ? Y');
  user_response := Read_Keyboard(13,['n','N','y','Y',^M]);
  If user_response in ['N','n'] then
  Begin
  Clear_Message_Line;
  writeln ('Please enter a real number G.E. to ',min:15:2,' and L.E. ',max:10:2);
  End
 Else ok := true
End
 Else ok := true
Until ok
End;

Begin
Clear_The_Screen;
Writeln;writeln;
Writeln('************** IN IPEG INPUT FILE CREATION MODE **************');
Writeln; writeln;
{create directory entry}
with dir_data do
  begin
  company_rec := 0; size_index := 0; lines_of_data := 0;
  Ask_Question(false,'Enter company/process referent (9 char max.): ');
  Get_String(14,reference);
  end;
{create company/process entry}
With comp_dat do
  Begin
  process_rec := 0;
  Ask_Question(true,'Enter company/process descriptive name (80 char max.):');
  Get_String(15,company_descriptive_name);
  number_of_processes := 1;
  process_list[1] := 'NONE';
  For i := 1 to 5 do Get_input(ivnames[i],save1_5[i],vmin[i],vmax[i]);
  Get_input('I.Quans',i_quan,0.001,1000);
  Get_input('P.Quans',p_quan,0.001,1000);
  Get_input('Tb',tb,1980,1990);
  Ask_Question(true,'Enter industry units (80 char max)');
  Get_String(16,industry_units);
  Ask_Question(true,'Enter product units (80 char max)');
  Get_String(17,product_units);
  Read_report_year
  End;
  Ask_Question(false,'Do you wish to load input file with defaults (Y/N) ? Y');
  user_response := Read_Keyboard(18,['n','N','y','Y',^M]);
  If user_response in ['N','n'] then
begin
with comp_dat do
  begin
  for i := 6 to 31 do Get_input(ivnames[i],save6_31[i],vmin[i],vmax[i]);
  for i := 32 to 43 do Get_input(ivnames[i],save32_43[i],vmin[i],vmax[i]);
  End
End
Else
Begin
With comp_dat do
Begin
 for i := 6 to 31 do save6_31[i] := vdef[i];
 for i := 32 to 43 do save32_43[i] := vdef[i];
 Writeln('IPEG FILE LOADED WITH DEFAULT VALUES');
End
End;
Reinitialize_working_vars;
Wait_for_keypress(25);
Show_indep_vars;
Ask_Question(false,'Do you wish to change any of the working variable values (Y/N) ? N');
user_response := Read_Keyboard(19,['n','N','y','Y',^M]);
If user_response in ['Y','y'] then
 Begin
 Change_working_vars;
 Display_changed_vars;
 End
End;



Overlay Procedure Display_the_transformation_matrix;

Var i,j : integer;

Begin
Clear_The_Screen;
Writeln (' ' :29, 'Transformation Matrix');
Writeln;
write ('          C');
For i := 1 to 5 do write (' ',t_matrix [1,i]:12:5);
Writeln;
For i := 2 to 17 do
   Begin
   write (vnames [i + 6]:11);
   For j := 1 to 5 do write (' ',t_matrix [i,j]:12:5);
   Writeln
   End;
   Writeln; Writeln;
Wait_for_keypress(23);
End;



Overlay Procedure Print_the_price;

Var deflator : real;

Begin
Clear_The_Screen;
Print_report_heading;
deflator := power((1 + working[15]),(report_year - comp_dat.tb {working[29]}));
price := price * deflator;
writeln; writeln;
writeln('C(1) = ',c[1]:10:2,' ':20,'EQPT = ',working[1]*deflator:10:2,' ':3,'$( ',report_year:4:0,' )');
writeln('C(2) = ',c[2]*deflator:10:2,' ':3,'$( ',report_year:4:0,
' )/SQFT',' ':3,'SQFT = ',working[2]:10:2,' ':3,'SQ. FT.');
writeln('C(3) = ',c[3]:10:2,' ':20,'DLAB = ',working[3]*deflator:10:2,' ':3,'$( ',report_year:4:0,' )/YR');
writeln('C(4) = ',c[4]:10:2,' ':20,'MATS = ',working[4]*deflator:10:2,' ':3,'$( ',report_year:4:0,' )/YR');
writeln('C(5) = ',c[5]:10:2,' ':20,'UTIL = ',working[5]*deflator:10:2,
' ':3,'$( ',report_year:4:0,' )/YR');
writeln;
writeln('P.QUAN = ',wkg_p_quan:15:2,' ':3,comp_dat.product_units,'/YR');
writeln('I.QUAN = ',wkg_i_quan:15:2,' ':3,comp_dat.industry_units,'/YR');
writeln;
if process_flag = 0 then write('PRICE = ')
else write('VALUE ADDED = ');
write(price/wkg_i_quan:10:2,' ':3,'$( ',report_year:4:0,' )/',comp_dat.industry_units);
writeln(' =>',price/wkg_p_quan:8:2,' $( ',report_year:4:0,' )/',comp_dat.product_units);
writeln; writeln
end;

Overlay Procedure Plot_the_results;

Const max_x = 639;
      max_y = 199;

Type
    text_type = string[80];
Var i,y_axis_var,x_axis_var,l               : integer;
    y,biggest_x,biggest_y,smallest_x,smallest_y,
    scaling_factor_x,scaling_factor_y,zero_based,
    k,j,slope,dot_density,temp,delta_x,delta_y       : real;
    data_x,data_y                                    : value_array;
    parametric,more_plots,plot_error                 : boolean;
    y_name                                           : string[12];
    temp_str : text_type;
    response : char;

   Procedure Trim_Real(n_dec : integer; var strg : text_type);
   Var
      dec_pos : 0..255;
      str2    : text_type;
      firstime: boolean;
      Procedure Round_Real(pos : integer;var strg:text_type);
      Var
         pos2,
         res  : integer;
         str3 : string[5];
         va   : real;
         Begin
         If (not firstime) and (pos = 3) then
            If (strg[pos] = '0') then
               Begin
               strg[pos] := '1';
               str3 := Copy(strg,Length(strg)-3,4);
               Val(str3,va,res);
               va := va + 1.0;
               Str(va:3:0,str3);
               For pos2 := 1 to Length(str3) do If not (str3[pos2] in ['-','+','0'..'9']) then Delete(str3,pos2,1);
               For pos2 := 1 to (4 - Length(str3)) do Insert('0',str3,pos2+1);
               Delete(strg,Length(strg)-3,4);
               strg := strg+str3;
               End;
         If pos = 5 then pos2 := 3
         Else pos2 := pos - 1;
         If pos > 2 then
            If (strg[pos] >= '5') or ((not firstime) and (strg[pos] = '0')) then
               Begin
               If strg[pos2] = '9' then
                  Begin
                  firstime := false;
                  strg[pos2] := '0';
                  Round_Real(pos2,strg);
                  End
               Else strg[pos2] := Chr(Ord(strg[pos2]) + 1);
               End;
         End; { of procedure Round_Real }
   Begin
      firstime := true;
      dec_pos := Pos('.',strg)+ n_dec + 1;
      Round_Real(dec_pos,strg);
      Delete(strg,dec_pos,(Pos('E',strg)-dec_pos));
      Delete(strg,(Pos('E',strg)+2),1);
      Delete(strg,1,2);
   End; { of procedure Trim_Real }

   Procedure Plot_data_points;
   Var
      x_name,y_name,x_units : string[12];

      Procedure Sort (array_to_be_sorted : value_array; Var biggest,smallest : real);
      var i,j : integer;
      dummy : real;

      Begin
      For i := 1 to n_values do
      For j := 2 to n_values do
         Begin
         if array_to_be_sorted [j-1] > array_to_be_sorted [j] then
            Begin
            dummy := array_to_be_sorted [j-1];
            array_to_be_sorted [j-1] := array_to_be_sorted [j];
            array_to_be_sorted [j] := dummy
            End
         End;
         biggest := array_to_be_sorted[n_values];
         smallest := array_to_be_sorted[1];
      End;

   Begin {plot data points}
   hires;
   hirescolor(yellow);
   If not parametric then
      Begin
      If x_axis_var in [1..43] then
         Begin
         x_name := ivnames[x_axis_var];
         x_units := ivunits[x_axis_var];
         End
      Else if x_axis_var = 44 then
         Begin
         x_name := 'I.Quan';
         x_units := comp_dat.industry_units;
         End
      Else if x_axis_var = 45 then
         Begin
         x_name := 'P.Quan';
         x_units := comp_dat.product_units;
         End;
      y_name := vnames[y_axis_var];
      End
   Else
      Begin
      x_name := vnames[x_axis_var];
      y_name := vnames[y_axis_var];
      End;
   Gotoxy(25,1);
   if parametric then write (y_name,' ',vunits[y_axis_var],' ',Chr(24),' versus ',x_name,' ',vunits[x_axis_var],' ',chr(26))
   else write (y_name,' ',vunits[y_axis_var],' ',chr(24),' versus ',x_name,' ',x_units,' ',chr(26));
   draw(66,1,68,179,1);
   draw(68,179,639,179,1);
   dot_density := 4;
   sort (data_x,biggest_x,smallest_x);
   scaling_factor_x := Abs(biggest_x - smallest_x) / (max_x - 68);
   sort (data_y,biggest_y,smallest_y);
   scaling_factor_y := Abs(biggest_y - smallest_y) / (max_y - 20);
   zero_based := biggest_y / (max_y - 20);
   If (scaling_factor_x = 0) and (scaling_factor_y = 0) then plot_error := true
   Else plot_error := false;
   delta_x := (biggest_x - smallest_x) / 6.0;
   delta_y := biggest_y / 6.0;
   If not plot_error then
   Begin
   If scaling_factor_y = 0 then
      Begin
      Draw(64,104,639,104,1);
      Gotoxy(1,13);
      Str(data_y[1],temp_str);
      Trim_Real(1,temp_str);
      Write(temp_str);
      For i := 1 to 6 do
         Begin
         If i = 6 then l := 639
         Else l := 68 + Trunc(delta_x * i / scaling_factor_x);
         draw(l,176,l,182,1);
         End;
      End
   Else if scaling_factor_x = 0 then
      Begin
      Draw(560,179,560,1,1);
      Gotoxy(70,25);
      Str(data_x[1],temp_str);
      Trim_Real(2,temp_str);
      Write(temp_str);
      For i := 1 to 6 do
         Begin
         If i = 6 then l := 1
         Else l := 179 - Trunc(delta_y * i / zero_based);
         draw(64,l,70,l,1);
         End;
      End
   Else
      Begin
      For i := 1 to 6 do
         Begin
         If i = 6 then l := 639
         Else l := 68 + Trunc(delta_x * i / scaling_factor_x);
         draw(l,176,l,182,1);
         End;
      for i := 1 to n_values do data_x[i] := (data_x[i]/scaling_factor_x)-(smallest_x/scaling_factor_x);
      For i := 1 to 6 do
         Begin
         If i = 6 then l := 1
         Else l := 179 - Trunc(delta_y * i / zero_based);
         draw(64,l,70,l,1);
         End;
      for i := 1 to n_values do data_y[i] := data_y[i] / zero_based;
      for i := 1 to n_values do
         Begin
         plot (trunc(68 + data_x[i]),trunc(max_y-20-data_y[i]),1);
         if i <> 1 then
            Begin
            slope := (data_y[i-1] - data_y[i]) / (data_x[i-1] - data_x[i]);
            j := data_y[i-1];
            k := data_x[i-1];
            while (j < data_y[i]) and (slope < 0) do
               Begin
               plot (trunc(68 + k),trunc(max_y-20-j),1);
               k := k - sqrt((dot_density*dot_density)/(1+slope*slope));
               j := j - sqrt((dot_density*dot_density)/(1+slope*slope))*slope;
               End;
            while (j > data_y[i]) and (slope > 0) do
               Begin
               plot (trunc(68 + k),trunc(max_y-20-j),1);
               k := k - sqrt((dot_density*dot_density)/(1+slope*slope));
               j := j - sqrt((dot_density*dot_density)/(1+slope*slope))*slope;
               End;
            while (j > data_y[i]) and (slope < 0) do
               Begin
               plot (trunc(68 + k),trunc(max_y-20-j),1);
               k := k + sqrt((dot_density*dot_density)/(1+slope*slope));
               j := j + sqrt((dot_density*dot_density)/(1+slope*slope))*slope;
               End;
            while (j < data_y[i]) and (slope > 0) do
               Begin
               plot (trunc(68 + k),trunc(max_y-20-j),1);
               k := k + sqrt((dot_density*dot_density)/(1+slope*slope));
               j := j + sqrt((dot_density*dot_density)/(1+slope*slope))*slope;
               End;
            End;
         End;
      End;
   If (not plot_error) and (not (scaling_factor_y = 0.0)) then
   For l := 0 to 6 do
      Begin
      temp := delta_y * l;
      Str(temp,temp_str);
      Trim_Real(2,temp_str);
      If l = 6 then Gotoxy(1,1)
      Else Gotoxy(1,23-Trunc(delta_y * l / zero_based / 8));
      Write(temp_str);
      End;
   If (not plot_error) and (not (scaling_factor_x = 0.0)) then
      Begin
      gotoxy (1,24);
      For l := 0 to 6 do
         Begin
         temp := smallest_x + delta_x * l;
         Str(temp,temp_str);
         Trim_Real(2,temp_str);
         If l = 0 then write(temp_str)
         Else write (' ':4,temp_str);
         End;
      End;
   End
   Else writeln('ERROR**** CAN NOT PLOT REQUESTED DATA...PLOT MEANINGLESS');
   repeat until keypressed;
   end;

Begin {plot the results}
more_plots := false;
repeat
Gotoxy(1,18);
writeln ('Do you wish to plot:');
If ivindex in [1..43] then y_name := ivnames[ivindex]
Else if ivindex = 44 then y_name := 'I.Quan'
Else if ivindex = 45 then y_name := 'P.Quan';
writeln ('                    1) ',y_name,' versus any dependent variable.');
writeln ('                    2) One dependent variable against another.');
   Repeat
   Ask_Question(false,'                    Enter 1 or 2: ');
   response := Read_Keyboard(57,['1','2']);
   until response in ['1','2'];
Display_dep_var_names_and_ID;
if response = '1' then
   Begin
   parametric := false;
   x_axis_var := ivindex;
      repeat
      Ask_Question(false,'Enter y-axis variable: ');
      get_number (58,integer_number,rdum,y_axis_var);
      until y_axis_var in [1..23];
   end
else
   Begin
   parametric := true;
      repeat
      Ask_Question(false,'Enter the number of the y-axis variable: ');
      get_number (59,integer_number,rdum,y_axis_var);
      until y_axis_var in [1..23];
      repeat
      Ask_Question(false,'Enter the number of the x-axis variable: ');
      get_number (60,integer_number,rdum,x_axis_var);
      until x_axis_var in [1..23];
   End;
for i := 1 to n_values do data_y [i]:= table [1+y_axis_var,i];
for i := 1 to n_values do
if not parametric then data_x [i] := table [1,i]
else data_x [i] := table [1 + x_axis_var,i];
Set_Window(1,1,80,25,false); Clrscr;
Plot_data_points;
textmode;
Clear_The_Screen;
Ask_Question(false,'Do you wish to make another plot (Y/N) ? Y');
user_response := Read_Keyboard(61,['n','N','y','Y',^M]);
if not (user_response in ['N','n']) then more_plots := true
else more_plots := false;
until not more_plots;
End;