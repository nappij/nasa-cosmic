      LOGICAL FUNCTION GETDEF(LINE,ISYM)
C
CDM   This routine translates a line into a symbol definition
CDM
CDM   Programmer - Jon Vavrus   3 SEP 1981
CDM   Revised    - Jon Vavrus   4 MAY 1982 (non-advanced video VT100's)
CDM   Revised    - Jon Vavrus  18 AUG 1982 (bigger arrays)
CDM   Revised    - Jon Vavrus   9 SEP 1982
CDM   Revised    - Jon Vavrus  28 MAY 1983
CDM   Revised    - Jon Vavrus  17 AUG 1983
CM
CM         The routine is called with the line to be translated in the
CM    character variable LINE.  The number of the symbol definition is
CM    passed as ISYM.
C
C***   CALLED ROUTINES
C
CC    PRSCOM  Parses a command string
C
C***   COMMON AREAS
C
CS    CHARS   Used to pass character variables; contains LINES a character
CS            array of the output lines, and SRCHBF the search buffer, and
CS            CRLF which contains <CR><LF>, and REVVID + REGVID which are
CS            the VT100 control sequences to set/unset reverse video
C
CS    DOITNM  Contains information transferred from the main program:
CS                 INCHAN - input channel of the terminal
CS                 TIME   - scrolling speed in -10000000*seconds/line
CS                 SBFFLG - flag indicating whether there is a string
CS                          in the search buffer
CS                 DIRECT - flag for reverse (-1 for reverse, else 1)
CS                 EBK    - EBK of input file
CS                 SBFLEN - length of string(s) in search buffer(s)
CS                 RECBLK - number of bytes used per block in FIX-BLK files
CS                 RANGE  - beginning and ending block numbers and pointers
CS                          of the print range
CS                 VT100  - flag set .TRUE. if terminal is VT100.
CS                 LRL    - length of the longest record in input file.
CS                 LENLMT - maximum output length (if <0 then WRAP set)
CS                 PAGEND - line number of last line output to screen
CS                 PAGLEN - number of lines per page
CS                 COMLIN - line number for command input (bottom of screen)
CS                 VT100A - flag set .TRUE. if VT100 has advanced video option
C
CS    INPUTC  Contains the input character buffer INLINE and the defined
CS            symbols SYMS and the definition search buffers DEFBUF
C
CS    INPUTN  Contains the input character buffer length LENSAV, and the
CS            symbol definitions DEFS, the number of such definitions
CS            (NDEFS), the definition flags DEFFLG, and the definition
CS            numbers NUDMEF
C
CS    PRSCHR  Contains the current symbol's search buffers (CURBUF)
C
CS    PRSNUM  Contains the current symbol's definitions (CUR), flags
CS            (CURFLG), and associated numbers (NUMCUR)
C
      CHARACTER*(*) LINE
      CHARACTER*132 LINES(600)
      CHARACTER*128 INLINE
      CHARACTER*30 DEFBUF(10,10,60),SRCHBF(10),HLDBUF(10),CURBUF(10,10)
      CHARACTER*4 REVVID,REGVID
      CHARACTER*2 CRLF
      CHARACTER*1 SYMS(60)
      REAL*4 NUMDEF(10,60),NUMCUR(10)
      INTEGER*4 INCHAN,TIME,EBK,RANGE(2,2),PAGEND
      INTEGER*2 DIRECT,SBFLEN(10),RECBLK,DEFS(11,10,60),LENLMT,PAGLEN,
     1          LENSAV,HLDLEN(10),CUR(11,10),COMLIN
      LOGICAL*1 SBFFLG,VT100,DEFFLG(3,10,60),HLDFLG,CURFLG(3,10),MINFLG,
     1          NUMFLG,VT100A,RESULT

      COMMON /CHARS/LINES,SRCHBF,CRLF,REVVID,REGVID
      COMMON /DOITNM/INCHAN,TIME,SBFFLG,DIRECT,EBK,SBFLEN,RECBLK,RANGE,
     1               VT100,LRL,LENLMT,PAGEND,PAGLEN,COMLIN,VT100A
      COMMON /INPUTC/INLINE,SYMS,DEFBUF
      COMMON /INPUTN/LENSAV,DEFS,NDEFS,DEFFLG,NUMDEF
      COMMON /PRSNUM/CUR,NUMCUR,CURFLG
      COMMON /PRSCHR/CURBUF

      RESULT = .TRUE.
C
C***   Store the current definition in case it is recursive
C
      DO FOR JJ=1,10
       CUR(1,JJ) = DEFS(1,JJ,ISYM)
       UNDO IF (CUR(1,JJ) .EQ. 0)
       NUMCUR(JJ) = NUMDEF(JJ,ISYM)
       CURFLG(1,JJ) = DEFFLG(1,JJ,ISYM)
       CURFLG(2,JJ) = DEFFLG(2,JJ,ISYM)
       CURFLG(3,JJ) = DEFFLG(3,JJ,ISYM)
       DO FOR I=1,10
        CUR(1+I,JJ) = DEFS(1+I,JJ,ISYM)
        UNDO IF (CUR(1+I,JJ) .EQ. 0)
        CURBUF(I,JJ) = DEFBUF(I,JJ,ISYM)
       END DO FOR
      END DO FOR
      NCOM = 1
C
C***   Save search stuff
C
      DO FOR JJ=1,10
       HLDLEN(JJ) = SBFLEN(JJ)
       HLDBUF(JJ) = SRCHBF(JJ)
       UNDO IF (SBFLEN(JJ) .EQ. 0)
      END DO FOR
      HLDFLG = SBFFLG
      SBFFLG = .FALSE.
      LENBUF = LEN(LINE)
      DO FOREVER
C
C***   Parse out a command
C
       CALL PRSCOM(LINE,LENBUF,ICOM,NUMFLG,ANUMB,MINFLG,NCOM,ISYM)
       UNDO IF (NCOM .GT. 10)
       IF (ICOM .EQ. 0 .AND. LENBUF .GT. 0)
         RESULT = .FALSE.
         UNDO
       ENDIF
       DEFS(1,NCOM,ISYM) = ICOM
       UNDO IF (ICOM .EQ. 0)
       DEFFLG(1,NCOM,ISYM) = NUMFLG
       NUMDEF(NCOM,ISYM) = ANUMB
       DEFFLG(2,NCOM,ISYM) = MINFLG
C
C***   Search stuff if command is ^
C
       IF (DEFS(1,NCOM,ISYM) .EQ. 3)
         DO FOR JJ=1,10
          DEFBUF(JJ,NCOM,ISYM) = SRCHBF(JJ)
          DEFS(1+JJ,NCOM,ISYM) = SBFLEN(JJ)
         END DO FOR
         DEFFLG(3,NCOM,ISYM) = SBFFLG
       ELSE
         DEFFLG(3,NCOM,ISYM) = .FALSE.
       ENDIF
       NCOM = NCOM + 1
      END DO FOREVER
C
C***   Restore search stuff
C
      DO FOR JJ=1,10
       SBFLEN(JJ) = HLDLEN(JJ)
       SRCHBF(JJ) = HLDBUF(JJ)
      END DO FOR
      SBFFLG = HLDFLG
      GETDEF = RESULT
      RETURN
      END
