      SUBROUTINE LINCON(START)
CDM   This subroutine converts a buffer full of data into output lines in
CDM   the output arrays.
CDM
CDM   Programmer - Jon Vavrus  12 NOV 1980
CDM   Revised    - Jon Vavrus  13 MAY 1981
CDM   Revised    - Jon Vavrus  30 JUL 1981 (change CCLINE usage)
CDM   Revised    - Jon Vavrus  26 AUG 1981
CDM   Revised    - Jon Vavrus   4 MAY 1982 (non-advanced video VT100's)
CDM   Revised    - Jon Vavrus  18 AUG 1982 (bigger arrays)
CDM   Revised    - Jon Vavrus  12 JAN 1983
CM
CM         The conversion is done one line per record with blank lines
CM    being inserted to take care of FORTRAN carriage-control (which is
CM    then stripped off the record)(+ carriage control is ignored), and
CM    printer form-feeds (other printer control sequences are ignored).
CM
CM         If START is set to .TRUE. in the call, then it is assumed that
CM    the buffer is completely new, and bears no relationship to the current
CM    contents of the output arrays, thus the current contents of the arrays
CM    are disregarded and written over.  If START is set to .FALSE. in the
CM    call, the buffer is assumed to be full of data which should immediately
CM    follows the information currently in the output arrays.  It is also
CM    assumed (if START is .FALSE.) that the buffer pointer (PBUF) is
CM    pointing at the correct byte.
C
C***   CALLED ROUTINES
C
CC    INTASC  Converts a string of bytes into a character variable.
CC    SFTLIN  Shifts the lines in the output arrays to free up space for
CC            more lines to be converted.
C
C***   COMMON AREAS
C
CS    CHARS   Contains the character array containing the actual output lines.
C
CS    DOITNM  Contains information transferred from the main program:
CS                 INCHAN - input channel of the terminal
CS                 TIME   - scrolling speed in -10000000*seconds/line
CS                 SBFFLG - flag indicating whether there is a string
CS                          in the search buffer
CS                 DIRECT - flag for reverse (-1 for reverse, else 1)
CS                 EBK    - EBK of input file
CS                 SBFLEN - length(s) of string(s) in search buffer(s)
CS                 RECBLK - number of bytes used per block in FIX-BLK files
CS                 RANGE  - beginning and ending block numbers and pointers
CS                          of the print range
CS                 VT100  - flag set .TRUE. if terminal is VT100.
CS                 LRL    - length of the longest record in input file.
CS                 LENLMT - maximum output length (if <0 then WRAP set)
CS                 PAGEND - line number of last line output to screen
CS                 PAGLEN - number of lines per page
CS                 COMLIN - line number for command input (bottom of screen)
CS                 VT100A - flag set .TRUE. if VT100 has advanced video option
C
CS    LNCN    Contains output arrays, and file pointers and information:
CS                 LINLEN - array of output line lengths
CS                 LINEP  - top of screen line (or last line output by
CS                          backward scroll)
CS                 NLINES - number of lines in arrays
CS                 BUFFER - array of unconverted data
CS                 PBUF   - current position in BUFFER
CS                 NBUF   - number of bytes in BUFFER
CS                 BLK    - next block in file
CS                 FSZ    - record length for FIX files, or FSZ for VFC files
CS                 IFSZ   - word extended record length for FIX files
CS                 RFM    - files RFM
CS                 RAT    - files RAT (1=CR,2=FTN,3=PRN,4=none,<0=BLK set)
CS                 SBLK   - starting block of current batch of output lines
CS                 CCLINE - array containing pointer to where the line's
CS                          record starts in the file (CCLINE(1,x) = block
CS                          #, CCLINE(2,x) = byte number in block).  If
CS                          CCLINE(1,x) = 0 then it is a carriage control
CS                          line.
CS                 LBLK   - last block processed by LINCON
CS                 LPBUF  - last PBUF value processed by LINCON
C
      CHARACTER*132 LINES(600)
      INTEGER*4 RFM,RAT,FSZ,BLK,PBUF,PBSAVE,SBLK,CCLINE(2,600),
     1          INCHAN,TIME,RANGE(2,2),EBK,PAGEND,BUFDSC(2)
      INTEGER*2 LINLEN(600),DIRECT,SBFLEN(10),RECBLK,PAGLEN,LENLMT,
     1          COMLIN
      LOGICAL*1 BUFFER(3750),START,SBFFLG,VT100,VT100A
      COMMON /DOITNM/INCHAN,TIME,SBFFLG,DIRECT,EBK,SBFLEN,RECBLK,RANGE,
     1               VT100,LRL,LENLMT,PAGEND,PAGLEN,COMLIN,VT100A
      COMMON /LNCN/LINLEN,LINEP,NLINES,BUFFER,PBUF,NBUF,BLK,FSZ,IFSZ,
     1             RFM,RAT,SBLK,CCLINE,LBLK,LPBUF
      COMMON /CHARS/LINES
C
C***   Calculate start position if this is a new block
C
      IF (START)
        NLINES = 0
        LINEP = 1
        LPBUF = 0
        LBLK = SBLK
        IF (RAT .GT. 0)
          IF (RFM .EQ. 1)
            PBUF = IFSZ*(512*(SBLK - 1)/IFSZ + 1)
            PBUF = LIB$EXTZV(0,9,PBUF) + 1
            IF (PBUF .EQ. (IFSZ + 1)) PBUF = 1
          ELSE
            PBUF = 1
            DO FOREVER
             PBUF = PBUF + 1
             CYCLE IF (BUFFER(PBUF) .NE. 0)
             I = PBUF + LIB$EXTZV(0,8,BUFFER(PBUF-1)) + 2
             IF (BUFFER(PBUF-1)) I = I + 1
             UNDO IF (BUFFER(I) .EQ. 0)
            END DO FOREVER
            PBUF = PBUF - 1
          ENDIF
        ELSE
          PBUF = 1
        ENDIF
      ENDIF
C
C***   Check for either FORTRAN or printer carriage control
C
C***   FORTRAN
C
20    DO FOREVER
       EXECUTE (NEW_LINE)
       IF (RAT .EQ. 2 .OR. RAT .EQ. -2)
         IF (RFM .EQ. 1)
           I = BUFFER(PBUF)
         ELSE
           IF (BUFFER(PBUF) .EQ. FSZ)
             I = 0
           ELSE
             I = BUFFER(PBUF+FSZ+2)
           ENDIF
         ENDIF
         IF (I .EQ. '30'X)
C
C***   30 octal is an ASCII 0
C
           EXECUTE (INSERT_BLANK_LINE)
         ELSE
           IF (I .EQ. '31'X)
C
C***   31 octal is an ASCII 1
C
             EXECUTE (INSERT_BLANK_LINE)
             EXECUTE (INSERT_BLANK_LINE)
           ENDIF
         ENDIF
       ELSE
         IF (RAT .EQ. 3 .OR. RAT .EQ. -3)
C
C***   Printer pre-line line feeds
C
           IF (LIB$EXTZV(7,1,BUFFER(PBUF+2)) .EQ. 0)
             I = LIB$EXTZV(0,7,BUFFER(PBUF+2)) - 1
             IF (I .NE. 0)
               DO FOR J=1,I
                EXECUTE (INSERT_BLANK_LINE)
               END DO FOR
             ENDIF
             PBSAVE = PBUF + 3
           ENDIF
         ENDIF
       ENDIF
C
C***   Extract records into lines
C
       IF (RFM .EQ. 1)
C
C***   Fixed length records
C
         EXECUTE (SET_CCLINE)
         IF (RAT .EQ. 2 .OR. RAT .EQ. -2)
           LENGTH = FSZ - 1
           PBUF = PBUF + 1
         ELSE
           LENGTH = FSZ
         ENDIF
         I = PBUF
         EXECUTE (CONVERT_TO_LINES)
         PBUF = PBUF + LENGTH
         IF (FSZ) PBUF = PBUF + 1
         IF ((PBUF + IFSZ - 1) .GT. NBUF)
           EXECUTE (STORE_REMAINDER)
         ENDIF
       ELSE
C
C***   Variable length records
C
         EXECUTE (SET_CCLINE)
         IF (RAT .EQ. 2 .OR. RAT .EQ. -2)
           LENGTH = LIB$EXTZV(0,8,BUFFER(PBUF)) - 1 - FSZ
           I = PBUF + 3 + FSZ
         ELSE
           LENGTH = LIB$EXTZV(0,8,BUFFER(PBUF)) - FSZ
           I = PBUF + 2 + FSZ
         ENDIF
         IF (LENGTH .GT. 0)
           EXECUTE (CONVERT_TO_LINES)
           IF (BUFFER(PBUF))
             PBUF = I + LENGTH + 1
           ELSE
             PBUF = I + LENGTH
           ENDIF
         ELSE
           IF (LENGTH .EQ. 0 .AND. (RAT .EQ. 2 .OR. RAT .EQ. -2))
     1         PBUF = PBUF + 2
           PBUF = PBUF + 2 + FSZ
           IF (FSZ) PBUF = PBUF + 1
           LINLEN(NLINES) = 1
           LINES(NLINES) = ' '
         ENDIF
C
C***   Printer post-line line feeds
C
         IF (RAT .EQ. 3 .OR. RAT .EQ. -3)
           IF (LIB$EXTZV(7,1,BUFFER(PBSAVE)) .EQ. 0)
             I = LIB$EXTZV(0,7,BUFFER(PBSAVE)) - 1
             IF (I .GT. 0)
               EXECUTE (NEW_LINE)
               DO FOR J=1,I
                EXECUTE (INSERT_BLANK_LINE)
               END DO FOR
               NLINES = NLINES - 1
             ENDIF
           ENDIF
         ENDIF
         IF ((LIB$EXTZV(0,8,BUFFER(PBUF)) + PBUF + 1) .GT. NBUF)
           EXECUTE (STORE_REMAINDER)
         ENDIF
       ENDIF
      END DO FOREVER
C
C******************************************************************************
C***********************   HERE FOLLOW THE PROCEDURES   ***********************
C******************************************************************************
C
      PROCEDURE (CONVERT_TO_LINES)
CP    This procedure converts the LENGTH bytes in BUFFER into lines in LINES
CP    (starting at NLINES).  It takes into account form feeds (generate 2
CP    blank lines) and line feeds.
C
C***   Construct descriptor
C
        BUFDSC(1) = LENGTH
        BUFDSC(2) = %LOC(BUFFER(I))
        J = I
C
C***   Split string
C
        DO FOREVER
         IFF = LIB$LOCC(CHAR(12),BUFDSC)
         ILF = LIB$LOCC(CHAR(10),BUFDSC)
         IF (ILF .EQ. 0 .AND. IFF .EQ. 0)
           ILEN = BUFDSC(1)
           IICHAR = ILEN
         ELSE
           IF ((ILF .LT. IFF .AND. ILF .NE. 0) .OR. IFF .EQ. 0)
C
C===   Line feed first
C
             ILEN = ILF - 1
             IICHAR = ILF
C
C---   Get rid of <CR>
C
             IF (BUFFER(J+ILEN-1) .EQ. 13) ILEN = ILEN - 1
           ELSE
C
C===   FF first
C
             CCLINE(1,NLINES+1) = CCLINE(1,NLINES)
             CCLINE(2,NLINES+1) = CCLINE(2,NLINES)
             EXECUTE (INSERT_BLANK_LINE)
             CCLINE(1,NLINES+1) = CCLINE(1,NLINES)
             CCLINE(2,NLINES+1) = CCLINE(2,NLINES)
             EXECUTE (INSERT_BLANK_LINE)
             ILEN = IFF - 1
             IICHAR = IFF
           ENDIF
         ENDIF
         IF (ILEN .GT. 132) ILEN = 132
         BUFDSC(1) = BUFDSC(1) - IICHAR
         BUFDSC(2) = BUFDSC(2) + IICHAR
         IF ((J + IICHAR + 1) .LT. (I + LENGTH))
C
C===   Not end of record
C
           CCLINE(1,NLINES+1) = CCLINE(1,NLINES)
           CCLINE(2,NLINES+1) = CCLINE(2,NLINES)
           CCLINE(1,NLINES) = 0
           EXECUTE (NEW_LINE)
           IF (ILEN .EQ. 0)
             LINES(NLINES-1) = ' '
             LINLEN(NLINES-1) = 1
           ELSE
             CALL INTASC(ILEN,BUFFER(J),LINES(NLINES-1))
             LINLEN(NLINES-1) = ILEN
           ENDIF
         ELSE
C
C===   End of record
C
           IF (ILEN .EQ. 0)
             LINES(NLINES) = ' '
             LINLEN(NLINES) = 1
           ELSE
             CALL INTASC(ILEN,BUFFER(J),LINES(NLINES))
             LINLEN(NLINES) = ILEN
           ENDIF
           IF (ABS(RAT) .NE. 4 .AND. ILF .NE. 0 .AND. IFF .EQ. 0)
             CCLINE(1,NLINES+1) = CCLINE(1,NLINES)
             CCLINE(2,NLINES+1) = CCLINE(2,NLINES)
             CCLINE(1,NLINES) = 0
             EXECUTE (NEW_LINE)
             LINES(NLINES) = ' '
             LINLEN(NLINES) = 1
           ENDIF
         ENDIF
         J = J + IICHAR
         UNDO IF ((J + 1) .GE. (I + LENGTH))
        END DO FOREVER
      END PROCEDURE
      PROCEDURE (INSERT_BLANK_LINE)
CP    This procedure inserts a blank line of length one character into the
CP    proper arrays.
        LINLEN(NLINES) = 1
        LINES(NLINES) = ' '
        CCLINE(1,NLINES) = 0
        EXECUTE (NEW_LINE)
      END PROCEDURE
      PROCEDURE (NEW_LINE)
CP    This procedure takes care of shifting the translated lines in the
CP    arrays to make more room.
        NLINES = NLINES + 1
        IF (NLINES .EQ. 600)
          IF (START)
C
C***   START = .TRUE., therefore we should throw away the rest of the blocks
C***   instead of trying to shift.
C
            DO FOR II=600,1,-1
C
C===   Find out which block we are in
C
             IF (CCLINE(1,II) .NE. 0)
               IIBLK = CCLINE(1,II) - 1
C
C===   Move to previous block
C
               DO FOR JJ=II,1,-1
                IF (CCLINE(1,JJ) .EQ. IIBLK)
C
C===   Throw away rest of blocks
C
                  NLINES = JJ - 1
                  NBUF = RECBLK*IIBLK
                  PBUF = RECBLK*(IIBLK - 1) + CCLINE(2,JJ)
C
C===   Done so return
C
                  EXECUTE (STORE_REMAINDER)
                ENDIF
               END DO FOR
             ENDIF
            END DO FOR
          ELSE
            CALL SFTLIN(LINES)
          ENDIF
        ENDIF
      END PROCEDURE
      PROCEDURE (SET_CCLINE)
CP    This procedure sets the block and pointer values in the array CCLINE.
C
C***   First set up proper block number and byte count
C
        J = PBUF + LPBUF
        CCLINE(1,NLINES) = LBLK + J/RECBLK
C
C***   Get byte offset
C
        IF (RECBLK .EQ. 512) THEN
          CCLINE(2,NLINES) = LIB$EXTZV(0,9,J)
        ELSE
          CCLINE(2,NLINES) = J - RECBLK*(J/RECBLK)
        ENDIF
        IF (J .NE. 0 .AND. CCLINE(2,NLINES) .EQ. 0)
     1      CCLINE(1,NLINES) = CCLINE(1,NLINES) - 1
        IF (CCLINE(2,NLINES) .EQ. 0) CCLINE(2,NLINES) = RECBLK
      END PROCEDURE
      PROCEDURE (STORE_REMAINDER)
CP    This procedure moves the partial record at the end of BUFFER to
CP    the beginning of BUFFER and sets NBUF, and PBUF accordingly.
        DO FOR I=PBUF,NBUF
         BUFFER(I-PBUF+1) = BUFFER(I)
        END DO FOR
        NBUF = NBUF - PBUF + 1
        I = PBUF + LPBUF
        IF (RECBLK .EQ. 512)
          LPBUF = LIB$EXTZV(0,9,I)
        ELSE
          LPBUF = PBUF - RECBLK*(I/RECBLK)
        ENDIF
        IF (LPBUF .EQ. 0) LPBUF = RECBLK
        LPBUF = LPBUF - 1
        PBUF = 1
        DO FOR I=NLINES,1,-1
         IF (CCLINE(1,I) .NE. 0)
           LBLK = CCLINE(1,I)
           IF (LPBUF .EQ. 0) LBLK = LBLK + 1
           UNDO
         ENDIF
        END DO FOR
        RETURN
      END PROCEDURE
      END
