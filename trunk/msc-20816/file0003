      PROGRAM ARIES(INPUT,OUTPUT,TAPE5=INPUT,TAPE6=OUTPUT,
     1     FILMPL=0,SCOUTV=64,TAPE16=SCOUTV,TAPE4,TAPE7,TAPE8,TAPE9,
     2     TAPE12,TAPE13,TAPE14,TAPE30,TAPE31)
 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*                        ***  A R I E S  ***                      *
*                                                                 *
*           (AIRCRAFT ROLLOUT ITERATIVE ENERGY SIMULATION)        *
*                        ( 3 DOF VERSION)                         *
*                                                                 *
*                    CREATED BY L.J. KINOSHITA                    *
*                                                                 *
*     THIS PROGRAM CAN SIMULATE A 3 DEGREE OF FREEDOM (DOF)       *
*   ROLLOUT OF THE ORBITER VEHICLE AFTER NOSE GEAR TOUCHDOWN.     *
*   ACTUAL BRAKE PRESSURE DATA AND ELEVON,BODY FLAP,RUDDER        *
*   AND SPEEDBRAKE POSITIONS ARE READ INTO THE PROGRAM FROM USER  *
*   TAPE. FOUR INDEPENDENT BRAKE SYSTEMS ARE SIMULATED, WITH      *
*   BRAKE ENERGY USED, MAXIMUM TORQUE AND POWER, AND ROLLOUT      *
*   DISTANCE AS OUTPUTTED SIMULATION VALUES.                      *
*     INITIAL VALUE DATA AND LANDING SURFACE CONDITIONS ARE READ  *
*   IN FROM A DATA FILE WITH THE NAME BD<FLT NO>, IE.             *
*   BD7 FOR STS7. INITIAL DATA READ IN INCLUDES AIR DENSITY       * 
*   SURFACE ROLLING FRICTION COEFFICIENT,VEHICLE LANDING WEIGHT,  *
*   AND VERY IMPORTANTLY THE VALUE OF HEAD AND CROSS WINDS        *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 
      LOGICAL LADB
      CHARACTER*2  DATABK
      CHARACTER*80 PNAME
 
      DIMENSION PR(4),F0(4),F(4),P0(4),P1(4),P1M(4),
     1    BE(4),BEM(4),TQ(4),TQM(4),TQ1(4),YMN(2),RATES(7),
     2    FLAST(4),T(2),PP(20),PQ(2,20),COEF(8),FRC(3),ACC(3)
 
      COMMON/GAUSS/IL,IN,IM,DZ,DXCG,DX,MASS,MU,DDL,DDN,DDM,THETA,
     1   RM,YM,PM,DBRK,FZ,FY,FX,FBTOT,CROWN,SFRIC(2),YCROWN,Y,BETA,YMN
      COMMON/LADB / NTABA(3),LTAB(201),PRFLG(3),RDFLG(3),IUNITA(3)
      COMMON/ TBL / NPTINC(3)
      COMMON/NDRATES/ PBO2V,QCO2V,RBO2V
      COMMON/NASA / DNASA(140000)
      LEVEL 2 , /NASA/
      COMMON /ZZHIST/  HIST(2715)
      COMMON/PNASA/ NPOINT(350)
      COMMON/LNASA/ KUNIT,KPTS,KTAB
 
      REAL K1(4),K2(4),K3(4),MASS,MU,MUMAX,IL,IN,IM
 
      DATA TIME/0.0/,X/0.0/,TMAX/80./,X1/0./,X2/0./,BEF/1.00030/,
     1 PTIME/1.0/,DT/0.04/,DXB/0.0/,FLAGP/0./,
     2 TIME1/0.0/,TIME2/0.0/,FBEGIN/10000.0/,TSHIFT/2.0/,DELT/.040/,
     3 S/2690.0/,B/78.057/,IL/2700885./,IM/6842060./,IN/7412484./
      DATA DZ/17.04/,DXCG/6.35/,DX/7.94/,CROWN/1.00/
      DATA DEGRAD/.01745/
      DATA I/0/,J/0/,IC/0/,NPVAR/47/
 
C   AERO TERMINOLOGY USED IN THIS PROGRAM % 
C    MOMENTS ==>   L% ROLL  ,  M% PITCH  ,  N% YAW
C    RATES   ==>   P% ROLL  ,  Q% PITCH  ,  R% YAW
 
C   INTEGRATION FUNCTION, RKS  -  TRAPEZOIDAL METHOD
 
      RKS(DT,Y,DERIV1,DERIV0)=Y+(DERIV1+DERIV0)*DT/2.0
 
C   PLOTTING FUNCTIONS
      CALL CAMRAV(9)
      CALL SCOUTV
 
C     READ INITIAL ROLLOUT AND LANDING CONDITIONS
C       FROM DATASET
 
      READ(30,70) PNAME,V0,TNGTD,MUMAX,WIND,CWIND,MASS,
     1       YCROWN,DNGTD,Y0,RHO,PDT,IFLAG
 
C   INITIALIZE PROGRAM VARIABLES
       MU=MUMAX
       PTIME=PDT
       VKT=V0
       VX=VKT*1.69
       X=DNGTD
       Y=Y0
       FLTN=MASS
      DO 75 I=1,4
       F0(I)=FBEGIN
       BEM(I)=0.0
       BE(I)=0.0
   75 CONTINUE
 
C  CONVERT KNOTS TO FEET/SEC
 
       WINDF=1.69*WIND
       CWINDF=1.69*CWIND
 
C  PRINT OUTPUT HEADINGS
 
       CALL TITLES(IFLAG)
 
C  WRITE NUMBER OF PLOT VARIABLES ON PLOT TAPE
      WRITE(9) NPVAR,PNAME
C  READ FLIGHT DATA FILE
 
C  INDEX   PP(I) --->  1-LOB4  2-LOB2  3-LIB1  4-LIB3  5-RIB1
C                 6-RIB3  7-ROB4  8-ROB2  9-LOE  10-LIE 11-RIE
C               12-ROE  13-SB  14-RUD  15-BF  16-SPEED  17-ALPHA
C                   18-ROLL RATE  19-PITCH RATE  20-YAW RATE
 
      READ(31)
      READ(31)
      READ(31,END=500) T(1),(PQ(1,I),I=1,20)
      READ(31,END=500) T(2),(PQ(2,I),I=1,20)
      GO TO 171
  170 TIME=TIME+DELT
  171 IF(TIME.GE.T(2))THEN
        T(1)=T(2)
        DO 190 I=1,20
         PQ(1,I)=PQ(2,I)
  190   CONTINUE
        READ(31,END=500) T(2),(PQ(2,I),I=1,20)
      END IF
      DO 191 I=1,20
  191 PP(I)=SLA(TIME,2,T(1),PQ(1,I),0)
 
C  MEASUREMENT ADJUSTMENTS
      PP(13)=PP(13)-12.0
      PP(16)=PP(16)-TSHIFT
      IF(PP(16).LT.0.0) PP(16)=0.0
      PBO2V= PP(18)
      QCO2V= PP(19)
      RBO2V= PP(20)
 
      IF(TIMEN.GT.TMAX) GO TO 500
 
C     BRAKE PRESSURE DATA
 
C    PR(I) ==>> BRAKE PRESSURE INDEX
C    I=1,LOB  2,LIB  3,RIB  4,ROB
 
      PR(1)=(PP(1)+PP(2))/2.0
      PR(2)=(PP(3)+PP(4))/2.0
      PR(3)=(PP(5)+PP(6))/2.0
      PR(4)=(PP(7)+PP(8))/2.0
 
C   DETERMINE MAIN GEAR TIRE ROLLING RADIUS
 
      FTP=(FRC(1)+FRC(2))/4000.0
      IF(TIME.LE.0) FTP=MASS/4000.0
      RR=1.8322-8.021E-3*FTP + 6.4449E-5*(FTP**2)
     *    -5.00287E-7*(FTP**3) + 1.14168E-9*(FTP**4)
 
C  ** CHECK FOR FLAT TIRE - RIM RADIUS IS 13.75/12 **
      IF(RR.LE.1.146) RR=1.146
C
C           ** ITERATIVE FORCE COMPUTATION ROUTINE **
C   F MAY BE COMPARED TO F0 UNTIL WITHIN SPECIFIED ERROR LIMIT -OR-
C   ROUTINE MAY BE EXITED AFTER N ITERATIONS -- 4 ITERATIONS GIVES
C   GOOD CONVERGENCE -- 10 ITERATIONS NEAR PERFECT
      DO 300 I=1,10
       DO 290 J=1,4
 
C    CHECK THAT BRAKE PRESSURE < PRESSURE THRESHHOLD (200 PSI)
 
         IF(PR(J).LE.200.0) THEN
           P0(J)=0.0
           P1(J)=0.0
           F0(J)=0.0
           F(J)=0.0
         ELSE
 
C   COMPUTE ESTIMATED ENERGY RATE (BRAKE POWER)
         P0(J)=F0(J)*VX*1.0E-6
C   ENERGY FUNCTION, K2
         K2(J)=1.2-1.228E-2*BEM(J)+1.16E-4*BEM(J)**2
C   PRESSURE FUNCTION, K3
         K3(J)=1.15*(PR(J)-200.0)/RR
C   ENERGY RATE FUNCTION, K1
         IF(P0(J).GT.5.0) THEN
          P0(J)=5.0
          K1(J)=13.329
         ENDIF
         IF(P0(J).LE.5.0.AND.P0(J).GT.1.0) THEN
          K1(J)=32.454-14.1*P0(J)+3.470*P0(J)**2-0.283*P0(J)**3
         ELSE
          K1(J)=23.1410+11.29*P0(J)-12.89*P0(J)**2
         END IF
C  BRAKING FORCE, F
         F(J)=K1(J)*K2(J)*K3(J)
C  CALCULATE DEVELOPED BRAKE TORQUE
         TQ(J)=F(J)*RR
         TQ1(J)=TQ(J)*1.0E-3
C  CALCULATE MAXIMUM TORQUE
         IF(TQ1(J).GE.TQM(J)) TQM(J)=TQ1(J)
C  CALCULATE BRAKING POWER
         P1(J)=F(J)*VX*1.0E-6
C  CALCULATE MAX POWER
         IF(P1(J).GE.P1M(J)) P1M(J)=P1(J)
         F0(J)=(F0(J)+F(J))/2.0
         END IF
 
  290  CONTINUE
  300 CONTINUE
 
C  TOTAL BRAKE FORCE (4 INDEPENDENT SYSTEMS)
      FBTOT=F(1)+F(2)+F(3)+F(4)
C  DIFFERENTIAL BRAKING CAUSES AN ADDITIONAL YAW MOMENT
      DBRK=(F(1)+F(2))/2.0 - (F(3)+F(4))/2.0
 
C  DETERMINE RELATIVE VELOCITIES, AND BETA
C  HEADWIND POSITVE , CROSSWIND POSITIVE FROM RIGHT
      VA=VX+WINDF
      VC=VY+CWINDF
      VABS=(VA**2+VC**2)**.5
      QBAR=.50*RHO*VABS**2
      BETA=(ASIN(VC/VABS))*57.3
      THETA=(YMN(1)/IN)*DT**2
      ALPHA=PP(17)
 
C  CALCULATE AVERAGE ANGULAR ACCELERATION
 
      IF (TIME.EQ.0.0) GO TO 325
      DDL = (PP(18)-RRATE)*DEGRAD/(TIME-TA)
      DDM = (PP(19)-PRATE)*DEGRAD/(TIME-TA)
      DDN = (PP(20)-YRATE)*DEGRAD/(TIME-TA)
 
  325 TA = TIME
      RRATE = PP(18)
      PRATE = PP(19)
      YRATE = PP(20)
 
C          *** AERO DATA BOOK LOOKUP ROUTINE ***
C  THE DADAC1 SUBROUTINE DETERMINES ALL NECESSARY AERO
C  COEFFICIENTS TO BE USED FOR FORCE AND MOMENT CALCULATIONS.
C  PRE-OPERATIONAL (1L) AERO DESIGN DATA BOOK IS REFERENCED.
 
C  SUBROUTINE LOADADB LOADS THE AERO DATA BOOK TABLES
C  FROM AN EXTERNAL OR LOCAL FILE
C    TRUE ==> LOAD EXTERNAL  %   FALSE ==> LOAD LOCAL
 
      IF(TIME.LE.0.0) CALL LOADADB(.FALSE.)
 
      CALL DADAC1(COEF,ALPHA,BETA,PP(9),PP(10),PP(11),PP(12),
     *             PP(13),PP(15),PP(14),QBAR)
 
C  LIFT FORCE
      FL=QBAR*S*COEF(1)
C  DRAG FORCE
      FD=QBAR*S*COEF(2)
C  PITCHING MOMENT
      PM=QBAR*S*B*COEF(3)
C  SIDE FORCE
      FY=QBAR*S*COEF(4)
C  YAW MOMENT
      YM=QBAR*S*B*COEF(5)
C  ROLLING MOMENT
      RM=QBAR*S*B*COEF(6)
C  NORMAL FORCE
      FZ=QBAR*S*COEF(7)
C  AXIAL FORCE
      FX=QBAR*S*COEF(8)
 
C   ROLLING RESISTANCE
C     IF(V.LT.33.756) MU=MUMAX*V/33.756
 
C   SIDE FRICTION COEFFICIENT LOOKUP
 
      CALL CFRIC(SFRIC,VABS,VY,STEER)
 
C   CALCULATE VEHICLE MOTION
      TIME1=TIME
      DT=TIME1-TIME2
 
C   USE GAUSS-JORDAN REDUCTION SUBROUTINE TO SOLVE
C    THE SOLUTION MATRIX - SOLVED VARIABLES INCLUDE
C     NORMAL FORCES ON THE THREE LANDING GEAR, AND
C      ACCELERATIONS IN X,Y, AND Z
 
C   AT GROUNDSPEEDS LESS THAN 20 KNOTS, AERO EFFECTS
C   HAVE NEGLIGIBLE ROLLOUT INPUT, CAUSING VELOCITIES
C   TO BE LESS THAN ACTUAL.  THIS REQUIRES THE USE OF
C   ACTUAL VELOCITY AS AN INPUT TO CALCULATE THE
C   SIMULATED VELOCITY WHEN LESS THAN 20 KNOTS.
 
      CALL SOLVE(FRC,ACC)
 
C   Z DIRECTION VECTORS
       VZ=RKS(DT,VZ,ACC(1),AZLAST)
       Z=RKS(DT,Z,VZ,VZLAST)
       AZLAST=ACC(1)
       VZLAST=VZ
C   Y DIRECTION VECTORS
       VYY=RKS(DT,VYY,ACC(2),AYLAST)
       VY = VABS*THETA+VYY
       Y=RKS(DT,Y,VY,VYLAST)
       AYLAST=ACC(2)
       VYLAST=VY
C   X DIRECTION VECTORS
       VX=RKS(DT,VX,ACC(3),AXLAST)
       IF (VKT.LT.20.0) THEN
        IF (VKT.GT.PP(16)) VX= PP(16)*1.69+2.00
       ENDIF
       X=RKS(DT,X,VX,VXLAST)
       AXLAST=ACC(3)
       VXLAST=VX
 
       VKT=VX/1.69
       TIME2=TIME1
C  DETERMINE CUMULATIVE BRAKE ENERGIES
C  BEF IS A BRAKE EFFICIENCY FACTOR
       X1=X
       DXB=X1-X2
      DO 350 J=1,4
         BE(J)=BEF*RKS(DXB,BE(J),F(J),FLAST(J))
         BEM(J)=BE(J)*1.0E-6
         FLAST(J)=F(J)
  350 CONTINUE
       X2=X1
 
C  CALCULATE SURFACE RATES
 
      CALL SRATES(DT,RATES,PP)
 
      TIMEN=TIME+TNGTD
       IF (MOD(ICNT,2).EQ.0)
     1 WRITE(9) TIMEN,PR,F,P1,TQ1,BEM,FRC,
     2 X,VKT,ACC(3),Y,VY,YMN(1),FL,FD,FY,FX,FZ,PM,YM,RM,
     3 VKT,PP(16),(PP(I),I=9,15),PP(17)
 
      ICNT=ICNT+1
 
      IF(DT.NE.0.0.AND.FLAGP.EQ.0.) THEN
        PTIME=PTIME+2*DT
        FLAGP=1.
      END IF
      IF(IFLAG.EQ.0) GO TO 499
       IF(PTIME.LT.PDT) GO TO 490
 
      WRITE(13,470) TIMEN,VKT,ACC(3),X,BEM,P1
      WRITE(14,471) TIMEN,PR,F,TQ
      WRITE(7,472) TIMEN,FL,FD,FY,FX,FZ,RM,PM,YM
      WRITE(8,473) TIMEN,PP(13),(PP(I),I=9,12),PP(15),PP(14),ALPHA
      WRITE(4,474) TIMEN,COEF
 
      PTIME=DT
  490 PTIME=PTIME+DT
  499 IF(VX.LE.3.) GO TO 500
      GO TO 170
  500 ENDFILE 9
      WRITE(12,505) V0,X,TIMEN,BEM,P1M,TQM
 
C  CALL OUTPUT SUBROUTINE TO WRITE SIMULATED RESULTS
C  ON LISTING
 
      CALL OUTPUT(IFLAG)
 
   70 FORMAT(A80,10(/),11(F20.7,//),I10)
  470 FORMAT(1X,12F10.2)
  471 FORMAT(1X,F5.2,4F10.2,2X,4F10.2,1X,4F10.2)
  472 FORMAT(1X,F7.2,3X,8F15.1)
  473 FORMAT(10X,9F12.2)
  474 FORMAT(1X,F10.2,10X,8E12.4)
  505 FORMAT(1H ,/,59X,'OUTPUT SUMMARY'
     *,///50X,'INITIAL VELOCITY (KTS)',F12.2,//,50X,
     *'ROLLOUT DISTANCE (FT)',F13.2,//,50X,'TOTAL ROLLOUT TIME (SECS)',
     *F9.2////50X,'BRAKE ENERGY DISSIPATED (M.FT-LBS)',
     *//,50X,'LOB',7X,'LIB',7X,'RIB',7X,'ROB'//,44X,4F10.2,
     *////50X,'MAXIMUM BRAKE POWER (M.FT-LBS/SEC)',//,50X,
     *'LOB',7X,'LIB',7X,'RIB',7X,'ROB'//,44X,4F10.2,
     *////50X,'MAXIMUM BRAKE TORQUE (K.FT-LBS)',//,50X,
     *'LOB',7X,'LIB',7X,'RIB',7X,'ROB'//,44X,4F10.2/)
 
      STOP
      END
 
      FUNCTION SLA(XA,NX,X,Y,I)
 
C   THIS FUNCTION PERFORMS LINEAR INTERPOLATION
      REAL   X(1),Y(1)
      EQUIVALENCE (IDX,DX)
      IF(I.LT.1.OR.I.GT.NX) I=NX/2
      GO TO 10
    5 I=IX
   10 DX=XA-X(I)
      IC=ISIGN(1,IDX)
      IX=I+IC
      IF(IX.LT.1.OR.IX.GT.NX) GO TO 100
      IF(XA.GT.X(IX).OR.IC.LT.0) GO TO 5
      SLA=Y(I)+DX*(Y(IX)-Y(I))/(X(IX)-X(I))
      RETURN
  100 SLA=Y(I)
      RETURN
      END
 
      SUBROUTINE OUTPUT(IFLAG)
       IF(IFLAG.EQ.0) RETURN
      REWIND 4
      REWIND 7
      REWIND 8
      REWIND 12
      REWIND 13
      REWIND 14
      REWIND 30
      CALL WRIT16(30,DATE)
      CALL WRITE(12,DATE)
      CALL WRITE(13,DATE)
      CALL WRITE(14,DATE)
      CALL WRITE(7,DATE)
      CALL WRITE(8,DATE)
      CALL WRITE(4,DATE)
      RETURN
      END
 
      SUBROUTINE TITLES(IFLAG)
       IF(IFLAG.EQ.0) RETURN
 
      WRITE(13,100)
  100 FORMAT(1H ,//,61X,'BRAKE',36X,'BRAKE',/,34X,'ROLLOUT',
     $ 4X,16('*'),'ENERGY',16('*'),2X,17('*'),'POWER',16('*')
     $/,6X,'TIME',7X,'VEL',7X,'ACC',3X,'DISTANCE',
     $ 6X,'LOB',7X,'LIB',7X,'RIB',7X,'ROB',7X,'LOB',7X,'LIB',
     $7X,'RIB',7X,'ROB'/)
      WRITE(14,110)
  110 FORMAT(1H ,/,25X,'BRAKE',38X,'BRAKE',36X,'BRAKE',
     $/,10X,14('*'),'PRESSURE',14('*'),4X,
     $18('*'),'FORCE',15('*'),4X,17('*'),'TORQUE',14('*')
     $,/,2X,'TIME',6X,'LOB',7X,'LIB',7X,'RIB',7X,'ROB',9X,
     $'LOB',7X,'LIB',7X,'RIB',7X,'ROB',8X,'LOB',7X,'LIB',
     $7X,'RIB',7X,'ROB',/)
      WRITE(7,120)
  120 FORMAT(1H ,14X,30('*'),'AERO FORCES',30('*'),4X,14('*'),
     *'AERO MOMENTS',15('*'),//,4X,'TIME',13X,'LIFT',11X,'DRAG',11X,
     *'SIDE',10X,'AXIAL',10X,'NORMAL',9X,'ROLL',10X,'PITCH',
     *11X,'YAW',/)
      WRITE(8,130)
  130 FORMAT(1H ,16X,'SURFACE POSITIONS',
     *//,17X,'TIME',6X,'SPEEDBRAKE',
     *5X,'LOE',9X,'LIE',9X,'RIE',9X,'ROE',5X,'BODY FLAP',5X,
     *'RUDDER',7X,'ALPHA',/)
      WRITE(4,140)
  140 FORMAT(1H ,48X,'LIST OF AERODYNAMIC COEFFICIENTS',//,
     *6X,'TIME',16X,'LIFT',8X,'DRAG',7X,'PITCH M',3X,'SIDE FORCE',
     *2X,'YAW MOMENT',2X,'ROLL MOMENT',1X,'NORM FORCE',
     *1X,'AXIAL FORCE',/)
 
      RETURN
      END
 
      SUBROUTINE WRIT16(NFILE,DATE)
      DIMENSION LINE(8)
      CALL CDATEV(DATE)
      WRITE(16,1000) DATE
      WRITE(6,1000) DATE
 1000 FORMAT(1H1,52X,'CARD IMAGE OF INPUT DATA',///62X,A8//)
 1050 READ(NFILE,1060,END=1090) LINE
      IF(EOF(NFILE).NE.0) GO TO 1090
 1060 FORMAT(7A10,A2)
      WRITE(16,1070) LINE
      WRITE(6,1070) LINE
 1070 FORMAT(29X,8A10)
      GO TO 1050
 1090 WRITE(16,1095)
      WRITE(6,1095)
 1095 FORMAT(//57X,'END OF INPUT DATA')
      REWIND NFILE
      RETURN
      END
 
      SUBROUTINE WRITE(NFILE,DATE)
      DIMENSION LINE(13)
      CALL CDATEV(DATE)
      WRITE(16,1000) DATE
      WRITE(6,1000) DATE
 1000 FORMAT(1H1,52X,'SHUTTLE ROLLOUT SIMULATION',//62X,A8/)
 1050 READ(NFILE,1060,END=1090) LINE
      IF(EOF(NFILE).NE.0) GO TO 1090
 1060 FORMAT(13A10)
      WRITE(16,1070) LINE
      WRITE(6,1070) LINE
 1070 FORMAT(1X,13A10)
      GO TO 1050
 1090 WRITE(16,1095)
      WRITE(6,1095)
 1095 FORMAT(60X,'END OF LISTING')
      REWIND NFILE
      RETURN
      END
 
      SUBROUTINE CFRIC(SFRIC,VABS,VY,STEER)
 
C   THIS SUBROUTINE CALCULATES SLIDING FRICTION
C   COEFFICIENTS. DATA OBTAINED FROM FSL MODEL.
C   STEERING ANGLE IS IN RADIANS, VELOCITY IN FT/SEC
C    SFRIC(1)==> MAIN GEAR    SFRIC(2)==> NOSE GEAR
 
      DIMENSION SFRIC(2),VYS(7),VCP(5),DUM1(5),STR(7),
     *        DUM2(5),CSFM(7,5),CSFN(7,6),VCPS(6)
 
      DATA VCP/0.0000,84.350,168.70,253.05,354.27/
      DATA VCPS/0.0000,39.25,84.350,168.70,253.05,354.27/
      DATA VYS/0.0,2.50,5.00,7.50,10.00,12.50,15.00/
      DATA STR/0.0,.0083,.0395,.0582,.1247,.2576,.5236/
      DATA CSFM/0.0000,0.1645,0.2692,0.3543,0.3646,
     1            0.2713,0.1244,
     2            0.0000,0.1214,0.2142,0.2923,0.3584,
     3            0.3977,0.4100,
     4            0.0000,0.0644,0.1216,0.1716,0.2145,
     5            0.2529,0.2865,
     6            0.0000,0.0437,0.0842,0.1214,0.1555,
     7            0.1864,0.2141,
     8            0.0000,0.0296,0.0573,0.0831,0.1069,
     9            0.1287,0.1486/
      DATA CSFN/0.0000,0.0000,0.0000,0.0000,0.0000,
     1            0.0000,0.0000,
     2            0.0000,0.0217,0.0916,0.1244,0.2211,
     3            0.1946,0.1946,
     4            0.0000,0.0369,0.1554,0.2110,0.3700,
     5            0.3248,0.3248,
     6            0.0000,0.0370,0.1556,0.2114,0.3472,
     7            0.3005,0.3005,
     8            0.0000,0.0369,0.1554,0.2112,0.3142,
     9            0.2801,0.2801,
     *            0.0000,0.0347,0.1408,0.1861,0.2602,
     *            0.2145,0.2145/
 
C  ABSOLUTE VALUE OF VELOCITIES ARE USED
 
      V1=ABS(VY)
      V2=ABS(VABS)
 
      DO 100 I=1,5
  100 DUM1(I)=SLA(V1,7,VYS(1),CSFM(1,I),0)
      DO 200 I=1,6
  200 DUM2(I)=SLA(STEER,7,STR(1),CSFN(1,I),0)
      SFRIC(1)=SLA(V2,5,VCP(1),DUM1(1),0)*SIGN(-1.0,VY)
      SFRIC(2)=SLA(V2,6,VCPS(1),DUM2(1),0)*SIGN(-1.0,VY)
 
      RETURN
      END
 
      SUBROUTINE SOLVE(FRC,ACC)
 
C   THIS SUBROUTINE INITIALIZES ARRAY LOCATIONS FOR
C   MATRIX SOLUTIONS
      DOUBLE PRECISION AA
 
      DIMENSION FRC(3),ACC(3),AA(6,7),YMN(2)
 
      COMMON/GAUSS/IL,IN,IM,DZ,DXCG,DX,MASS,MU,DDL,DDN,DDM,THETA,
     * RM,YM,PM,DBRK,FZ,FY,FX,FBTOT,CROWN,SFRIC(2),YCROWN,Y,BETA,YMN
      REAL IL,IN,IM,MU,MASS
 
C   CHECK FOR RUNWAY CROWN EFFECTS
      IF (Y.GT.0) CROWN=-CROWN
      IF (YCROWN.EQ.0.0) CROWN=0.0
C   SOLVE FOR NORMAL NOSE AND MAIN GEAR FORCES (FRC)
      N=2
      M=1
      NPLUSM=N+M
      DO 15 I=1,N
       DO 10 J=1,NPLUSM
  10   AA(I,J)=0.0
  15  CONTINUE
       FNN    =(-IM*DDM+PM-FZ*DX-FX*DZ-MASS*DXCG)/66.4
       AA(1,1)= 1.0
       AA(1,2)= 1.0
       AA(1,3)=-MASS - FZ - FNN
       AA(2,1)=-11.33
       AA(2,2)= 11.33
       AA(2,3)= IL*DDL-RM-FY*DZ
       CALL GAUSS(AA,N,M,NPLUSM)
       DO 17 MM=1,N
   17  FRC(MM)=AA(MM,NPLUSM)
       FRC(N+1)=FNN
 
       YMN(1)=YM+MU*11.33*(FRC(1)-FRC(2))-DBRK*11.33-
     $      DXCG*MASS*CROWN/100.0-FY*DX
       YMN(2)=DDN*IN
C  SOLVE MATRIX FOR X,Y,Z DECELERATIONS (ACC)
       N=3
       M=1
       NPLUSM=N+M
       DO 25 I=1,N
        DO 20 J=1,NPLUSM
   20   AA(I,J)=0.0
   25  CONTINUE
       AA(1,1)= MASS/32.2
       AA(1,4)=MASS + FZ +(FRC(1)+FRC(2)+FRC(3))
       AA(2,2)= MASS/32.2
       AA(2,4)=FY - MASS*CROWN/100.0
     *  + (FRC(1)+FRC(2)+FRC(3))*(SFRIC(1)*COS(THETA)-
     *       MU*SIGN(-1.,VY)*SIN(THETA))
       AA(3,3)= MASS/32.2
       AA(3,4)= FX - FBTOT +MU*(FRC(1)+FRC(2)+FRC(3))
     $         -ABS(SFRIC(1)*(FRC(1)+FRC(2)+FRC(3))*SIN(THETA))
       CALL GAUSS(AA,N,M,NPLUSM)
       DO 27 MM=1,N
   27  ACC(MM)=AA(MM,NPLUSM)
       RETURN
       END
 
      SUBROUTINE GAUSS(AA,N,M,NPLUSM)
 
C   APPLIED NUMERICAL METHOD, GAUSS-JORDAN REDUCTION
 
C   THIS SUBROUTINE FINDS M SOLUTION VECTORS CORRESPONDING
C   TO A SET OF N SIMULTANEOUS LINEAR EQUATIONS USING THE GAUSS-
C   JORDAN REDUCTION ALGORITHM WITH DIAGONAL PIVOT STRATEGY.
C
      DOUBLE PRECISION AA
      DIMENSION AA(6,7)
 
      EPS=1.0E-20
 
C   BEGIN ELIMINATION PROCEDURE
      DETER = 1.0
      DO 9  K=1,N
 
C   UPDATE THE DETERMINANT VALUE
      DETER=DETER*AA(K,K)
 
C   CHECK FOR PIVOT ELEMENT TOO SMALL
      IF(DABS(AA(K,K)).LE.EPS ) AA(K,K)=EPS
 
C   NORMALIZE THE PIVOT ROW
      KPI= K + 1
      DO 6 J=KPI, NPLUSM
   6  AA(K,J)= AA(K,J)/AA(K,K)
      AA(K,K)=1.
 
C   ELIMINATE K(TH) COLUMN ELEMENTS EXCEPT FOR PIVOT
      DO 9 I=1,N
      IF(I.NE.K.AND.AA(I,K).NE.0) THEN
      DO 8 J=KPI,NPLUSM
   8  AA(I,J) = AA(I,J) - AA(I,K)*AA(K,J)
      AA(I,K) = 0.
      ENDIF
   9  CONTINUE
      RETURN
      END
 
      SUBROUTINE SRATES(DT,RATES,PP)
 
C  THIS SUBROUTINE CALCULATES SURFACE VELOCITIES
 
      DIMENSION RATES(7),PP(20),LAST(7)
      DATA FLAG/0./
 
      DO 25 I=1,7
       IF(FLAG.EQ.0.) THEN
        RATES(I)=0.
       ELSE
        RATES(I) = (PP(I+8)-LAST(I))/DT
       END IF
       LAST(I) = PP(I+8)
   25 CONTINUE
       FLAG = 1.0
 
      RETURN
      END
 
      SUBROUTINE LOADADB(LADB)
 
*   THIS ROUTINE LOADS THE AERO DATA BOOK
 
      LOGICAL LADB
      CHARACTER  DATABK*2,FILE*7
 
      COMMON /LADB   / NTABA(3),LTAB(201),PRFLG(3),RDFLG(3),IUNITA(3)
      COMMON /TBL    / NPTINC(3)
      COMMON /NDRATES/ PBO2V,QCO2V,RBO2V
      COMMON /NASA   / DNASA(140000)
      LEVEL 2,/NASA  /
      COMMON /PNASA  /  NPOINT(350)
      COMMON /LNASA/   KUNIT,KPTS,KTAB
 
      DATA DATABK/'1L'/
 
*           LIST OF AERO DATA BOOK TABLES TO BE LOADED
 
      DATA LTAB/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,
     *22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,
     $44,51,52,53,57,58,59,60,61,62,63,64,65,69,
     $70,71,72,73,74,77,78,80,81,82,83,84,85,86,87,88,89,90,91,
     $92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,
     $ 110,111,112,113,114,115,116,117,118,119,131,134,136,137,138,
     $ 139,141,145,146,147,1,2,3,4,5,6,7,8,
     *9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,35,36,37,38,39,40,1,2,
     *3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,2
     *7,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,
     & 49,54,55,56,57,58,59,60,61,62/
      DATA NLOAD/3/,NTABA/114,29,58/,PRFLG/0.,0.,0./,RDFLG/1.,1.,1./,
     $IUNITA/20,21,22/,NPTINC/0,200,240/
      KUNIT = 20
 
************************************************************************
 
*    DETERMINE THE ADDB FILE 'ADDB1M' OR 'ADDB1L'
 
           REWIND (L"CARD")
           WRITE  (L"CARD",'("ADDB",2A)') DATABK
           REWIND (L"CARD")
           READ   (L"CARD",'(A6)') FILE
 
*          LOAD AERO DATA BOOK TABLES FROM THE TABLES OR MY FILE
 
      IF (LADB) THEN
 
*          LOAD AERO DATA BOOK TABLES
 
           IF (DATABK(1%2).EQ.'1M') THEN
               KPTS     = 85000
               KTAB     = 300
               NTABA(3) = 49
               NPTINC(3)= 250
               CALL PF('ATTACH','TAPE20','O10250A','UN','XX329',
     &                 'NA','IGNR','RC',IRC,'M','R')
               CALL PF('ATTACH','TAPE21','O10249F','UN','XX329',
     &                 'NA','IGNR','RC',IRC,'M','R')
               CALL PF('ATTACH','TAPE22','O10249R','UN','XX329',
     &                 'NA','IGNR','RC',IRC,'M','R')
           ELSEIF (DATABK(1%2).EQ.'1L') THEN
               KPTS     = 140000
               KTAB     = 320
               NTABA(3) = 58
               NPTINC(3)= 240
               CALL PF('ATTACH','TAPE20','AERO482','UN','XX161',
     &                 'NA','IGNR','RC',IRC,'M','R')
               CALL PF('ATTACH','TAPE21','FLEX482','UN','XX161',
     &                 'NA','IGNR','RC',IRC,'M','R')
               CALL PF('ATTACH','TAPE22','RCS482', 'UN','XX161',
     &                 'NA','IGNR','RC',IRC,'M','R')
           ELSE
               WRITE (6,'(3X,"*** DATABK = ",2A)') DATABK
               WRITE (6,'(3X,"*** INCORRECT DATA BOOK SPECIFIED ***")')
           ENDIF
 
C          WRITE (6,'("1",3X,"LOADING DATA BOOK (",2A,")")') DATABK
           CALL LDNTAB(NLOAD,NTABA,LTAB,PRFLG,RDFLG,IUNITA,NPTINC)
 
*  ATTACH THE ADDB FILE
 
           CALL PF('ATTACH','ADDB',FILE(1%6),'NA','IGNR','UP','IGNR',
     &     'RC',IRC,'M','W')
 
*  IF FILE DOES NOT EXIST THEN DEFINE IT
 
           IF (IRC.NE.0) THEN
             CALL PF('DEFINE','ADDB',FILE(1%6),'CT','PU','UP','IGNR',
     &       'RC',IRC,'M','W')
           ENDIF
 
C          WRITE  (6,'(/" WRITING ADDB INTO FILE ==> ",A6)') FILE
           REWIND (L"ADDB")
           WRITE  (L"ADDB") (DNASA(J),J=1,80000)
           WRITE  (L"ADDB") (DNASA(J),J=80001,140000)
           WRITE  (L"ADDB") NPOINT,KUNIT,KPTS,KTAB,LTAB,NLOAD
           WRITE  (L"ADDB") NTABA,NPTINC
      ELSE
 
*      LOAD AERO DATA BOOK TABLES
*      ATTACH THE AERO DATA BOOK TABLES FILE
 
           IF ((DATABK(1%2).EQ.'1M').OR.(DATABK(1%2).EQ.'1L')) THEN
C              WRITE  (6,'(/" READING ADDB FROM FILE ==> ",A6)') FILE
               CALL PF('ATTACH','ADDB',FILE(1%6),'UN','YTT0600',
     &                 'NA','IGNR','RC',IRC,'M','R')
           ELSE
               WRITE (6,'(3X,"*** DATABK = ",2A)') DATABK
               WRITE (6,'(3X,"*** INCORRECT DATA BOOK SPECIFIED ***")')
           ENDIF
 
C          WRITE  (6,'(/" READING ADDB FROM FILE ==> ",A6)') FILE
           REWIND (L"ADDB")
           READ  (L"ADDB") (DNASA(J),J=1,80000)
           READ  (L"ADDB") (DNASA(J),J=80001,140000)
           READ  (L"ADDB") NPOINT,KUNIT,KPTS,KTAB,LTAB,NLOAD
           READ  (L"ADDB") NTABA,NPTINC
      ENDIF
 
      RETURN
      END
 
      SUBROUTINE DADAC1(COEF,ALPHA,BETA,DELOB,DELIB,DERIB,
     $                   DEROB,DSB,DBF,DR,QBAR)
 
*   DADAC1 AND DADAC2 OPERATE TOGETHER TO LOOK UP THE RIGID AND FLEXIBLE
*   BODY AHD STABILITY AXIS COEFFICIENTS IN THE ADDB DIGITIZED DATA FILE
*   FLEXIBLE COEFFICIENTS ARE RETURNED WHEN QBAR>0.
 
      COMMON /ZZHIST/  HIST(2715)
      COMMON/ TBL / NPTINC(3)
      COMMON/NDRATES/ PBO2V,QCO2V,RBO2V
      DIMENSION COEF(8)
 
      DO 10 I=1,2715
   10 HIST(I)=0.0
 
*   DURING ROLLOUT, THESE FOUR VALUES ARE CONSTANT
      DLG=98.0
      HOB=.144
      PHI=0.0
      AMACH=0.25
      KF = NPTINC(2)
      P  = PBO2V
      Q  = QCO2V
      R  = RBO2V
 
*     I
* ----------------------------------------
*     1      LIFT COEFFICIENT
*     2      DRAG COEFFICIENT
*     3      PITCHING MOMENT COEFFICIENT
*     4      SIDE FORCE COEFFICIENT
*     5      YAWING MOMENT COEFFICIENT
*     6      ROLLING MOMENT COEFFICIENT
 
      DO 100 I=1,6
      COEF(I)=0.0
 
         CALL DADAC2(COEF(I),I,ALPHA,BETA,AMACH,DLG,HOB,
     $    DELOB,DELIB,DEROB,DERIB,DSB,DBF,DR,Q,R,P,QBAR,KF,PHI)
 
 
 100  CONTINUE
 
*         <=== NORMAL FORCE AND AXIAL FORCE COEFFICIENTS ===>
 
      COEF(7) =-COEF(1)*COSD(ALPHA)+COEF(2)*SIND(ALPHA)
      COEF(8) =-COEF(2)*COSD(ALPHA)-COEF(1)*SIND(ALPHA)
  300 RETURN
      END
 
      SUBROUTINE DADAC2(COEF,IC,ALPHA,BETA,AMACH,DLG,HOB,DEOL,DEIL,DEOR,
     $DEIR,DSB,DBF,DR,Q,R,P,QBAR,KF,PHI)
 
      IMPLICIT REAL(K)
 
*   THIS FILE HAS BEEN MODIFIED FOR THE PRE-OPS DATA BOOK
 
 
C   USE OF THE FILES CONTAINING ELEVON POSITIONS
C   CORRECTED BY R. PELLEY'S PROGRAM REQUIRES
C   DELETION OF AEROELASTIC ELEVON AND AILERON
C   CORRECTIONS FROM THE COEFFICIENT EXPRESSIONS.
C   THIS VERSION OF DADAC2 HAS THESE CORRECTIONS
C   FOR AEROELASTICITY REMOVED.
 
      INTEGER KF
      CHARACTER *2 DATABK
 
      COMMON/ADDBBK/DATABK
      COMMON/ZZHIST/HIST(2715)
      DATA DATABK/'1L'/
 
 
      DER = (DEOR+DEIR)/2.0
      DEL = (DEOL+DEIL)/2.0
      DEI = (DEIL+DEIR)/2.0
      DEO = (DEOL+DEOR)/2.0
      DE  = (DEL+DER)/2.0
      DAI = (DEIL-DEIR)/2.0
      DAO = (DEOL-DEOR)/2.0
 
 
      IF (DATABK.EQ.'1M') GOTO 1000
 
****    PRE OPERATIONAL (1L) AERO DATA BOOK    ****
 
      GO TO (100,200,300,400,500,600),IC
      CALL GOTOER
 
*        <=== LIFT COEFFICIENT ===>
 
  100 CL     = TLKUP4(HIST(1),1,DSB,ALPHA,AMACH,0.0)
      DCLLG  = TLKUP4(HIST(24),7,ALPHA,DLG,0.0,0.0)
 
      IF (HOB.LT.1.5)  THEN
         DCLGE1  = TLKUP4(HIST(47),13,HOB,ALPHA,DE,0.0)
         DCLBFGE = TLKUP4(HIST(2669),139,HOB,ALPHA,DBF,0.0)
         DCLGE   = DCLGE1 + DCLBFGE
      ELSE
         DCLGE    = 0.0
      ENDIF
 
      DCLEOR = TLKUP4(HIST(70),16,DEOR,ALPHA,AMACH,0.0)
      DCLEIR = TLKUP4(HIST(70),16,DEIR,ALPHA,AMACH,0.0)
      DCLEIL = TLKUP4(HIST(70),16,DEIL,ALPHA,AMACH,0.0)
      DCLEOL = TLKUP4(HIST(70),16,DEOL,ALPHA,AMACH,0.0)
      DCLEI  = TLKUP4(HIST(70),16,DEI,ALPHA,AMACH,0.0)
      DCLEO  = TLKUP4(HIST(70),16,DEO,ALPHA,AMACH,0.0)
      DCLSB  = TLKUP4(HIST(93),25,DSB,ALPHA,AMACH,0.0)
      DCLBF  = TLKUP4(HIST(116),34,DBF,ALPHA,AMACH,0.0)
      KLDE   = TLKUP4(HIST(2577),83,DE,AMACH,0.0,0.0)
      KLDER  = TLKUP4(HIST(2577),83,DER,AMACH,0.0,0.0)
      KLDEL  = TLKUP4(HIST(2577),83,DEL,AMACH,0.0,0.0)
      DCLE   = KLDE*DCLEI+(1.0-KLDE)*DCLEO
      DCLA   = 0.5*(KLDEL*DCLEIL+(1.0-KLDEL)*DCLEOL+KLDER*DCLEIR+
     $(1.0-KLDER)*DCLEOR)-DCLE
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
          COEF = CL+DCLLG+DCLGE+DCLE+DCLSB+DCLBF+DCLA
      ELSE
          CLO  = TLKUP4(HIST(1289),1,25.0,0.0,AMACH,0.0)
          DCLO = TLKUP4(HIST(1312),KF+4,QBAR,AMACH,0.0,0.0)
          YN   = TLKUP4(HIST(1335),KF+6,QBAR,AMACH,0.0,0.0)
          YLSB = 1.0
          YLBF = TLKUP4(HIST(1381),KF+10,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          DCLO = 0.0
          YN   = 1.0
          YLE  = 1.0
          YLSB = 1.0
 
          COEF = CLO+DCLO+YN*(CL-CLO)+DCLLG+DCLGE+DCLE+DCLA+
     *     YLSB*DCLSB+YLBF*DCLBF
      ENDIF
      RETURN
 
*        <=== DRAG COEFFICIENT ===>
 
  200 CD    = TLKUP4(HIST(185),2,DSB,ALPHA,AMACH,0.0)
      DCDLG = TLKUP4(HIST(208),8,ALPHA,DLG,0.0,0.0)
      DCDGE = 0.0
      IF(HOB.LT.1.5) DCDGE=TLKUP4(HIST(231),14,HOB,ALPHA,DE,0.0)
      DCDE  = TLKUP4(HIST(254),17,DE,ALPHA,AMACH,0.0)
      DCDER = TLKUP4(HIST(254),17,DER,ALPHA,AMACH,0.0)
      DCDEL = TLKUP4(HIST(254),17,DEL,ALPHA,AMACH,0.0)
      DCDA  = 0.5*(DCDER+DCDEL)-DCDE
      DCDSB = TLKUP4(HIST(277),26,DSB,ALPHA,AMACH,0.0)
      DCDBF = TLKUP4(HIST(300),35,DBF,ALPHA,AMACH,0.0)
      COEF  = CD+DCDLG+DCDGE+DCDE+DCDSB+DCDBF+DCDA
      RETURN
 
*        <=== PITCHING MOMENT COEFFICIENT ===>
 
  300 CM     = TLKUP4(HIST(369),3,DSB,ALPHA,AMACH,0.0)
      DCMLG  = TLKUP4(HIST(392),9,ALPHA,DLG,0.0,0.0)
 
      IF (HOB.LT.1.5)  THEN
         DCMGE1  = TLKUP4(HIST(415),15,HOB,ALPHA,DE,0.0)
         DCMBFGE = TLKUP4(HIST(2692),141,HOB,ALPHA,DBF,0.0)
         DCMGE   = DCMGE1 + DCMBFGE
      ELSE
         DCMGE  = 0.0
      ENDIF
 
      DCMEOR = TLKUP4(HIST(438),18,DEOR,ALPHA,AMACH,0.0)
      DCMEIR = TLKUP4(HIST(438),18,DEIR,ALPHA,AMACH,0.0)
      DCMEIL = TLKUP4(HIST(438),18,DEIL,ALPHA,AMACH,0.0)
      DCMEOL = TLKUP4(HIST(438),18,DEOL,ALPHA,AMACH,0.0)
      DCMEI  = TLKUP4(HIST(438),18,DEI,ALPHA,AMACH,0.0)
      DCMEO  = TLKUP4(HIST(438),18,DEO,ALPHA,AMACH,0.0)
      DCMSB  = TLKUP4(HIST(461),27,DSB,ALPHA,AMACH,0.0)
      DCMBF  = TLKUP4(HIST(484),36,DBF,ALPHA,AMACH,0.0)
      CMQ    = TLKUP4(HIST(507),40,ALPHA,AMACH,0.0,0.0)
      DCMQ   = TLKUP4(HIST(2485),82,ALPHA,AMACH,0.0,0.0)
      KMDE   = TLKUP4(HIST(2600),84,DE,AMACH,0.0,0.0)
      KMDER  = TLKUP4(HIST(2600),84,DER,AMACH,0.0,0.0)
      KMDEL  = TLKUP4(HIST(2600),84,DEL,AMACH,0.0,0.0)
 
      DCME   = KMDE*DCMEI+(1.0-KMDE)*DCMEO
      DCMA   = 0.5*(KMDEL*DCMEIL+(1.0-KMDEL)*DCMEOL+KMDER*DCMEIR+
     $(1.0-KMDER)*DCMEOR)-DCME
      CMQT   = CMQ+0.5*DCMQ*(((DSB-25.)/75.0)+(DBF/
     &  13.75))
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF(QBAR.LE.0.0) THEN
         COEF = CM+DCMLG+DCMGE+DCME+DCMSB+DCMBF+CMQT*Q+DCMA
      ELSE
         CMO  = TLKUP4(HIST(1404),3,25.0,0.0,AMACH,0.0)
         DCMO = TLKUP4(HIST(1427),KF+5,QBAR,AMACH,0.0,0.0)
         YN   = TLKUP4(HIST(1450),KF+6,QBAR,AMACH,0.0,0.0)
         DXAC = TLKUP4(HIST(1473),KF+7,QBAR,AMACH,0.0,0.0)
         YMSB = 1.0
         YMBF = TLKUP4(HIST(1519),KF+11,QBAR,AMACH,0.0,0.0)
         YMQ  = TLKUP4(HIST(1542),KF+35,QBAR,AMACH,0.0,0.0)
         CLM  = TLKUP4(HIST(1565),1,DSB,ALPHA,AMACH,0.0)
         CDM  = TLKUP4(HIST(1588),2,DSB,ALPHA,AMACH,0.0)
         CNO  = TLKUP4(HIST(1611),1,DSB,0.0,AMACH,0.0)
         AA   = ALPHA*0.017453292
         CN   = CLM*COS(AA)+CDM*SIN(AA)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          DCMO = 0.0
          YN   = 1.0
          YME  = 1.0
          DXAC = 0.0
 
         COEF = CMO+DCMO+YN*((CM-CMO)-(DXAC/100.0)*(CN-CNO))+
     $     DCMLG+DCMGE+YME*(DCME+DCMA)+YMSB*DCMSB+YMBF*DCMBF+YMQ*CMQT*Q
      ENDIF
      RETURN
 
*         <=== SIDE FORCE COEFFICIENT ===>
 
  400 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CY     = TLKUP4(HIST(576),4,ABETA,ALPHA,AMACH,DSB)*SBETA
      DCYBLG = TLKUP4(HIST(599),10,ALPHA,DLG,0.0,0.0)
      DCYBE  = TLKUP4(HIST(622),19,DE,ALPHA,AMACH,0.0)
      CYDA   = TLKUP4(HIST(645),22,DE,ALPHA,AMACH,0.0)
      DCYBSB = TLKUP4(HIST(668),28,DSB,ALPHA,AMACH,0.0)
      CYDR   = TLKUP4(HIST(691),31,DSB,ALPHA,AMACH,0.0)
      DCYBF  = TLKUP4(HIST(714),37,ABETA,ALPHA,AMACH,DBF)*SBETA
      KYDA   = 0.60
      DAY    = KYDA*DAI+(1.0-KYDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
         COEF = CY+DCYBLG*BETA+DCYBE*BETA+DCYBSB*BETA+CYDA*DAY+CYDR*DR+
     &          DCYBF
      ELSE
         YYWB   = TLKUP4(HIST(1634),KF+12,QBAR,AMACH,0.0,0.0)
         RDCYBV = TLKUP4(HIST(1657),KF+1,ALPHA,AMACH,0.0,0.0)
         YYA    = TLKUP4(HIST(1680),KF+18,QBAR,AMACH,0.0,0.0)
         YYV    = TLKUP4(HIST(1703),KF+15,QBAR,AMACH,0.0,0.0)
         YYR    = TLKUP4(HIST(1726),KF+21,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YYWB = 1.0
          YYA  = 1.0
 
         COEF   = YYWB*(CY-RDCYBV*BETA)+DCYBLG*BETA+DCYBE*BETA
     $      +YYA*CYDA*DAY+YYV*(RDCYBV+DCYBSB)*BETA+YYR*CYDR*DR+DCYBF
      ENDIF
      RETURN
 
*         <=== YAWING MOMENT COEFFICIENT ===>
 
  500 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CLN    = TLKUP4(HIST(737),5,ABETA,ALPHA,AMACH,DSB)*SBETA
      DCNBLG = TLKUP4(HIST(760),11,ALPHA,DLG,0.0,0.0)
      DCLNBE = TLKUP4(HIST(783),20,DE,ALPHA,AMACH,0.0)
      CLNDA  = TLKUP4(HIST(806),23,DE,ALPHA,AMACH,0.0)
      DCNBSB = TLKUP4(HIST(829),29,DSB,ALPHA,AMACH,0.0)
      CLNDR  = TLKUP4(HIST(852),32,DSB,ALPHA,AMACH,0.0)
      DCLNBF = TLKUP4(HIST(875),38,ABETA,ALPHA,AMACH,DBF)*SBETA
      CLNR   = TLKUP4(HIST(898),41,ALPHA,AMACH,0.0,0.0)
      CLNP   = TLKUP4(HIST(921),43,ALPHA,AMACH,0.0,0.0)
      KLNDA  = TLKUP4(HIST(2623),85,DE,AMACH,0.0,0.0)
      DALN   = KLNDA*DAI+(1.0-KLNDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
         COEF = CLN+DCNBLG*BETA+DCLNBE*BETA+CLNDA*DALN+DCNBSB*BETA+
     $     CLNDR*DR+DCLNBF+CLNR*R+CLNP*P
      ELSE
         YNWB   = TLKUP4(HIST(1749),KF+13,QBAR,AMACH,0.0,0.0)
         RDCNBV = TLKUP4(HIST(1772),KF+2,ALPHA,AMACH,0.0,0.0)
         YNV    = TLKUP4(HIST(1818),KF+16,QBAR,AMACH,0.0,0.0)
         YNDR   = TLKUP4(HIST(1841),KF+22,QBAR,AMACH,0.0,0.0)
         YNR    = TLKUP4(HIST(1864),KF+38,QBAR,AMACH,0.0,0.0)
         YNP    = TLKUP4(HIST(1887),KF+36,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YNNA = 1.0
          YNWB = 1.0
 
         COEF   = YNWB*(CLN-RDCNBV*BETA)+DCNBLG*BETA+DCLNBE*BETA+
     &    CLNDA*DALN+YNV*(RDCNBV+DCNBSB)*BETA+YNDR*CLNDR*DR+
     &    DCLNBF+YNR*CLNR*R+YNP*CLNP*P
      ENDIF
      RETURN
 
*         <=== ROLLING MOMENT COEFFICIENT ===>
 
  600 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CLL    = TLKUP4(HIST(944),6,ABETA,ALPHA,AMACH,DSB)*SBETA
      DCLBLG = TLKUP4(HIST(967),12,ALPHA,DLG,0.0,0.0)
      DCLLBE = TLKUP4(HIST(990),21,DE,ALPHA,AMACH,0.0)
      CLLDA  = TLKUP4(HIST(1013),24,DE,ALPHA,AMACH,0.0)
      DCLBSB = TLKUP4(HIST(1036),30,DSB,ALPHA,AMACH,0.0)
      CLLDR  = TLKUP4(HIST(1059),33,DSB,ALPHA,AMACH,0.0)
      DCLLBF = TLKUP4(HIST(1082),39,ABETA,ALPHA,AMACH,DBF)*SBETA
      CLLR   = TLKUP4(HIST(1105),42,ALPHA,AMACH,0.0,0.0)
      CLLP   = TLKUP4(HIST(1128),44,ALPHA,AMACH,0.0,0.0)
      APHI   = ABS(PHI)
 
      IF (HOB.GT.1.5) THEN
         DCLLAG = 0.0
         DCLLBG = 0.0
      ELSE
         DCLLAG = TLKUP4(HIST(2508),81,HOB,APHI,0.0,0.0)
         DCLLBG = TLKUP4(HIST(2531),80,HOB,0.0,0.0,0.0)
      ENDIF
 
      CLLA   = CLLDA+DCLLAG
      KLLDA  = TLKUP4(HIST(2646),86,DE,AMACH,0.0,0.0)
      DALL   = KLLDA*DAI+(1.0-KLLDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF(QBAR.LE.0.0) THEN
         COEF = CLL+DCLBLG*BETA+DCLLBG*BETA+DCLLBE*BETA+CLLA*DALL+
     $   DCLBSB*BETA+CLLDR*DR+DCLLBF+CLLR*R+CLLP*P
      ELSE
         YLWB   = TLKUP4(HIST(1910),KF+14,QBAR,AMACH,0.0,0.0)
         RDCLBV = TLKUP4(HIST(1933),KF+3,ALPHA,AMACH,0.0,0.0)
         YLV    = TLKUP4(HIST(1979),KF+17,QBAR,AMACH,0.0,0.0)
         YLDR   = TLKUP4(HIST(2002),KF+23,QBAR,AMACH,0.0,0.0)
         YLR    = TLKUP4(HIST(2025),KF+39,QBAR,AMACH,0.0,0.0)
         YLP    = TLKUP4(HIST(2048),KF+37,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YLWB = 1.0
          YLE  = 1.0
          YLA  = 1.0
 
         COEF = YLWB*(CLL-RDCLBV*BETA)+DCLBLG*BETA+DCLLBE*BETA+
     &    CLLA*DALL+YLV*(RDCLBV+DCLBSB)*BETA+YLDR*CLLDR*DR+DCLLBF+
     &    YLR*CLLR*R+YLP*CLLP*P+DCLLBG*BETA
      ENDIF
      RETURN
 
****       ORIGINAL (1M) AERO DATA BOOK
 
 1000 CONTINUE
      GO TO (110,210,310,410,510,610),IC
      CALL GOTOER
 
*        <=== LIFT COEFFICIENT ===>
 
  110 CL     = TLKUP4(HIST(1),1,ALPHA,AMACH,0.0,0.0)
      DCLLG  = TLKUP4(HIST(24),7,ALPHA,DLG,0.0,0.0)
 
      IF (HOB.LT.1.5)  THEN
         DCLGE1  = TLKUP4(HIST(47),13,HOB,ALPHA,DE,0.0)
         DCLBFGE = TLKUP4(HIST(2669),139,HOB,ALPHA,DBF,0.0)
         DCLGE   = DCLGE1 + DCLBFGE
      ELSE
         DCLGE    = 0.0
      ENDIF
 
      DCLEOR = TLKUP4(HIST(70),16,DEOR,ALPHA,AMACH,0.0)
      DCLEIR = TLKUP4(HIST(70),16,DEIR,ALPHA,AMACH,0.0)
      DCLEIL = TLKUP4(HIST(70),16,DEIL,ALPHA,AMACH,0.0)
      DCLEOL = TLKUP4(HIST(70),16,DEOL,ALPHA,AMACH,0.0)
      DCLEI  = TLKUP4(HIST(70),16,DEI,ALPHA,AMACH,0.0)
      DCLEO  = TLKUP4(HIST(70),16,DEO,ALPHA,AMACH,0.0)
      DCLSB  = TLKUP4(HIST(93),25,DSB,ALPHA,AMACH,0.0)
      DCLBF  = TLKUP4(HIST(116),34,DBF,ALPHA,AMACH,0.0)
      KLDE   = TLKUP4(HIST(2577),83,DE,AMACH,0.0,0.0)
      KLDER  = TLKUP4(HIST(2577),83,DER,AMACH,0.0,0.0)
      KLDEL  = TLKUP4(HIST(2577),83,DEL,AMACH,0.0,0.0)
      DCLE   = KLDE*DCLEI+(1.0-KLDE)*DCLEO
      DCLA   = 0.5*(KLDEL*DCLEIL+(1.0-KLDEL)*DCLEOL+KLDER*DCLEIR+
     $(1.0-KLDER)*DCLEOR)-DCLE
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
          COEF = CL+DCLLG+DCLGE+DCLE+DCLSB+DCLBF+DCLA
      ELSE
          CLO  = TLKUP4(HIST(1289),1,0.0,AMACH,0.0,0.0)
          DCLO = TLKUP4(HIST(1312),KF+4,QBAR,AMACH,0.0,0.0)
          YN   = TLKUP4(HIST(1335),KF+6,QBAR,AMACH,0.0,0.0)
          YLSB = 1.0
          YLBF = TLKUP4(HIST(1381),KF+10,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          DCLO = 0.0
          YN   = 1.0
          YLE  = 1.0
          YLSB = 1.0
 
          COEF = CLO+DCLO+YN*(CL-CLO)+DCLLG+DCLGE+DCLE+DCLA+
     *     YLSB*DCLSB+YLBF*DCLBF
      ENDIF
      RETURN
 
*        <=== DRAG COEFFICIENT ===>
 
  210 CD    = TLKUP4(HIST(185),2,ALPHA,AMACH,0.0,0.0)
      DCDLG = TLKUP4(HIST(208),8,ALPHA,DLG,0.0,0.0)
      DCDGE = 0.0
      IF(HOB.LT.1.5) DCDGE=TLKUP4(HIST(231),14,HOB,ALPHA,DE,0.0)
      DCDE  = TLKUP4(HIST(254),17,DE,ALPHA,AMACH,0.0)
      DCDER = TLKUP4(HIST(254),17,DER,ALPHA,AMACH,0.0)
      DCDEL = TLKUP4(HIST(254),17,DEL,ALPHA,AMACH,0.0)
      DCDA  = 0.5*(DCDER+DCDEL)-DCDE
      DCDSB = TLKUP4(HIST(277),26,DSB,ALPHA,AMACH,0.0)
      DCDBF = TLKUP4(HIST(300),35,DBF,ALPHA,AMACH,0.0)
      COEF  = CD+DCDLG+DCDGE+DCDE+DCDSB+DCDBF+DCDA
      RETURN
 
*        <=== PITCHING MOMENT COEFFICIENT ===>
 
  310 CM     = TLKUP4(HIST(369),3,ALPHA,AMACH,0.0,0.0)
      DCMLG  = TLKUP4(HIST(392),9,ALPHA,DLG,0.0,0.0)
 
      IF (HOB.LT.1.5)  THEN
         DCMGE1  = TLKUP4(HIST(415),15,HOB,ALPHA,DE,0.0)
         DCMBFGE = TLKUP4(HIST(2692),141,HOB,ALPHA,DBF,0.0)
         DCMGE   = DCMGE1 + DCMBFGE
      ELSE
         DCMGE  = 0.0
      ENDIF
 
      DCMEOR = TLKUP4(HIST(438),18,DEOR,ALPHA,AMACH,0.0)
      DCMEIR = TLKUP4(HIST(438),18,DEIR,ALPHA,AMACH,0.0)
      DCMEIL = TLKUP4(HIST(438),18,DEIL,ALPHA,AMACH,0.0)
      DCMEOL = TLKUP4(HIST(438),18,DEOL,ALPHA,AMACH,0.0)
      DCMEI  = TLKUP4(HIST(438),18,DEI,ALPHA,AMACH,0.0)
      DCMEO  = TLKUP4(HIST(438),18,DEO,ALPHA,AMACH,0.0)
      DCMSB  = TLKUP4(HIST(461),27,DSB,ALPHA,AMACH,0.0)
      DCMBF  = TLKUP4(HIST(484),36,DBF,ALPHA,AMACH,0.0)
      CMQ    = TLKUP4(HIST(507),40,ALPHA,AMACH,0.0,0.0)
      DCMQ   = TLKUP4(HIST(2485),82,ALPHA,AMACH,0.0,0.0)
      KMDE   = TLKUP4(HIST(2600),84,DE,AMACH,0.0,0.0)
      KMDER  = TLKUP4(HIST(2600),84,DER,AMACH,0.0,0.0)
      KMDEL  = TLKUP4(HIST(2600),84,DEL,AMACH,0.0,0.0)
 
      DCME   = KMDE*DCMEI+(1.0-KMDE)*DCMEO
      DCMA   = 0.5*(KMDEL*DCMEIL+(1.0-KMDEL)*DCMEOL+KMDER*DCMEIR+
     $(1.0-KMDER)*DCMEOR)-DCME
      CMQT   = CMQ+0.5*DCMQ*(((DSB-25.)/75.0)+(DBF/
     &  13.75))
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF(QBAR.LE.0.0) THEN
         COEF = CM+DCMLG+DCMGE+DCME+DCMSB+DCMBF+CMQT*Q+DCMA
      ELSE
         CMO  = TLKUP4(HIST(1404),3,0.0,AMACH,0.0,0.0)
         DCMO = TLKUP4(HIST(1427),KF+5,QBAR,AMACH,0.0,0.0)
         YN   = TLKUP4(HIST(1450),KF+6,QBAR,AMACH,0.0,0.0)
         DXAC = TLKUP4(HIST(1473),KF+7,QBAR,AMACH,0.0,0.0)
         YMSB = 1.0
         YMBF = TLKUP4(HIST(1519),KF+11,QBAR,AMACH,0.0,0.0)
         YMQ  = TLKUP4(HIST(1542),KF+35,QBAR,AMACH,0.0,0.0)
         CLM  = TLKUP4(HIST(1565),1,ALPHA,AMACH,0.0,0.0)
         CDM  = TLKUP4(HIST(1588),2,ALPHA,AMACH,0.0,0.0)
         CNO  = TLKUP4(HIST(1611),1,0.0,AMACH,0.0,0.0)
         AA   = ALPHA*0.017453292
         CN   = CLM*COS(AA)+CDM*SIN(AA)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          DCMO = 0.0
          YN   = 1.0
          YME  = 1.0
          DXAC = 0.0
 
         COEF = CMO+DCMO+YN*((CM-CMO)-(DXAC/100.0)*(CN-CNO))+
     $     DCMLG+DCMGE+YME*(DCME+DCMA)+YMSB*DCMSB+YMBF*DCMBF+YMQ*CMQT*Q
      ENDIF
      RETURN
 
*         <=== SIDE FORCE COEFFICIENT ===>
 
  410 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CY     = TLKUP4(HIST(576),4,ABETA,ALPHA,AMACH,0.0)*SBETA
      DCYBLG = TLKUP4(HIST(599),10,ALPHA,DLG,0.0,0.0)
      DCYBE  = TLKUP4(HIST(622),19,DE,ALPHA,AMACH,0.0)
      CYDA   = TLKUP4(HIST(645),22,DE,ALPHA,AMACH,0.0)
      DCYBSB = TLKUP4(HIST(668),28,DSB,ALPHA,AMACH,0.0)
      CYDR   = TLKUP4(HIST(691),31,DSB,ALPHA,AMACH,0.0)
      DCYBF  = TLKUP4(HIST(714),37,ABETA,ALPHA,AMACH,DBF)*SBETA
      KYDA   = 0.60
      DAY    = KYDA*DAI+(1.0-KYDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
         COEF = CY+DCYBLG*BETA+DCYBE*BETA+DCYBSB*BETA+CYDA*DAY+CYDR*DR+
     &          DCYBF
      ELSE
         YYWB   = TLKUP4(HIST(1634),KF+12,QBAR,AMACH,0.0,0.0)
         RDCYBV = TLKUP4(HIST(1657),KF+1,ALPHA,AMACH,0.0,0.0)
         YYA    = TLKUP4(HIST(1680),KF+18,QBAR,AMACH,0.0,0.0)
         YYV    = TLKUP4(HIST(1703),KF+15,QBAR,AMACH,0.0,0.0)
         YYR    = TLKUP4(HIST(1726),KF+21,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YYWB = 1.0
          YYA  = 1.0
 
         COEF   = YYWB*(CY-RDCYBV*BETA)+DCYBLG*BETA+DCYBE*BETA
     $      +YYA*CYDA*DAY+YYV*(RDCYBV+DCYBSB)*BETA+YYR*CYDR*DR+DCYBF
      ENDIF
      RETURN
 
*         <=== YAWING MOMENT COEFFICIENT ===>
 
  510 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CLN    = TLKUP4(HIST(737),5,ABETA,ALPHA,AMACH,0.0)*SBETA
      DCNBLG = TLKUP4(HIST(760),11,ALPHA,DLG,0.0,0.0)
      DCLNBE = TLKUP4(HIST(783),20,DE,ALPHA,AMACH,0.0)
      CLNDA  = TLKUP4(HIST(806),23,DE,ALPHA,AMACH,0.0)
      DCNBSB = TLKUP4(HIST(829),29,DSB,ALPHA,AMACH,0.0)
      CLNDR  = TLKUP4(HIST(852),32,DSB,ALPHA,AMACH,0.0)
      DCLNBF = TLKUP4(HIST(875),38,ABETA,ALPHA,AMACH,DBF)*SBETA
      CLNR   = TLKUP4(HIST(898),41,ALPHA,AMACH,0.0,0.0)
      CLNP   = TLKUP4(HIST(921),43,ALPHA,AMACH,0.0,0.0)
      KLNDA  = TLKUP4(HIST(2623),85,DE,AMACH,0.0,0.0)
      DALN   = KLNDA*DAI+(1.0-KLNDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF (QBAR.LE.0.0) THEN
         COEF = CLN+DCNBLG*BETA+DCLNBE*BETA+CLNDA*DALN+DCNBSB*BETA+
     $     CLNDR*DR+DCLNBF+CLNR*R+CLNP*P
      ELSE
         YNWB   = TLKUP4(HIST(1749),KF+13,QBAR,AMACH,0.0,0.0)
         RDCNBV = TLKUP4(HIST(1772),KF+2,ALPHA,AMACH,0.0,0.0)
         YNV    = TLKUP4(HIST(1818),KF+16,QBAR,AMACH,0.0,0.0)
         YNDR   = TLKUP4(HIST(1841),KF+22,QBAR,AMACH,0.0,0.0)
         YNR    = TLKUP4(HIST(1864),KF+38,QBAR,AMACH,0.0,0.0)
         YNP    = TLKUP4(HIST(1887),KF+36,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YNNA = 1.0
          YNWB = 1.0
 
         COEF   = YNWB*(CLN-RDCNBV*BETA)+DCNBLG*BETA+DCLNBE*BETA+
     &    CLNDA*DALN+YNV*(RDCNBV+DCNBSB)*BETA+YNDR*CLNDR*DR+
     &    DCLNBF+YNR*CLNR*R+YNP*CLNP*P
      ENDIF
      RETURN
 
*         <=== ROLLING MOMENT COEFFICIENT ===>
 
  610 SBETA  = SIGN(1.0,BETA)
      ABETA  = ABS(BETA)
      CLL    = TLKUP4(HIST(944),6,ABETA,ALPHA,AMACH,0.0)*SBETA
      DCLBLG = TLKUP4(HIST(967),12,ALPHA,DLG,0.0,0.0)
      DCLLBE = TLKUP4(HIST(990),21,DE,ALPHA,AMACH,0.0)
      CLLDA  = TLKUP4(HIST(1013),24,DE,ALPHA,AMACH,0.0)
      DCLBSB = TLKUP4(HIST(1036),30,DSB,ALPHA,AMACH,0.0)
      CLLDR  = TLKUP4(HIST(1059),33,DSB,ALPHA,AMACH,0.0)
      DCLLBF = TLKUP4(HIST(1082),39,ABETA,ALPHA,AMACH,DBF)*SBETA
      CLLR   = TLKUP4(HIST(1105),42,ALPHA,AMACH,0.0,0.0)
      CLLP   = TLKUP4(HIST(1128),44,ALPHA,AMACH,0.0,0.0)
      APHI   = ABS(PHI)
 
      IF (HOB.GT.1.5) THEN
         DCLLAG = 0.0
         DCLLBG = 0.0
      ELSE
         DCLLAG = TLKUP4(HIST(2508),81,HOB,APHI,0.0,0.0)
         DCLLBG = TLKUP4(HIST(2531),80,HOB,0.0,0.0,0.0)
      ENDIF
 
      CLLA   = CLLDA+DCLLAG
      KLLDA  = TLKUP4(HIST(2646),86,DE,AMACH,0.0,0.0)
      DALL   = KLLDA*DAI+(1.0-KLLDA)*DAO
 
*         <=== ADD AEROELASTIC EFFECTS IF QBAR>0 ===>
 
      IF(QBAR.LE.0.0) THEN
         COEF = CLL+DCLBLG*BETA+DCLLBG*BETA+DCLLBE*BETA+CLLA*DALL+
     $   DCLBSB*BETA+CLLDR*DR+DCLLBF+CLLR*R+CLLP*P
      ELSE
         YLWB   = TLKUP4(HIST(1910),KF+14,QBAR,AMACH,0.0,0.0)
         RDCLBV = TLKUP4(HIST(1933),KF+3,ALPHA,AMACH,0.0,0.0)
         YLV    = TLKUP4(HIST(1979),KF+17,QBAR,AMACH,0.0,0.0)
         YLDR   = TLKUP4(HIST(2002),KF+23,QBAR,AMACH,0.0,0.0)
         YLR    = TLKUP4(HIST(2025),KF+39,QBAR,AMACH,0.0,0.0)
         YLP    = TLKUP4(HIST(2048),KF+37,QBAR,AMACH,0.0,0.0)
 
*         ELEVON TORSIONAL STIFFNESS METHOD
 
          YLWB = 1.0
          YLE  = 1.0
          YLA  = 1.0
C
         COEF = YLWB*(CLL-RDCLBV*BETA)+DCLBLG*BETA+DCLLBE*BETA+
     &    CLLA*DALL+YLV*(RDCLBV+DCLBSB)*BETA+YLDR*CLLDR*DR+DCLLBF+
     &    YLR*CLLR*R+YLP*CLLP*P+DCLLBG*BETA
      ENDIF
      RETURN
      END
*DECK LOADTB
C*F45V1P0*
      SUBROUTINE LOADTB(NTAB,LTAB,PFG,RFG)
C
C     THIS SUBROUTINE LOADS DATA FROM THE AERO DATA SET INTO THE DNASA
C     ARRAY AND CREATES THE NPOINT ARRAY OF POINTERS TO THE DATA IN
C     DNASA.
C
C     PFG IS SET TO 1.0 TO CAUSE THE DATA TO BE PRINTED.
C     RFG IS SET TO 1.0 TO CAUSE THE DATA TO BE READ.
C
C     RFG IS SET TO 0.0 UPON EXIT FROM THIS ROUTINE.
C
C     THIS IS THE CDC VERSION.
C
C     NTAB IS THE NUMBER OF TABLES TO BE LOADED.
C     LTAB IS THE ARRAY OF TABLE NUMBERS.
C
      COMMON /NASA/ DNASA(140000)
      LEVEL 2,/NASA/
      COMMON /PNASA/ NPOINT(350)
      COMMON /LNASA/ KUNIT,KPTS,KTAB
      COMMON /INFO1/ INDEX(2,200)
      COMMON /SYSWRK/ IUNIT,NUNIT,SYSNDX(402)
      COMMON /OTMESS/ IOTMES,NOTMES
C
      DIMENSION LTAB(1)
      DATA KUNIT ,KPTS,KTAB/20,140000,120/
      DATA IOTMES/1/, NOTMES/0/
C        DATA DECLARED HERE DUE TO CDC RESTRICTIONS.
C
      IF(RFG.EQ.0.)  RETURN
      IUNIT = KUNIT
      NI = 0
      JST = 1
      MAXPTS = 0
      NUNIT = 1
      DO 10 I =1,KTAB
        NPOINT(I) = 0
   10   CONTINUE
      WRITE(6,300) IUNIT
      CALL OPENUP(PFG)
      DO 20 I = 1,NTAB
        J = LTAB(I)
        IF((J.LT.1).OR.(J.GT.KTAB))  GO TO 160
        MAXPTS = MAXPTS + INDEX(2,J)
   20   CONTINUE
      IF(MAXPTS .GT. KPTS)  GO TO 200
      DO 50 I = 1,NTAB
        J= LTAB(I)
        NPOINT(J) = JST
        CALL LOAD1T(PFG,J,NSZ,DNASA(JST))
        JST = JST + NSZ
   50   CONTINUE
      CALL CLOSMS(IUNIT)
      RETURN
  160 WRITE(6,310) J,KTAB
      STOP
  200 WRITE(6,320) MAXPTS, KPTS
      STOP
C
  300 FORMAT('0 SUBROUTINE LOADTB HAS BEEN CALLED TO LOAD DATA FROM',
     1 ' UNIT ',I3)
  310 FORMAT('0 TABLE',I5,' IS OUTSIDE THE ALLOWABLE RANGE OF 1 TO',I4)
  320 FORMAT('0 NUMBER OF POINTS TO BE LOADED=',I7, ' ---- MAXIMUM ' ,
     1 'ALLOWABLE =',I7)
      END
*DECK LOADIT
C*F45V1P0*
      SUBROUTINE LOAD1T(PRFLG,NTAB,NSZ,DATA)
C
C     PRFLG IS SET TO 1 TO CAUSE DATA TO BE PRINTED.
C
      DIMENSION DATA(1)
      LEVEL 2,DATA
      COMMON /INFO1/ INDEX(2,200)
      COMMON /PLTCOM1/ DUMMY(23),PTITLE(9,5)
      COMMON / LBL / SYM(2),FIGNO(4),FIGTTL(14),YLABEL(8), XARG(4),
     1  YARG(4), ZARG(4), WARG(4)
      COMMON /SYSWRK/ IUNIT,NUNIT,SYSNDX(402)
C
C
      KEY = INDEX(1,NTAB)
      NSZ = INDEX(2,NTAB)
      IF(KEY.LE.0) RETURN
      CALL READMS(IUNIT,SYM,44,KEY)
      KEY = KEY +1
      CALL READMS(IUNIT,DATA,NSZ,KEY)
      IF(PRFLG .EQ. 0.0) RETURN
      IPU = 6
      CALL PRTTAB(NTAB, NSZ, DATA, IPU)
      RETURN
C**  THIS PROGRAM VALID ON FTN4 AND FTN5 **
      END
*DECK OPENUP
C*F45V1P0*
      SUBROUTINE OPENUP(PFG)
CDC VERSION.
C       FILE OPENING ROUTINE FOR LOADING DIGITIZED AERO DATA BASE.
C
C
      COMMON /SYSWRK/ IUNIT,NUNIT,SYSNDX(402)
      COMMON /INFO1/  INDEX(2,200)
      COMMON / LBL / SYM(2),FIGNO(4),FIGTTL(14),YLABEL(8), XARG(4),
     1  YARG(4), ZARG(4), WARG(4)
      COMMON /PLTCOM1/ DUMMY(23),PTITLE(9,5)
      COMMON /INFO2 /  INFO(12), DESC(8), JOBCD(8)
C
      EQUIVALENCE  (INFO(1),IOUT), (INFO(2),NTAB), (INFO(3),LAST)
 
 
      IB=1
      IE=200
      IPU=6
      IF(PFG .EQ. 1.0) CALL TPAI(IUNIT,IB,IE,IPU)
      CALL OPENMS(IUNIT,SYSNDX,402,0)
      KEY = 1
      CALL READMS(IUNIT,INFO(1),28,KEY)
      KEY = 2
      CALL READMS(IUNIT,INDEX,400,KEY)
C       MOVE DESCRIPTION
      DO 10 I=1,8
        PTITLE(I,1) = DESC(I)
   10   CONTINUE
      CALL CDATEV(PTITLE(9,1))
      IF(PFG.EQ.1.0) RETURN
C     WRITE(6,620) JOBCD
C     WRITE(6,640) DESC
  620 FORMAT('0',10X,'JOB CARD USED TO CREATE OR CHANGE FILE',
     1  12X,' TIME OF DAY    DATE'/3X,8A10)
 640  FORMAT('0',42X,'FILE DESCRIPTION'/' ',10X,8A10)
      RETURN
C
      END
*DECK PRTTAB
C*F45V1P0*
      SUBROUTINE PRTTAB(IFL,NSIZE,STORE, IPU)
      DIMENSION STORE(1)
      COMMON /PLTCOM1/ DUMMY(23),PTITLE( 9,5)
      COMMON /LBL/ SYM(2),FIGNO(4),FIGTTL(14),YLABEL(8),
     1   XARG(4),YARG(4),ZARG(4),WARG(4)
      DATA BLANK/"    "/
      ILINE=0
      ILWZ=0
      IW=0
      DO 40 I=1,4
      IF(WARG(I) .EQ. BLANK) GO TO 40
      IW=1
      ILWZ=4
      GO TO 60
  40  CONTINUE
  60  IZ=0
      DO 80 I=1,4
      IF(ZARG(I) .EQ. BLANK) GO TO 80
      IZ=1
      ILWZ=4
      GO TO 100
  80  CONTINUE
 100  IWZ=IW+IZ
      NW=STORE(1)
      NZ=STORE(2+NW)
      IPT=NW+NZ+3
      DO 160 J=1,NW
      W=STORE(J+1)
      DO 160 I=1,NZ
      Z=STORE(NW+2+I)
      NY=STORE(IPT)
      NX=STORE(IPT+1)
      IYPT=IPT+2
      IXPT=IYPT+NY
      IDPT=IXPT+NX
      NCOL=9
      JCT=1
      KCT=NCOL
      INDX=(NY-1)/NCOL+1
      IL2=ILWZ+6+NX
      DO 140 K=1,INDX
      IF(ILINE .NE. 0) GO TO 120
      WRITE(IPU,520) (PTITLE(L,1),L=1, 9),FIGNO,FIGTTL,IFL,YLABEL,
     1   SYM,NSIZE
      ILINE=5
 120  IF(IWZ .EQ. 2) WRITE(IPU,540) WARG,W,ZARG,Z
      IF(IWZ .EQ. 1 .AND. IW .EQ. 1) WRITE(IPU,560) WARG,W
      IF(IWZ .EQ. 1 .AND. IZ .EQ. 1) WRITE(IPU,560) ZARG,Z
      WRITE(IPU,580)
      IF(KCT .GT. NY) KCT=NY
      CALL SUBTAB(JCT,KCT,NY,NX,STORE(IYPT),STORE(IXPT),STORE(IDPT),IPU)
      WRITE(IPU,600)
      ILINE=ILINE+IL2
      ILT=43-ILINE
      IF(ILT .LT. IL2) ILINE=0
      JCT=JCT+NCOL
 140  KCT=KCT+NCOL
 160  IPT=IDPT+NY*NX
      RETURN
 520  FORMAT('1',1X,8A10,15X,A10/'0',5X,4A4,5X,14A4,15X,
     1  'FILE',I5/'0',15X,8A4,10X,2A4,31X,'NSIZE',I5)
 540  FORMAT('0',20X,31('*'),10X,31('*')/' ',20X,'* ',
     1  4A4,'=',F10.3,' *',10X,'* ',4A4,'=',F10.3,' *'/
     2  ' ',20X,31('*'),10X,31('*'))
 560  FORMAT('0',35X,31('*')/' ',35X,'* ',4A4,'=',F10.3
     1  ,' *'/' ',35X,31('*'))
 580  FORMAT('0',110('-'))
 600  FORMAT(' ',110('-'))
      END
*DECK LDNTAB
C*F45V1P0*
      SUBROUTINE LDNTAB(NLOAD,NTABA,LTAB,PRFLG,RDFLG,IUNITA,NPTINC)
C
C     THIS SUBROUTINE LOADS DATA FROM THE AERO DATA SET INTO THE DNASA
C     ARRAY AND CREATES THE NPOINT ARRAY OF POINTERS TO THE DATA IN
C     DNASA.
C
C     PRFLG IS SET TO 1.0 TO CAUSE DATA TO BE PRINTED
C     RDFLG IS SET TO 1.0 TO CAUSE DATA TO BE READ
C
C
      COMMON /NASA/ DNASA(140000)  /PNASA/ NPOINT(350)
      LEVEL 2,/NASA/
      COMMON /OTMESS/ IOTMES,NOTMES
      COMMON /LNASA/ KUNIT,KPTS,KTAB
      COMMON /INFO1/ INDEX(2,200)
      COMMON /SYSWRK/ IUNIT,NUNIT,SYSNDX(402)
      DIMENSION NTABA(1),LTAB(1),PRFLG(1),RDFLG(1),IUNITA(1),NPTINC(1)
      DATA KPTS/140000/,KTAB/140/,IOTMES/1/,NOTMES/0/
  40  JST=1
      MAXPTS=0
      LTI=0
      DO 60 I=1,KTAB
  60  NPOINT(I)=0
      DO 140 IU=1,NLOAD
      NUNIT = IU
      IUNIT=IUNITA(IU)
      RFG=RDFLG(IU)
      PFG=PRFLG(IU)
      NTAB=NTABA(IU)
      NI=NPTINC(IU)
  80  IF(RFG .EQ. 0.0) GO TO 140
C     WRITE(6,520) IUNIT
      CALL OPENUP(PFG)
      DO 100 I=1,NTAB
      J=LTAB(LTI+I)
      J1=J+NI
      IF(J1 .LT. 1 .OR. J1 .GT. KTAB) GO TO 160
 100  MAXPTS=MAXPTS+INDEX(2,J)
      IF(MAXPTS .GT. KPTS) GO TO 200
      DO 120 I=1,NTAB
      J=LTAB(LTI+I)
      J1=J+NI
      NPOINT(J1)=JST
      CALL LOAD1T(PFG,J,NSZ,DNASA(JST))
 120  JST=JST+NSZ
      CALL CLOSMS(IUNIT)
 140  LTI=LTI+NTAB
      RETURN
 160  WRITE(6,540) J1,KTAB
      STOP
 200  WRITE(6,560) MAXPTS,KPTS
      STOP
 520  FORMAT('0','SUBROUTINE LDNTAB HAS BEEN CALLED TO LOAD DATA FROM',
     1 ' UNIT ',I3)
 540  FORMAT('0','TABLE ',I5,' IS OUTSIDE THE ALLOWABLE RANGE OF 1 TO',
     1  I4)
 560  FORMAT('0','NUMBER OF POINTS TO BE LOADED=',I7,' ---- MAXIMUM ',
     1 'ALLOWABLE=',I7)
      END
*DECK TPAI
C*F45V1P0*
      SUBROUTINE TPAI(IUNIT,IBEG,IEND,IPU)
C
C   "TPAI"  PRINTS A TITLE PAGE AND INDEX FOR THE DATA BEING PRINTED
C
      DIMENSION SYM(2),FIG(4),X(3),Y(3),Z(3),W(3),DUM1(22)
      DIMENSION INFO(12), DESC(8), JOBCD(8),WORK(28),SYSNDX(402)
C        FORCE ARRAY ALIGNMENT
      EQUIVALENCE (WORK(1),INFO(1)),(DESC(1),WORK(13))
     1  , (JOBCD(1),WORK(21))
      DIMENSION WRK(44), INDEX(2,200)
      EQUIVALENCE (WRK(1),SYM(1)),(WRK(3),FIG(1)),(WRK(29),X(1)),(WRK(33
     1),Y(1))       ,(WRK(37),Z(1)),(WRK(41),W(1))
C
C
C
      DATA BLANK/"    "/
C
C   OPEN DIRECT ACCESS DATASET
      CALL OPENMS(IUNIT,SYSNDX,402,0)
C
      CALL READMS(IUNIT,INFO,28,1)
      CALL READMS(IUNIT,INDEX,400,2)
C   PRINT TITLE PAGE
      CALL TITLPG(IPU,DESC)
C   PRINT SUMMARY INFORMATION
      NFSUM=0
      NPSUM=0
      DO 10 I=IBEG,IEND
      LOCP=INDEX(1,I)
      IF(LOCP .LE. 0) GO TO 10
      NSIZE=INDEX(2,I)
      NFSUM=NFSUM+1
      NPSUM=NPSUM+NSIZE
  10  CONTINUE
      WRITE(IPU,510) DESC
      WRITE(IPU,600) NFSUM,INFO(1),NPSUM,INFO(3)
      WRITE(IPU,620) JOBCD
      WRITE(IPU,640) DESC
      N=0
      NF=IBEG-1
C   PRINT INDEX FOR DATA TABLES BEING PROCESSED
  20  NF=NF+1
      IF(NF .GT. IEND) GO TO 99
      LOCP=INDEX(1,NF)
      IF(LOCP .LE. 0) GO TO 20
      NSIZE=INDEX(2,NF)
      NPSUM=NPSUM+NSIZE
C
      CALL READMS(IUNIT,SYM,44,LOCP)
      WRITE(IPU,510) DESC
      WRITE(IPU,520)
      WRITE(IPU,530)
      WRITE(IPU,540)
      WRITE(IPU,550) SYM,X,Y,Z,W,NF,FIG
      LC = 10
  40  NF=NF+1
      IF(NF .GT. IEND) GO TO 60
      LOCP=INDEX(1,NF)
      IF(LOCP .LE. 0) GO TO 40
      NSIZE=INDEX(2,NF)
      NPSUM=NPSUM+NSIZE
      CALL READMS(IUNIT,SYM,44,LOCP)
      WRITE(IPU,560) SYM,X,Y,Z,W,NF,FIG
      LC = LC + 3
      IF(LC .GE. 37) GO TO 100
      GO TO 40
  60  N = 1
  80  WRITE(IPU,570) BLANK
      LC = LC + 3
      IF(LC .GE. 37) GO TO 100
      GO TO 80
 100  WRITE(IPU,580)
      WRITE(IPU,590)
      IF(N.EQ.0) GO TO 20
  99  CALL CLOSMS(IUNIT)
      RETURN
  510 FORMAT('1',20X,7A10,A2)
 520  FORMAT('0'/' ',20X,'PROGRAM',26X,'TLKUP4',27X,'FILE',5X,
     1  'DATA BOOK'/' ',1X,'TYPE',5X,'COEFF*',5X,'NAME',27X,
     2  'ARGUMENTS',24X,'NUMBER',4X,'REFERENCE**')
 530  FORMAT(' ',110('-'))
 540  FORMAT(' ',35X,'X',13X,'Y',13X,'Z',13X,'W')
 550  FORMAT(' ',110('-')/'0',18X,2A4,4X,4(3A4,2X),I3,4X,4A4)
 560  FORMAT('0'/' ',18X,2A4,4X,4(3A4,2X),I3,4X,4A4)
 570  FORMAT('0'/' ',A4)
 580  FORMAT('0'/' ',20X,'* ALL DERIVATIVES ARE PER DEGREE UNLESS',
     1  ' OTHERWISE NOTED')
 590  FORMAT('0',20X,'** AERO DATA BOOK FIGURES UNLESS OTHERWISE NOTED')
 600  FORMAT('0',35X,'SUMMARY'/'0',5X,'TOTAL NUMBER OF TABLES = ',I7,
     1  20X,'DATA WRITTEN TO TAPE',I4/
     2  '0',5X,'TOTAL NUMBER OF POINTS = ',I7,20X,
     3  'LAST RECORD USED IS',I5)
  620 FORMAT('0',10X,'JOB CARD USED TO CREATE OR CHANGE FILE',
     1  12X,' TIME OF DAY    DATE'/3X,8A10)
 640  FORMAT('0',42X,'FILE DESCRIPTION'/' ',10X,8A10)
      END
*DECK TITLPG
C*F45V1P0*
      SUBROUTINE TITLPG(IPU,TITLE)
C
C   "TITLPG"  PRINTS A TITLE PAGE FOR THE TABULATED OUTPUT
C
      DIMENSION TITLE(8)
C   PRINT TITLE BLOCK
C
      WRITE(IPU,500)
      WRITE(IPU,510)
      WRITE(IPU,520)
      WRITE(IPU,530)
      WRITE(IPU,520)
      WRITE(IPU,540)
      WRITE(IPU,520)
      WRITE(IPU,550)
      WRITE(IPU,520)
      WRITE(IPU,560)
      WRITE(IPU,520)
      WRITE(IPU,570)
      WRITE(IPU,520)
      WRITE(IPU,580) TITLE
      WRITE(IPU,520)
      WRITE(IPU,510)
C
C   PRINT LARGE "DATA BOOK"
C
      WRITE(IPU,600)
      WRITE(IPU,610)
      WRITE(IPU,620)
      WRITE(IPU,630)
      WRITE(IPU,640)
      WRITE(IPU,650)
      WRITE(IPU,660)
      WRITE(IPU,670)
      WRITE(IPU,680)
      WRITE(IPU,690)
      WRITE(IPU,700)
      RETURN
 500  FORMAT('1','    ')
 510  FORMAT(' ',15X,80('*'))
 520  FORMAT(' ',15X,'*',78X,'*')
 530  FORMAT(' ',15X,'*',27X,'ROCKWELL   INTERNATIONAL',27X,'*')
 540  FORMAT(' ',15X,'*',30X,'SPACE   DIVISION',32X,'*')
 550  FORMAT(' ',15X,'*',29X,'DOWNEY   CALIFORNIA',30X,'*')
 560  FORMAT(' ',15X,'*',78('-'),'*')
 570  FORMAT(' ',15X,'*',28X,'TABULATED  OUTPUT  FOR',28X,'*')
  580 FORMAT(16X,'*',3X,7A10,A2,3X,'*')
 600  FORMAT('-','    '/'-','    '/'-','    ')
 610  FORMAT(' ',3X,8('D'),6X,6('A'),4X,10('T'),4X,6('A'),14X,
     1  8('B'),6X,6('O'),6X,6('O'),4X,'KKK',4X,'KKK')
 620  FORMAT(' ',3X,9('D'),4X,8('A'),3X,10('T'),3X,8('A'),13X,
     1  9('B'),4X,8('O'),4X,8('O'),3X,'KKK',3X,'KKK')
 630  FORMAT(' ',3X,'DD',5X,'DDD',2X,'AAA',4X,'AAA',6X,'TT',6X,
     1  'AAA',4X,'AAA',12X,'BB',5X,'BBB',2X,'OOO',4X,'OOO',2X,
     2  'OOO',4X,'OOO',2X,'KKK',2X,'KKK')
 640  FORMAT(' ',3X,'DD',6X,'DD',2X,'AA',6X,'AA',6X,'TT',6X,'AA',
     1  6X,'AA',12X,'BB',5X,'BBB',2X,'OO',6X,'OO',2X,'OO',6X,
     2  'OO',2X,'KKK KKK')
 650  FORMAT(' ',3X,'DD',6X,'DD',2X,'AA',6X,'AA',6X,'TT',6X,'AA',
     1  6X,'AA',12X,9('B'),3X,'OO',6X,'OO',2X,'OO',6X,'OO',2X,6('K'))
 660  FORMAT(' ',3X,'DD',6X,'DD',2X,10('A'),6X,'TT',6X,10('A'),12X,
     1  9('B'),3X,'OO',6X,'OO',2X,'OO',6X,'OO',2X,6('K'))
 670  FORMAT(' ',3X,'DD',6X,'DD',2X,10('A'),6X,'TT',6X,10('A'),12X,
     1  'BB',5X,'BBB',2X,'OO',6X,'OO',2X,'OO',6X,'OO',2X,'KKK KKK')
 680  FORMAT(' ',3X,'DD',5X,'DDD',2X,'AA',6X,'AA',6X,'TT',6X,'AA',
     1  6X,'AA',12X,'BB',5X,'BBB',2X,'OOO',4X,'OOO',2X,'OOO',4X,
     2  'OOO',2X,'KKK',2X,'KKK')
 690  FORMAT(' ',3X,9('D'),3X,'AA',6X,'AA',6X,'TT',6X,'AA',6X,'AA',
     1  12X,9('B'),4X,8('O'),4X,8('O'),3X,'KKK',3X,'KKK')
 700  FORMAT(' ',3X,8('D'),4X,'AA',6X,'AA',6X,'TT',6X,'AA',6X,'AA',
     1  12X,8('B'),6X,6('O'),6X,6('O'),4X,'KKK',4X,'KKK')
      END
*DECK SUBTAB
C*F45V1P0*
      SUBROUTINE SUBTAB(JCT,KCT,NY,NX,Y,X,DATA, IPU)
      DIMENSION Y(1),X(1),DATA(NX,NY)
      COMMON /LBL/ SYM(2),FIGNO(4),FIGTTL(14),YLABEL(8),
     1   XARG(4),YARG(4),ZARG(4),WARG(4)
      WRITE(IPU,600) YARG,(Y(J),J=JCT,KCT)
      WRITE(IPU,620) XARG
      DO 120 K=1,NX
 120  WRITE(IPU,640) X(K),(DATA(K,J),J=JCT,KCT)
      RETURN
 600  FORMAT(' ',30X,4A4/' ',18X,10F10.3)
 620  FORMAT(' ',6X,4A4)
 640  FORMAT(' ',2X,F10.3,6X,10F10.5)
      END
*DECK TLKUP4
C*F45V1P0*
      FUNCTION TLKUP4 (LH,NCIN,XP,YP,ZP,WP)
C
C     THIS FUNCTION DESIGNED TO INTERPOLATE DATA IN THE AERO DATA BOOK
C     DATA-SET. THE DATA IS ORGANIZED IN AN ARRANGEMENT DESIGNED BY
C     NASA. THIS FUNCTION IS USED IN CONJUNCTION WITH SUBROUTINE LOADTB
C     WHICH LOADS THE DATA IN THE DNASA ARRAY AND CREATES THE NPOINT
C     ARRAY.
C
C     THIS FUNCTION CALLS FUNCTIONS TLKUP1,TLKUP2 AND TLKUP3 WHICH DO
C     ONE,TWO AND THREE VARIABLE TABLE LOOKUP.
C
C
C     TLKUP1,TLKUP2,TLKUP3 AND TLKUP4 SHOULD BE COMPILED IN
C     FORTRAN H OPTION=2
C
C
C     DNASA ARRAY CONTAINS THE DATA WITH EACH AERO TABLE IMMEDIATELY
C                 FOLLOWING THE PRECEEDING ONE.
C     NPOINT ARRAY CONTAINS POINTERS TO THE START OF EACH DATA TABLE
C                  IN THE DNASA ARRAY
C     IHIST(HIST) ARRAY IS A CSMP ARRAY WHICH IS ZEROED AT THE START OF
C                        EACH CASE AND IS USED TO ALLOCATE DYNAMIC
C                        STORAGE FOR EACH CALL TO TLKUP.
C    HISTORY DESIGNATION HAS BEEN CHANGED FOR COMPATIBILITY WITH CSSL4.
C     LBASE IS THE STARTING POINT OF THE DATA IN THE DNASA ARRAY
C     LH IS CSMP POINTER TO HISTORY LOCATIONS. THIS NUMBER INCREASES
C     BY 23 FOR EACH CALL TO TLKUP4.
C     NX IS THE NUMBER OF X VARIABLES IN SUBTABLE
C     NY IS THE NUMBER OF Y VARIABLES IN SUBTABLE
C     LX IS THE LOCATION OF THE START OF THE X TABLE
C     LY IS THE LOCATION OF THE START OF THE Y TABLE
C     LC IS THE LOCATION OF THE START OF THE DATA SUBTABLE
C
C
      COMMON / NASA / DNASA(1)  / PNASA / NPOINT(1)
      LEVEL 2,/NASA /
      COMMON /Z0009/ TIME
C    IN CSSL4 TIME IS FIRST WORD IN COMMON Z0009.
      COMMON /NCURV/NCUR
C
      COMMON /OTMESS/ IOTMES,NOTMES
C
      DIMENSION LH(23), TEND(2)
      DATA TEND/"LOW","HIGH"/
C
C
      NCUR = NCIN
      X=XP
      Y=YP
      Z=ZP
      W=WP
      IXACT=0
      LBW=NPOINT(NCIN)
      IF(LBW.LE.0) GO TO 480
      NW=DNASA(LBW)
      NZ=DNASA(LBW+NW+1)
      IF(NW .EQ. 1 .AND. NZ .EQ. 1) GO TO 360
      IF(NW .EQ. 1) GO TO 300
C
C     LOGIC FOR FUNCTIONS OF FOUR VARIABLES
C
      LBZ=LBW+NW+2
      LBD=LBZ+NZ
      IF (W.GE.DNASA(LBW+1)) GO TO 20
C     IF(IOTMES.EQ.1)       WRITE(6,520) NCIN,TEND(1),W,TIME
      NOTMES=NOTMES+1
      W=DNASA(LBW+1)
      K=1
      GO TO 100
  20  IF (W.LE.DNASA(LBW+NW)) GO TO 40
C     IF(IOTMES.EQ.1)       WRITE(6,520) NCIN,TEND(2),W,TIME
      NOTMES=NOTMES+1
      W=DNASA(LBW+NW)
      K=NW-1
      GO TO 80
  40  DO 60 J = 2, NW
      K=J-1
      IF (W - DNASA(LBW+J))   100,80,60
  60  CONTINUE
C     THE FOLLOWING LOGIC CHECKS TO SEE IF IN NEW Z SUBTABLE
C     IF SO, MUST CLEAN STORAGE IN TLKUP3
  80  IXACT=1
  100 IF(LH(23).EQ.K)  GO TO 140
      IF(LH(23).EQ.0)  GO TO 140
      DO 120 J=1,22
      LH(J) = 0
 120  CONTINUE
  140 LH(23) = K
      W1    = DNASA(LBW+K)
      W2    = DNASA(LBW+K+1)
      J2=LBD
      DO 160 J=1,K
      J1=J2
      DO 160 JJ=1,NZ
      JT=J2
      NY=DNASA(JT)
      NX=DNASA(JT+1)
 160  J2=NX*NY+NX+NY+2+JT
      IF(IXACT .EQ. 1) GO TO 180
      F1=TLKUP3(LH(1),DNASA(LBZ),Z,NZ,Y,X,DNASA(J1))
  180 F2=TLKUP3(LH(12),DNASA(LBZ),Z,NZ,Y,X,DNASA(J2))
      IF(IXACT .EQ. 1) F1=F2
      TLKUP4 = (F2 - F1) / (W2 - W1) * (W - W1)  +  F1
      RETURN
C
C     LOGIC FOR FUNCTIONS OF THREE VARIABLES
C
 300  LBZ=LBW+NW+2
      LBD=LBZ+NZ
      TLKUP4=TLKUP3(LH(1),DNASA(LBZ),Z,NZ,Y,X,DNASA(LBD))
      RETURN
C
C     LOGIC FOR FUNCTIONS OF TWO VARIABLES
C
  360  LBS=LBW+NW+NZ+2
      NY=DNASA(LBS)
      NX=DNASA(LBS+1)
      LY=LBS+2
      LX=LY+NY
      LC=LX+NX
      IF(NX.EQ.1) GO TO 400
      IF(NY.EQ.1) GO TO 420
      TLKUP4=TLKUP2(LH(1),DNASA(LY),Y,NY,DNASA(LX),X,NX,DNASA(LC))
      RETURN
C
C     LOGIC FOR FUNCTIONS OF ONE VARIABLE
C
 400  TLKUP4=TLKUP1(LH(1),DNASA(LY),Y,NY,DNASA(LC))
      RETURN
 420  TLKUP4=TLKUP1(LH(1),DNASA(LX),X,NX,DNASA(LC))
      RETURN
 480  WRITE(6,500) NCIN
 500  FORMAT('0***TABLE',I4,' HAS NOT BEEN LOADED-EXECUTION TERMINATED')
 520  FORMAT(' ','****FUNCTION',I5,' OUT OF TABLE AT ',A4,
     1   ' END -- W ARGUMENT INPUT=',1PG12.5,' AT ',1PG12.5)
      STOP
      END
*DECK TLKUP3
C*F45V1P0*
      FUNCTION TLKUP3 (LH,AZ,ZP,NZ,YP,XP,AC)
C
C     TRIPLE INTERPOLATION TABLE LOOKUP FOR C=F(X,Y,Z)
C     DOES NOT EXTRAPOLATE PAST END OF TABLE
C       REQUIRES AN 11 WORD HISTORY ARRAY IN MAIN PROGRAM.
C
C
C     AZ    LIST OF Z ARGUMENTS
C     ZP    ACTUAL VALUE OF Z
C     NZ    NUMBER OF Z ARGUMENTS IN AZ ARRAY
C     YP,XP ACTUAL VALUES OF Y AND X
C     AC    SUBTABLES FOR ALL Z ARGUMENTS
C
C
C     THIS FUNCTION CALLS FUNCTION TLKUP2 WHICH DOES TWO VARIABLE
C     TABLE LOOKUP
C
C
C
C
      DIMENSION AZ(1),AC(1)
C
      COMMON /Z0009/TIME
      DIMENSION LH(11), TEND(2)
      COMMON /NCURV/ NCUR
      COMMON /OTMESS/ IOTMES,NOTMES
      LEVEL 2,AZ,AC
C
      DATA TEND     /3HLOW,4HHIGH/
C
C
      X=XP
      Y=YP
      Z=ZP
      IXACT=0
      IF (Z.GE.AZ(1)) GO TO 10
C     IF(IOTMES.EQ.1)       WRITE(6,520) NCUR,TEND(1),Z,TIME
      NOTMES=NOTMES+1
      Z=AZ(1)
   10 IF (Z.LE.AZ(NZ)) GO TO 20
C     IF(IOTMES.EQ.1)       WRITE(6,520) NCUR,TEND(2),Z,TIME
      NOTMES=NOTMES+1
      Z=AZ(NZ)
   20 DO 30 J = 2, NZ
      K=J-1
      IF (Z - AZ(J))   40, 35,30
   30 CONTINUE
C     THE FOLLOWING LOGIC CHECKS TO SEE IF IN NEW X-Y SUBTABLE
C     IF SO, MUST CLEAN STORAGE IN TLKUP2
  35  IXACT=1
   40 IF(LH(11).EQ.K) GO TO 60
      IF(LH(11).EQ.0) GO TO 60
      DO 50 J=1,10
      LH(J) = 0
   50 CONTINUE
   60 LH(11) = K
      Z1    = AZ(K)
      Z2    = AZ(K+1)
      J2=1
      DO 70 J=1,K
      J1=J2
      NY=AC(J1)
      NX=AC(J1+1)
      J2=NX*NY+NX+NY+2+J1
   70 CONTINUE
      IF(IXACT .EQ. 1) GO TO 75
      LY=J1+2
      LX=LY+NY
      LC=LX+NX
      F1=TLKUP2(LH(1),AC(LY),Y,NY,AC(LX),X,NX,AC(LC))
  75  NX=AC(J2+1)
      NY=AC(J2)
      LY=J2+2
      LX=LY+NY
      LC=LX+NX
      F2= TLKUP2(LH(6),AC(LY),Y,NY,AC(LX),X,NX,AC(LC))
      IF(IXACT .EQ. 1) F1=F2
      TLKUP3 = (F2 - F1) / (Z2 - Z1) * (Z - Z1)  +  F1
      RETURN
 520  FORMAT(' ','****FUNCTION',I5,' OUT OF TABLE AT ',A4,
     1   ' END -- Z ARGUMENT INPUT=',1PG12.5,' AT ',1PG12.5)
      END
*DECK TLKUP2
C*F45V1P0*
      FUNCTION TLKUP2(M,AX,XD,LX,AY,YD,LY,AC)
CDC VERSION.
C     DOUBLE INTERPOLATION TABLE LOOKUP FOR C=F(X,Y)
C     DOES NOT EXTRAPOLATE PAST END OF TABLE
C     REQUIRES A 5 WORD HISTORY ARRAY IN CALLING PROGRAM
C
C     AX    LIST OF FIRST ARGUMENTS
C     X     ACTUAL VALUE OF AX
C     LX    NUMBER OF AX IN TABLE
C     AY, Y, LY   AS ABOVE FOR SECOND ARGUMENT
C     AC    TABLE
C
      COMMON /Z0009/ TIME
      COMMON /NCURV/ NCUR
      COMMON /OTMESS/ IOTMES,NOTMES
      LEVEL 2,AX,AY,AC
C
      DIMENSION AX(1),AY(1),AC(1),M(5)
C
C
      DIMENSION TEND(2)
      DATA TEND /3HLOW,4HHIGH/
C
C
      IF(LY .EQ. 1) GO TO 250
      IF(LX .EQ. 1) GO TO 260
      X=XD
      Y=YD
C     INDX ARRAY IS INITIALIZED TO 0 IN CSMP3 ROUTINE ZZSIM2
C
C     DETERMINE IF INDEPENDENT VARIABLE TABLES ARE ENTERED PROPERLY
      IF(M(5).NE.0) GO TO 10
      M(5)= 1
      DO 5 I=2,LX
      IF(AX(I).GT.AX(I-1)) GO TO 5
      IERR = NCUR
      WRITE(6,500) IERR
      STOP
    5 CONTINUE
      DO 6 I=2,LY
      IF(AY(I).GT.AY(I-1)) GO TO 6
      IERR = NCUR
      WRITE(6,500) IERR
      STOP
    6 CONTINUE
   10 K = M(1)
      J = M(2)
      IF(K-1)70,70,20
   20 IF(AX(K)-X)80,30,30
   30 IF(AX(K-1)-X)105,40,40
   40 IF(K-2)90,50,90
   50 IF(AX(K-1)-X)105,105,60
C                VALUE OF X OUT OF TABLE AT LOW END
   60 IF(M(3).EQ.1) GO TO 65
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,520) IERR,TEND(1),X,TIME
      NOTMES=NOTMES+1
   65 X=AX(1)
      M(3) = 1
      GOTO 120
C
   70 K = 2
      GOTO 20
   80 IF(K-LX)100,110,110
   90 K = K-1
      GOTO 20
  100 K = K+1
      GOTO 20
  105 M(3) = 0
      GO TO 120
C                VALUE OF X OUT OF TABLE AT HIGH END
  110 IF(M(3).EQ.2)  GO TO 115
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,520) IERR,TEND(2),X,TIME
      NOTMES=NOTMES+1
  115 X=AX(LX)
      M(3) = 2
C
  120 M(1) = K
C                SUBSCRIPTS K AND K-1 HAVE BEEN DETERMINED
      IF(J-1) 180,180,130
  130 IF(AY(J)-Y)190,140,140
  140 IF(AY(J-1)-Y)215,150,150
  150 IF(J-2)200,160,200
  160 IF(AY(J-1)-Y)215,215,170
C                VALUE OF Y OUT OF TABLE AT LOW END
  170 IF(M(4).EQ.1) GO TO 175
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,540) IERR,TEND(1),Y,TIME
      NOTMES=NOTMES+1
  175 Y=AY(1)
      M(4) = 1
C
      GOTO 230
  180 J = 2
      GOTO 130
  190 IF(J-LY)210,220,220
  200 J = J-1
      GOTO 130
  210 J = J+1
      GOTO 130
  215 M(4) = 0
      GO TO 230
C                VALUE OF Y OUT OF TABLE AT HIGH END
  220 IF(M(4).EQ.2) GO TO 225
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,540) IERR,TEND(2),Y,TIME
      NOTMES=NOTMES+1
  225 Y=AY(LY)
      M(4) = 2
  230 M(2) = J
C                SUBSCRIPTS J AND J-1 HAVE BEEN DETERMINED
      NSCPT1 = LY*(K-1) + J - 1
      NSCPT2 = LY*(K-2) + J - 1
      NSCPT3 = LY*(K-1) + J
      NSCPT4 = LY*(K-2) + J
C         SUBSCRIPTS FOR INTERPOLATION PARAMETERS HAVE BEEN DETERMINED
      PAT4C1 = AC(NSCPT1)
      PAT4C2 = AC(NSCPT2)
      PAT4C3 = AC(NSCPT3)
      PAT4C4 = AC(NSCPT4)
C                INTERPOLATION PARAMETERS HAVE BEEN SELECTED
      YSLOPE = (Y - AY(J-1))/(AY(J) - AY(J-1))
      PAT2C1 = PAT4C1 + YSLOPE*(PAT4C3 - PAT4C1)
      PAT2C2 = PAT4C2 + YSLOPE*(PAT4C4 - PAT4C2)
      XSLOPE = (X - AX(K-1))/(AX(K) - AX(K-1))
C
      TLKUP2= PAT2C2 + XSLOPE*(PAT2C1 - PAT2C2)
      RETURN
C
C  LOGIC FOR FUNCTIONS OF ONE VARIABLE
C
  250 TLKUP2=TLKUP1(M(1),AX(1),XD,LX,AC(1))
      RETURN
  260 TLKUP2=TLKUP1(M(1),AY(1),YD,LY,AC(1))
 500  FORMAT(' ***TLKUP2 ',I3,' ERROR IN INDEPENDENT VARIABLE TABLE')
 520  FORMAT(' ','****FUNCTION',I5,' OUT OF TABLE AT ',A4,
     1   ' END -- Y ARGUMENT INPUT=',1PG12.5,' AT ',1PG12.5)
 540  FORMAT(' ','****FUNCTION',I5,' OUT OF TABLE AT ',A4,
     1   ' END -- X ARGUMENT INPUT=',1PG12.5,' AT ',1PG12.5)
      RETURN
      END
*DECK TLKUP1
C*F45V1P0*
      FUNCTION TLKUP1(M,AX,XD,LX,AC)
C     INTERPOLATION TABLE LOOKUP FOR C=F(X)
C     TLKUP1 FOR CSMP3
C     DOES NOT EXTRAPOLATE PAST END OF TABLE
C     REQUIRES 3 WORD HISTORY ARRAY
C
C     AX    LIST OF FIRST ARGUMENTS
C     X     ACTUAL VALUE OF AX
C     LX    NUMBER OF AX IN TABLE
C     AC    TABLE
C
      COMMON /Z0009/ TIME
      COMMON /NCURV/ NCUR
      COMMON /OTMESS/ IOTMES,NOTMES
      LEVEL 2,AX,AC
C
      DIMENSION AX(1),AC(1),M(3),TEND(2)
C
C
      DATA TEND/3HLOW,4HHIGH/
C
C
      X=XD
C     INDX ARRAY IS INITIALIZED TO 0 IN CSMP3 ROUTINE ZZSIM2
C
C     DETERMINE IF INDEPENDENT VARIABLE TABLES ARE ENTERED PROPERLY
      IF(LX .EQ. 1) GO TO 130
      IF(M(3).NE.0) GO TO 10
      M(3) = 1
      DO 5 I=2,LX
      IF(AX(I).GT.AX(I-1)) GO TO 5
      IERR = NCUR
      WRITE(6,500) IERR
      STOP
    5 CONTINUE
   10 K = M(1)
      IF(K-1)70,70,20
   20 IF(AX(K)-X)80,30,30
   30 IF(AX(K-1)-X)105,40,40
   40 IF(K-2)90,50,90
   50 IF(AX(K-1)-X)105,105,60
C                VALUE OF X OUT OF TABLE AT LOW END
   60 IF(M(2).EQ.1) GO TO 65
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,520) IERR,TEND(1),X,TIME
      NOTMES=NOTMES+1
   65 X=AX(1)
      M(2) = 1
      GOTO 120
C
   70 K = 2
      GOTO 20
   80 IF(K-LX)100,110,110
   90 K = K-1
      GOTO 20
  100 K = K+1
      GOTO 20
  105 M(2) = 0
      GO TO 120
C                VALUE OF X OUT OF TABLE AT HIGH END
  110 IF(M(2).EQ.2)  GO TO 115
      IERR = NCUR
C     IF(IOTMES.EQ.1) WRITE(6,520) IERR,TEND(2),X,TIME
      NOTMES=NOTMES+1
  115 X=AX(LX)
      M(2) = 2
  120 M(1) = K
C                SUBSCRIPTS K AND K-1 HAVE BEEN DETERMINED
C
      XSLOPE = (X - AX(K-1))/(AX(K) - AX(K-1))
      TLKUP1=AC(K-1)+XSLOPE*(AC(K)-AC(K-1))
      RETURN
 130  TLKUP1=AC(1)
      RETURN
C
 500  FORMAT(' ***TLKUP1 ',I3,' ERROR IN INDEPENDENT VARIABLE TABLE')
 520  FORMAT(' ','****FUNCTION',I5,' OUT OF TABLE AT ',A4,
     1   ' END -- X OR Y ARGUMENT INPUT=',1PG12.5,' AT ',1PG12.5)
      END
