STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   ENVIRONMENT ('QLIBHOME:STARLETQ')]
00003      0  0 MODULE starletq;
00004   C  0  0 {=============================================================================}
00005   C  0  0 {  This module contains definitions of system services that were left out     }
00006   C  0  0 {  of SYS$LIBRARY:STARLET for some reason.  These routines include most of    }
00007   C  0  0 {  those in the LIB, OTS, SYS, and FOR facilities.  All system services       }
00008   C  0  0 {  used by QPLOT should be defined here, and this module inheritied as        }
00009   C  0  0 {  necessary.                                                                 }
00010   C  0  0 {=============================================================================}
00011   C  0  0 {-- DEFINITIONS --------------------------------------------------------------}
00012   C  0  0 {=============================================================================}
00013      0  0 TYPE
00014      0  0    $UBYTE       = [ BYTE ] 0..255;
00015      0  0    $UWORD       = [ WORD ] -32768..32767;
00016      0  0    $DCOMPLEX    = RECORD re,im : double;  END;
00017      0  0    $POINTER     = ^$UBYTE;
00018   C  0  0 {=============================================================================}
00019   C  0  0 {-- EDT FACILITY -------------------------------------------------------------}
00020   C  0  0 {=============================================================================}
00021      0  0 [ EXTERNAL ]
00022      1  0 FUNCTION EDT$EDIT
00023      1  0    (%STDESCR infile     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00024      1  0     %STDESCR outfile    : PACKED ARRAY [l2..u2:integer] OF CHAR := %IMMED 0;
00025      1  0     %STDESCR comfile    : PACKED ARRAY [l3..u3:integer] OF CHAR := %IMMED 0;
00026      1  0     %STDESCR joufile    : PACKED ARRAY [l4..u4:integer] OF CHAR := %IMMED 0;
00027      1  0              flags      : integer                               := %IMMED 0)
00028   C  1  0                           {  Bit 0 : RECOVER                    }
00029   C  1  0                           {  Bit 1 : SIGNAL IF NO COMMAND FILE  }
00030   C  1  0                           {  Bit 2 : NO JOURNAL                 }
00031   C  1  0                           {  Bit 3 : NO OUTPUT                  }
00032   C  1  0                           {  Bit 4 : NO COMMAND                 }
00033   C  1  0                           {  Bit 5 : NO CREATE                  }
00034      1  0                         : integer;
00035      0  0 EXTERN;
00036   C  0  0 {=============================================================================}
00037   C  0  0 {-- FOR FACILITY -------------------------------------------------------------}
00038   C  0  0 {=============================================================================}
00039      0  0 [ EXTERNAL ]
00040      1  0 FUNCTION FOR$CVT_D_TF
00041      1  0    (VAR      value      : double;
00042      1  0     %STDESCR outstr     : PACKED ARRAY [l2..u2:integer] OF CHAR;
00043      1  0     %IMMED   fract      : integer;
00044      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00045      1  0     %IMMED   int        : integer                               := %IMMED 0;
00046      1  0     %IMMED   exp        : integer                               := %IMMED 2;
00047      1  0     %IMMED   flags      : integer                               := %IMMED 0)
00048      1  0                         : integer;
00049      0  0 EXTERN;
00050   C  0  0 {-----------------------------------------------------------------------------}
00051      0  0 [ EXTERNAL ]
00052      1  0 FUNCTION FOR$CVT_D_TG
00053      1  0    (VAR      value      : double;
00054      1  0     %STDESCR outstr     : PACKED ARRAY [l2..u2:integer] OF CHAR;
00055      1  0     %IMMED   fract      : integer;

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00056      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00057      1  0     %IMMED   int        : integer                               := %IMMED 0;
00058      1  0     %IMMED   exp        : integer                               := %IMMED 2;
00059      1  0     %IMMED   flags      : integer                               := %IMMED 0)
00060      1  0                         : integer;
00061      0  0 EXTERN;
00062   C  0  0 {-----------------------------------------------------------------------------}
00063      0  0 [ EXTERNAL ]
00064      1  0 FUNCTION FOR$CVT_H_TF
00065      1  0    (VAR      value      : quadruple;
00066      1  0     %STDESCR outstr     : PACKED ARRAY [l2..u2:integer] OF CHAR;
00067      1  0     %IMMED   fract      : integer;
00068      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00069      1  0     %IMMED   int        : integer                               := %IMMED 0;
00070      1  0     %IMMED   exp        : integer                               := %IMMED 4;
00071      1  0     %IMMED   flags      : integer                               := %IMMED 0)
00072      1  0                         : integer;
00073      0  0 EXTERN;
00074   C  0  0 {-----------------------------------------------------------------------------}
00075      0  0 [ EXTERNAL ]
00076      1  0 FUNCTION FOR$CVT_H_TG
00077      1  0    (VAR      value      : quadruple;
00078      1  0     %STDESCR outstr     : PACKED ARRAY [l2..u2:integer] OF CHAR;
00079      1  0     %IMMED   fract      : integer;
00080      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00081      1  0     %IMMED   int        : integer                               := %IMMED 0;
00082      1  0     %IMMED   exp        : integer                               := %IMMED 4;
00083      1  0     %IMMED   flags      : integer                               := %IMMED 0)
00084      1  0                         : integer;
00085      0  0 EXTERN;
00086   C  0  0 {-----------------------------------------------------------------------------}
00087      0  0 [ EXTERNAL ]
00088      1  0 FUNCTION FOR$SECNDS
00089      1  0    (         t0         : real)
00090      1  0                         : real;
00091      0  0 EXTERN;
00092   C  0  0 {=============================================================================}
00093   C  0  0 {-- LBR FACILITY -------------------------------------------------------------}
00094   C  0  0 {=============================================================================}
00095      0  0 [ EXTERNAL ]
00096      1  0 FUNCTION LBR$OUTPUT_HELP
00097      1  0    (%IMMED   [UNBOUND]    FUNCTION outroutine
00098      1  0    (%STDESCR msgstr     : PACKED ARRAY [l1..u1:integer] OF CHAR)
00099      1  0                         : integer;
00100      1  0              width      : integer                               := %IMMED 0;
00101      1  0     %STDESCR linedesc   : PACKED ARRAY [l3..u3:integer] OF CHAR := %IMMED 0;
00102      1  0     %STDESCR library    : PACKED ARRAY [l4..u4:integer] OF CHAR := %IMMED 0;
00103      1  0              flags      : integer                               := %IMMED 0;
00104      1  0     %IMMED   [UNBOUND]    FUNCTION inroutine
00105      1  0    (%STDESCR getstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00106      1  0     %STDESCR promptstr  : PACKED ARRAY [l2..u2:integer] OF CHAR := %IMMED 0;
00107      1  0     VAR      outlen     : integer)
00108      1  0                         : integer                               := %IMMED 0)
00109      1  0                         : integer;
00110      0  0 EXTERN;

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00111   C  0  0 {=============================================================================}
00112   C  0  0 {-- LIB FACILITY -------------------------------------------------------------}
00113   C  0  0 {=============================================================================}
00114      0  0 [ EXTERNAL ]
00115      1  0 FUNCTION LIB$GET_FOREIGN
00116      1  0    (%STDESCR getstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00117      1  0     %STDESCR userprompt : PACKED ARRAY [l2..u2:integer] OF CHAR := %IMMED 0;
00118      1  0     VAR      forlength  : integer)
00119      1  0                         : integer;
00120      0  0 EXTERN;
00121   C  0  0 {-----------------------------------------------------------------------------}
00122      0  0 [ EXTERNAL ]
00123      1  0 FUNCTION LIB$GET_INPUT
00124      1  0    (%STDESCR getstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00125      1  0     %STDESCR promptstr  : PACKED ARRAY [l2..u2:integer] OF CHAR := %IMMED 0;
00126      1  0     VAR      outlen     : integer)
00127      1  0                         : integer;
00128      0  0 EXTERN;
00129   C  0  0 {-----------------------------------------------------------------------------}
00130      0  0 [ EXTERNAL ] 
00131      1  0 FUNCTION LIB$GET_VM 
00132      1  0    (         size       : integer;  
00133      1  0     VAR      ptr        : $POINTER) 
00134      1  0                         : integer;
00135      0  0 EXTERN;
00136   C  0  0 {-----------------------------------------------------------------------------}
00137      0  0 [ EXTERNAL ] 
00138      1  0 FUNCTION LIB$FREE_VM 
00139      1  0    (         size       : integer;  
00140      1  0     VAR      ptr        : $POINTER) 
00141      1  0                         : integer;
00142      0  0 EXTERN;
00143   C  0  0 {-----------------------------------------------------------------------------}
00144      0  0 [ EXTERNAL ]
00145      1  0 FUNCTION LIB$POLYD
00146      1  0    (VAR      arg        : double;
00147      1  0     VAR      degree     : integer;
00148      1  0     VAR      coeff      : double;      { Highest order term, descending order }
00149      1  0     VAR      result     : double)
00150      1  0                         : integer;
00151      0  0 EXTERN;
00152   C  0  0 {-----------------------------------------------------------------------------}
00153      0  0 [ EXTERNAL ]
00154      1  0 FUNCTION LIB$POLYH
00155      1  0    (VAR      arg        : quadruple;
00156      1  0     VAR      degree     : integer;
00157      1  0     VAR      coeff      : quadruple;   { Highest order term, descending order }
00158      1  0     VAR      result     : quadruple)
00159      1  0                         : integer;
00160      0  0 EXTERN;
00161   C  0  0 {-----------------------------------------------------------------------------}
00162      0  0 [ EXTERNAL ]
00163      1  0 FUNCTION LIB$PUT_OUTPUT
00164      1  0    (%STDESCR msgstr     : PACKED ARRAY [l1..u1:integer] OF CHAR)
00165      1  0                         : integer;

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00166      0  0 EXTERN;
00167   C  0  0 {-----------------------------------------------------------------------------}
00168      0  0 [ EXTERNAL ]
00169      1  0 PROCEDURE LIB$SCREEN_INFO
00170      1  0    (VAR flags           : integer;
00171      1  0     VAR devtype         : char;
00172      1  0     VAR w,p             : $UWORD);
00173      0  0 EXTERN;
00174   C  0  0 {-----------------------------------------------------------------------------}
00175      0  0 [ EXTERNAL, ASYNCHRONOUS ]
00176      1  0 PROCEDURE LIB$SIGNAL
00177      1  0    (%IMMED   cond       : integer);
00178      0  0 EXTERN;
00179   C  0  0 {-----------------------------------------------------------------------------}
00180      0  0 [ EXTERNAL, ASYNCHRONOUS ]
00181      1  0 PROCEDURE LIB$STOP
00182      1  0    (%IMMED   cond       : integer);
00183      0  0 EXTERN;
00184   C  0  0 {-----------------------------------------------------------------------------}
00185      0  0 [ EXTERNAL ]
00186      1  0 FUNCTION LIB$SPAWN
00187      1  0    (%STDESCR str        : PACKED ARRAY [l1..u1:integer] OF char)
00188      1  0                         : integer;
00189      0  0 EXTERN;
00190   C  0  0 {=============================================================================}
00191   C  0  0 {-- MTH FACILITY -------------------------------------------------------------}
00192   C  0  0 {=============================================================================}
00193      0  0 [ EXTERNAL ]
00194      1  0 FUNCTION MTH$CDABS 
00195      1  0    (         z          : $DCOMPLEX) 
00196      1  0                         : double;
00197      0  0 EXTERN;
00198   C  0  0 {-----------------------------------------------------------------------------}
00199      0  0 [ EXTERNAL ] 
00200      1  0 PROCEDURE MTH$CDEXP 
00201      1  0    (VAR      out        : $DCOMPLEX;  
00202      1  0              a          : $DCOMPLEX);  
00203      0  0 EXTERN;
00204   C  0  0 {-----------------------------------------------------------------------------}
00205      0  0 [ EXTERNAL ] 
00206      1  0 FUNCTION MTH$DATAN2 
00207      1  0    (         x          : double;
00208      1  0              y          : double) 
00209      1  0                         : double;  
00210      0  0 EXTERN;
00211   C  0  0 {-----------------------------------------------------------------------------}
00212      0  0 [ EXTERNAL ] 
00213      1  0 FUNCTION MTH$DLOG
00214      1  0    (         x          : double) 
00215      1  0                         : double;  
00216      0  0 EXTERN;
00217   C  0  0 {-----------------------------------------------------------------------------}
00218      0  0 [ EXTERNAL ] 
00219      1  0 FUNCTION MTH$DLOG10 
00220      1  0    (         x          : double) 

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00221      1  0                         : double;  
00222      0  0 EXTERN;
00223   C  0  0 {-----------------------------------------------------------------------------}
00224      0  0 [ EXTERNAL ]
00225      1  0 FUNCTION MTH$DMAX1
00226      1  0    (         doublelist : [LIST] double)
00227      1  0                         : double;
00228      0  0 EXTERN;
00229   C  0  0 {-----------------------------------------------------------------------------}
00230      0  0 [ EXTERNAL ]
00231      1  0 FUNCTION MTH$DMIN1
00232      1  0    (         doublelist : [LIST] double)
00233      1  0                         : double;
00234      0  0 EXTERN;
00235   C  0  0 {-----------------------------------------------------------------------------}
00236      0  0 [ EXTERNAL ] 
00237      1  0 FUNCTION MTH$DMOD 
00238      1  0    (         x          : double;
00239      1  0              y          : double) 
00240      1  0                         : double;  
00241      0  0 EXTERN;
00242   C  0  0 {-----------------------------------------------------------------------------}
00243      0  0 [ EXTERNAL ]
00244      1  0 FUNCTION MTH$DSIGN 
00245      1  0    (         val        : double;
00246      1  0              sign       : double)    
00247      1  0                         : double;  
00248      0  0 EXTERN;
00249   C  0  0 {-----------------------------------------------------------------------------}
00250      0  0 [ EXTERNAL ] 
00251      1  0 FUNCTION MTH$HLOG10 
00252      1  0    (         x          : quadruple) 
00253      1  0                         : quadruple;  
00254      0  0 EXTERN;
00255   C  0  0 {-----------------------------------------------------------------------------}
00256      0  0 [ EXTERNAL ]
00257      1  0 FUNCTION MTH$JMAX0
00258      1  0    (         intlist    : [LIST] integer)
00259      1  0                         : integer;
00260      0  0 EXTERN;
00261   C  0  0 {-----------------------------------------------------------------------------}
00262      0  0 [ EXTERNAL ]
00263      1  0 FUNCTION MTH$JMIN0
00264      1  0    (         intlist    : [LIST] integer)
00265      1  0                         : integer;
00266      0  0 EXTERN;
00267   C  0  0 {=============================================================================}
00268   C  0  0 {-- OTS FACILITY -------------------------------------------------------------}
00269   C  0  0 {=============================================================================}
00270      0  0 [ EXTERNAL ]
00271      1  0 FUNCTION OTS$CVT_TI_L
00272      1  0    (%STDESCR inpstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00273      1  0     VAR      value      : integer;
00274      1  0     %IMMED   valuesize  : integer                               := %IMMED 0;
00275      1  0     %IMMED   flags      : integer                               := %IMMED 0)

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)

-LINE-IDC-PL-SL-

00276      1  0                         : integer;
00277      0  0 EXTERN;
00278   C  0  0 {-----------------------------------------------------------------------------}
00279      0  0 [ EXTERNAL ]
00280      1  0 FUNCTION OTS$CVT_T_D
00281      1  0    (%STDESCR inpstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00282      1  0     VAR      value      : double;
00283      1  0     %IMMED   digits     : integer                               := %IMMED 0;
00284      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00285      1  0     %IMMED   flags      : integer                               := %IMMED 0;
00286      1  0     VAR      xbits      : [ TRUNCATE ] $UWORD)
00287      1  0                         : integer;
00288      0  0 EXTERN;
00289   C  0  0 {-----------------------------------------------------------------------------}
00290      0  0 [ EXTERNAL ]
00291      1  0 FUNCTION OTS$CVT_T_H
00292      1  0    (%STDESCR inpstr     : PACKED ARRAY [l1..u1:integer] OF CHAR;
00293      1  0     VAR      value      : quadruple;
00294      1  0     %IMMED   digits     : integer                               := %IMMED 0;
00295      1  0     %IMMED   scale      : integer                               := %IMMED 0;
00296      1  0     %IMMED   flags      : integer                               := %IMMED 0;
00297      1  0     VAR      xbits      : [ TRUNCATE ] $UWORD)
00298      1  0                         : integer;
00299      0  0 EXTERN;
00300   C  0  0 {=============================================================================}
00301   C  0  0 {-- SYS FACILITY -------------------------------------------------------------}
00302   C  0  0 {=============================================================================}
00303      0  0 [ EXTERNAL ]
00304      1  0 FUNCTION SYS$SETDDIR
00305      1  0    (%STDESCR setstr     : PACKED ARRAY [l1..u1:integer] OF char := %IMMED 0;
00306      1  0     VAR      getlen     : integer                               := %IMMED 0;
00307      1  0     %STDESCR getstr     : PACKED ARRAY [l3..u3:integer] OF char := %IMMED 0)
00308      1  0                         : integer;
00309      0  0 EXTERN;
00310   C  0  0 {-----------------------------------------------------------------------------}
00311      0  0 [ EXTERNAL ]
00312      1  0 FUNCTION SYS$trnlog 
00313      1  0    (%STDESCR lognam     : PACKED ARRAY [l1..u1:integer] OF char;
00314      1  0     VAR      rsllen     : $UWORD                                := %IMMED 0;
00315      1  0     %STDESCR rslbuf     : PACKED ARRAY [l3..u3:integer] OF char;
00316      1  0     VAR      table      : $UBYTE                                := %IMMED 0;
00317      1  0     VAR      acmode     : $UBYTE                                := %IMMED 0;
00318      1  0     %IMMED   dsbmsk     : integer                               := %IMMED 0) 
00319      1  0                         : integer;
00320      0  0 EXTERN;
00321   C  0  0 {=============================================================================}
00322      0  0 END.

STARLETQ                                                        23-Dec-1988 09:50:55    VAX Pascal V3.7-254                Page    7
QPLOT                           Pascal Compilation Statistics   23-Jul-1987 10:51:21    [QPLOT.QPLOT.SOURCE]STARLETQ.PAS;44 (1)


GENERAL                                                         23-Dec-1988 09:51:06    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  11-Jan-1988 13:02:45    [QPLOT.QPLOT.SOURCE]GENERAL.PAS;20 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ'),
00003      0  0   ENVIRONMENT ('GENERAL') ]
00004      0  0 MODULE general (existfile);
00005   C  0  0 {=============================================================================}
00006   C  0  0 {  This module is one of several that provide Pascal extensions that cover    }
00007   C  0  0 {  often needed capabilities that are not present in the langueage.  The      }
00008   C  0  0 {  module "general" has extensions that cannot be grouped in the other        }
00009   C  0  0 {  extensions.                                                                }
00010   C  0  0 {=============================================================================}
00011      0  0 [ HIDDEN ] VAR
00012      0  0    existfile : text;
00013   C  0  0 {=============================================================================}
00014      0  0 [ GLOBAL ]
00015      1  0 PROCEDURE wait (twait : double);
00016   C  1  0 { Purpose -- Wait for a specified number of seconds }
00017      1  0 VAR
00018      1  0    t : real;
00019      1  1 BEGIN
00020      1  1 t := FOR$SECNDS(0.0);
00021      1  1 WHILE FOR$SECNDS(t) < twait DO;
00022      0  0 END;
00023   C  0  0 {-----------------------------------------------------------------------------}
00024      0  0 [ GLOBAL ]
00025      1  0 FUNCTION exist (filename : VARYING [len] OF char) : boolean;
00026      1  1 BEGIN
00027      1  1 close (existfile,ERROR:=CONTINUE);
00028      1  1 open (existfile,filename,OLD,ERROR:=CONTINUE);
00029      1  1 exist := status (existfile) = 0;
00030      1  1 close (existfile,ERROR:=CONTINUE);
00031      0  0 END;
00032   C  0  0 {-----------------------------------------------------------------------------}
00033      0  0 [ GLOBAL ]
00034      1  0 FUNCTION goodfilename (filename : VARYING [len] OF char) : boolean;
00035      1  1 BEGIN
00036      1  1 close (existfile,ERROR:=CONTINUE);
00037      1  1 open (existfile,filename,NEW,DISPOSITION:=DELETE,ERROR:=CONTINUE);
00038      1  1 goodfilename := status (existfile) = 0;
00039      1  1 close (existfile,ERROR:=CONTINUE);
00040      0  0 END;
00041   C  0  0 {-----------------------------------------------------------------------------}
00042      0  0 [ GLOBAL ]
00043      1  0 PROCEDURE getforeign (VAR st : VARYING [LEN] OF char);
00044      1  0 VAR
00045      1  0    ch255    : PACKED ARRAY [1..255] OF char;
00046      1  0    i,n,l    : integer;
00047      1  1 BEGIN
00048      1  1 LIB$GET_FOREIGN (ch255,,n);
00049      1  1 l := 0;
00050      1  1 FOR i := 1 TO LEN DO
00051      1  1    IF ch255[i] IN ['!'..'}'] THEN l := i;
00052      1  1 st := '';
00053      1  1 FOR i := 1 TO LEN DO
00054      1  1    IF i <= l
00055      1  1     THEN

GENERAL                                                         23-Dec-1988 09:51:06    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  11-Jan-1988 13:02:45    [QPLOT.QPLOT.SOURCE]GENERAL.PAS;20 (1)

-LINE-IDC-PL-SL-

00056      1  2      BEGIN
00057      1  2      IF ch255[i] IN ['a'..'z'] THEN ch255[i] := chr(ord(ch255[i])-32);
00058      1  2      IF ch255[i] IN [' '..'}'] THEN st := st + ch255[i];
00059      1  1      END;
00060      0  0 END;
00061   C  0  0 {=============================================================================}
00062      0  0 END.

GENERAL                                                         23-Dec-1988 09:51:06    VAX Pascal V3.7-254                Page    3
QPLOT                           Pascal Compilation Statistics   11-Jan-1988 13:02:45    [QPLOT.QPLOT.SOURCE]GENERAL.PAS;20 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                 732  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 17  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        11         4



DIRECTORY                                                       23-Dec-1988 09:51:18    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  23-Jul-1987 10:47:58    [QPLOT.QPLOT.SOURCE]DIRECTORY.PAS;14 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('SYS$LIBRARY:STARLET',
00003      0  0                'QLIBHOME:STARLETQ'),
00004      0  0   ENVIRONMENT ('QLIBHOME:DIRECTORY')]
00005      0  0 MODULE directory;
00006   C  0  0 {=============================================================================}
00007   C  0  0 {  This module is one of several that provide Pascal extensions that cover    }
00008   C  0  0 {  often needed capabilities that are not present in the langueage.  The      }
00009   C  0  0 {  module "directory" has extensions that provide support for setting,        }
00010   C  0  0 {  retrieving, and reading the default directory.                             }
00011   C  0  0 {=============================================================================}
00012      0  0 TYPE
00013      0  0    filestring   = [ HIDDEN ] PACKED ARRAY [1..NAM$C_MAXRSS] OF char;
00014      0  0 VAR
00015      0  0    inp_str      : [ HIDDEN, VOLATILE ] filestring;
00016      0  0    exp_str      : [ HIDDEN, VOLATILE ] filestring;
00017      0  0    res_str      : [ HIDDEN, VOLATILE ] filestring;
00018      0  0    fab_blk      : [ HIDDEN, VOLATILE ] fab$type;
00019      0  0    nam_blk      : [ HIDDEN, VOLATILE ] nam$type;
00020      0  0 VAR
00021      0  0    endoffilesearch : boolean := true;
00022      0  0    fs              : RECORD
00023      0  0                      node     : VARYING [255] OF char;
00024      0  0                      dev      : VARYING [255] OF char;
00025      0  0                      dir      : VARYING [255] OF char;
00026      0  0                      name     : VARYING [255] OF char;
00027      0  0                      typ      : VARYING [255] OF char;
00028      0  0                      ver      : VARYING [255] OF char;
00029      0  0                      END;
00030   C  0  0 {=============================================================================}
00031      0  0 [ GLOBAL ]
00032      1  0 PROCEDURE getdirectory (VAR st : VARYING [LEN] OF char);
00033      1  0 VAR
00034      1  0    ch255    : PACKED ARRAY [1..255] OF char;
00035      1  0    i,n      : integer;
00036      1  1 BEGIN
00037      1  1 SYS$SETDDIR (,n,ch255);
00038      1  1 st := '';
00039      1  1 FOR i := 1 TO LEN DO
00040      1  1    IF (i <= n) AND (ch255[i] IN [' '..'}'])
00041      1  1     THEN
00042      1  2      BEGIN
00043      1  2      st := st + ch255[i];
00044      1  2      IF st[i] IN ['a'..'z'] THEN st[i] := chr(ord(st[i])-32);
00045      1  1      END;
00046      0  0 END;
00047   C  0  0 {-----------------------------------------------------------------------------}
00048      0  0 [ GLOBAL ]
00049      1  0 PROCEDURE setdirectory (st : VARYING [LEN] OF char);
00050      1  0 VAR
00051      1  0    ch255    : PACKED ARRAY [1..255] OF char;
00052      1  0    i,n      : integer;
00053      1  1 BEGIN
00054      1  1 FOR i := 1 TO 255 DO
00055      1  1    IF i <= length(st)

DIRECTORY                                                       23-Dec-1988 09:51:18    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  23-Jul-1987 10:47:58    [QPLOT.QPLOT.SOURCE]DIRECTORY.PAS;14 (1)

-LINE-IDC-PL-SL-

00056      1  1     THEN ch255[i] := st[i]
00057      1  1     ELSE ch255[i] := ' ';
00058      1  1 SYS$SETDDIR (ch255,,);
00059      0  0 END;
00060   C  0  0 {-----------------------------------------------------------------------------}
00061      0  0 [ GLOBAL ]
00062      1  0 PROCEDURE startfilesearch (st : VARYING [l1] OF char);
00063      1  1 BEGIN
00064      1  1 inp_str := st.body;
00065      1  1 fab_blk.FAB$B_FNS := length(st);
00066      1  1 $parse (fab_blk);
00067      1  1 endoffilesearch := $search (fab_blk) <> RMS$_SUC;
00068      0  0 END;
00069   C  0  0 {-----------------------------------------------------------------------------}
00070      0  0 [ GLOBAL ]
00071      1  0 PROCEDURE filesearch (VAR out : VARYING [l1] OF char);
00072      1  0 TYPE
00073      1  0    p      = ^filestring;
00074      1  1 BEGIN
00075      1  1 out.length := nam_blk.NAM$B_RSL;
00076      1  1 out.body := res_str;
00077      1  1 fs.node := substr (nam_blk.NAM$L_NODE::p^,1,nam_blk.NAM$B_NODE);
00078      1  1 fs.dev  := substr (nam_blk.NAM$L_DEV ::p^,1,nam_blk.NAM$B_DEV );
00079      1  1 fs.dir  := substr (nam_blk.NAM$L_DIR ::p^,1,nam_blk.NAM$B_DIR );
00080      1  1 fs.name := substr (nam_blk.NAM$L_NAME::p^,1,nam_blk.NAM$B_NAME);
00081      1  1 fs.typ  := substr (nam_blk.NAM$L_TYPE::p^,1,nam_blk.NAM$B_TYPE);
00082      1  1 fs.ver  := substr (nam_blk.NAM$L_VER ::p^,1,nam_blk.NAM$B_VER );
00083      1  1 endoffilesearch := $search (fab_blk) <> RMS$_SUC;
00084      0  0 END;
00085   C  0  0 {-----------------------------------------------------------------------------}
00086      0  0 [ INITIALIZE ]
00087      1  0 PROCEDURE fabinit;
00088      1  0 VAR
00089      1  0    i : integer;
00090      1  1 BEGIN
00091      1  1 WITH fab_blk DO
00092      1  2    BEGIN
00093      1  2    FAB$L_ALQ       := 0;
00094      1  2    FAB$B_BID       := FAB$C_BID;
00095      1  2    FAB$B_BKS       := 0;
00096      1  2    FAB$B_BLN       := FAB$C_BLN;
00097      1  2    FAB$W_BLS       := 0;
00098      1  2    FAB$V_CHAN_MODE := 0;
00099      1  2    FAB$L_CTX       := 0;
00100      1  2    FAB$W_DEQ       := 0;
00101      1  2    FAB$L_DEV       := 0;
00102      1  2    FAB$L_DNA       := 0;
00103      1  2    FAB$B_DNS       := 0;
00104      1  2    FAB$B_FAC       := 0;
00105      1  2    FAB$L_FNA       := (address(inp_str))::unsigned;
00106      1  2    FAB$B_FNS       := 0;
00107      1  2    FAB$L_FOP       := 0; { FAB$M_OFP; }
00108      1  2    FAB$B_FSZ       := 0;
00109      1  2    FAB$W_GBC       := 0;
00110      1  2    FAB$W_IFI       := 0;

DIRECTORY                                                       23-Dec-1988 09:51:18    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  23-Jul-1987 10:47:58    [QPLOT.QPLOT.SOURCE]DIRECTORY.PAS;14 (1)

-LINE-IDC-PL-SL-

00111      1  2    FAB$V_LNM_MODE  := 0;
00112      1  2    FAB$L_MRN       := 0;
00113      1  2    FAB$W_MRS       := 0;
00114      1  2    FAB$L_NAM       := (address(nam_blk))::unsigned;
00115      1  2    FAB$B_ORG       := FAB$C_SEQ;
00116      1  2    FAB$B_RAT       := FAB$M_CR;
00117      1  2    FAB$B_RFM       := FAB$C_UDF;
00118      1  2    FAB$B_RTV       := 0;
00119      1  2    FAB$L_SDC       := 0;
00120      1  2    FAB$B_SHR       := FAB$M_NIL;
00121      1  2    FAB$L_STS       := 0;
00122      1  2    FAB$L_STV       := 0;
00123      1  2    FAB$L_XAB       := 0;
00124      1  1    END;
00125      1  1 WITH nam_blk DO
00126      1  2    BEGIN
00127      1  2    NAM$B_BID       := NAM$C_BID;
00128      1  2    NAM$B_BLN       := NAM$C_BLN;
00129      1  2    NAM$B_DEV       := 0;
00130      1  2    NAM$L_DEV       := 0;
00131      1  2    FOR i := 1 TO 3 DO 
00132      1  2    NAM$W_DID[i]    := 0;
00133      1  2    NAM$B_DIR       := 0;
00134      1  2    NAM$L_DIR       := 0;
00135      1  2    FOR i := 1 TO 16 DO 
00136      1  2    NAM$T_DVI[i]    := chr(0);
00137      1  2    NAM$L_ESA       := (address(exp_str))::unsigned;
00138      1  2    NAM$B_ESL       := 0;
00139      1  2    NAM$B_ESS       := NAM$C_MAXRSS;
00140      1  2    FOR i := 1 TO 3 DO 
00141      1  2    NAM$W_FID[i]    := 0;
00142      1  2    NAM$L_FNB       := 0;
00143      1  2    NAM$B_NAME      := 0;
00144      1  2    NAM$L_NAME      := 0;
00145      1  2    NAM$B_NODE      := 0;
00146      1  2    NAM$L_NODE      := 0;
00147      1  2    NAM$B_NOP       := 0;
00148      1  2    NAM$L_RLF       := 0;
00149      1  2    NAM$L_RSA       := (address(res_str))::unsigned;
00150      1  2    NAM$B_RSL       := 0;
00151      1  2    NAM$B_RSS       := NAM$C_MAXRSS;
00152      1  2    NAM$B_TYPE      := 0;
00153      1  2    NAM$L_TYPE      := 0;
00154      1  2    NAM$B_VER       := 0;
00155      1  2    NAM$L_VER       := 0;
00156      1  2    NAM$L_WCC       := 0;
00157      1  1    END;
00158      0  0 END;
00159   C  0  0 {=============================================================================}
00160      0  0 END.

DIRECTORY                                                       23-Dec-1988 09:51:18    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   23-Jul-1987 10:47:58    [QPLOT.QPLOT.SOURCE]DIRECTORY.PAS;14 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                1539  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                               2490  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
LIB$INITIALIZE                          4  NOVEC,NOWRT,  RD,NOEXE,NOSHR,  GBL,  REL,  CON,NOPIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

SYS$SYSROOT:[SYSLIB]STARLET.PEN;5                      20386       338         2
DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        10         4



FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  19-Oct-1987 11:02:23    DUA1:[QPLOT.QPLOT.SOURCE]FONT.PAS;8 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   ENVIRONMENT ('QLIBHOME:FONT') ]
00003      0  0 MODULE font;
00004   C  0  0 {=============================================================================}
00005      0  0 CONST
00006      0  0    LIMSTROKES      = 15;
00007      0  0 [ HIDDEN ] TYPE
00008      0  0    ssinteger       = [ BYTE ] -128..127;
00009      0  0    line_type       = ARRAY [1..4] OF ssinteger;
00010      0  0 VAR
00011      0  0    vectorsymbol    : [ GLOBAL ] ARRAY [LIMSTROKES*32..LIMSTROKES*128-1] 
00012      0  0                          OF line_type
00013      0  0                    := %INCLUDE 'SYMBOL.I'
00014 I C  0  0       { 32 " "}
00015 I    0  0   (( -1,  0,  0,  0),
00016 I    0  0    ( -1,  0,  0,  0),
00017 I    0  0    ( -1,  0,  0,  0),
00018 I    0  0    ( -1,  0,  0,  0),
00019 I    0  0    ( -1,  0,  0,  0),
00020 I    0  0    ( -1,  0,  0,  0),
00021 I    0  0    ( -1,  0,  0,  0),
00022 I    0  0    ( -1,  0,  0,  0),
00023 I    0  0    ( -1,  0,  0,  0),
00024 I    0  0    ( -1,  0,  0,  0),
00025 I    0  0    ( -1,  0,  0,  0),
00026 I    0  0    ( -1,  0,  0,  0),
00027 I    0  0    ( -1,  0,  0,  0),
00028 I    0  0    ( -1,  0,  0,  0),
00029 I    0  0    ( -1,  0,  0,  0),
00030 I C  0  0        { 33 "!"}
00031 I    0  0    ( 30, 25, 30,100),
00032 I    0  0    ( 30,  0, 30,  5),
00033 I    0  0    ( -1,  0,  0,  0),
00034 I    0  0    ( -1,  0,  0,  0),
00035 I    0  0    ( -1,  0,  0,  0),
00036 I    0  0    ( -1,  0,  0,  0),
00037 I    0  0    ( -1,  0,  0,  0),
00038 I    0  0    ( -1,  0,  0,  0),
00039 I    0  0    ( -1,  0,  0,  0),
00040 I    0  0    ( -1,  0,  0,  0),
00041 I    0  0    ( -1,  0,  0,  0),
00042 I    0  0    ( -1,  0,  0,  0),
00043 I    0  0    ( -1,  0,  0,  0),
00044 I    0  0    ( -1,  0,  0,  0),
00045 I    0  0    ( -1,  0,  0,  0),
00046 I C  0  0        { 34 """}
00047 I    0  0    ( 10, 80, 10,100),
00048 I    0  0    ( 50, 80, 50,100),
00049 I    0  0    ( -1,  0,  0,  0),
00050 I    0  0    ( -1,  0,  0,  0),
00051 I    0  0    ( -1,  0,  0,  0),
00052 I    0  0    ( -1,  0,  0,  0),
00053 I    0  0    ( -1,  0,  0,  0),
00054 I    0  0    ( -1,  0,  0,  0),
00055 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00056 I    0  0    ( -1,  0,  0,  0),
00057 I    0  0    ( -1,  0,  0,  0),
00058 I    0  0    ( -1,  0,  0,  0),
00059 I    0  0    ( -1,  0,  0,  0),
00060 I    0  0    ( -1,  0,  0,  0),
00061 I    0  0    ( -1,  0,  0,  0),
00062 I C  0  0        { 35 "#"}
00063 I    0  0    ( 20, 10, 20, 90),
00064 I    0  0    ( 40, 10, 40, 90),
00065 I    0  0    (  0, 40, 60, 40),
00066 I    0  0    (  0, 60, 60, 60),
00067 I    0  0    ( -1,  0,  0,  0),
00068 I    0  0    ( -1,  0,  0,  0),
00069 I    0  0    ( -1,  0,  0,  0),
00070 I    0  0    ( -1,  0,  0,  0),
00071 I    0  0    ( -1,  0,  0,  0),
00072 I    0  0    ( -1,  0,  0,  0),
00073 I    0  0    ( -1,  0,  0,  0),
00074 I    0  0    ( -1,  0,  0,  0),
00075 I    0  0    ( -1,  0,  0,  0),
00076 I    0  0    ( -1,  0,  0,  0),
00077 I    0  0    ( -1,  0,  0,  0),
00078 I C  0  0        { 36 "$"}
00079 I    0  0    (  8, 20, 20, 10),
00080 I    0  0    ( 20, 10, 40, 10),
00081 I    0  0    ( 40, 10, 50, 20),
00082 I    0  0    ( 50, 20, 53, 30),
00083 I    0  0    ( 53, 30, 50, 40),
00084 I    0  0    ( 50, 40, 40, 50),
00085 I    0  0    ( 40, 50, 20, 50),
00086 I    0  0    ( 20, 50, 10, 60),
00087 I    0  0    ( 10, 60,  7, 70),
00088 I    0  0    (  7, 70, 10, 80),
00089 I    0  0    ( 10, 80, 20, 90),
00090 I    0  0    ( 20, 90, 40, 90),
00091 I    0  0    ( 40, 90, 53, 80),
00092 I    0  0    ( 30,  0, 30,100),
00093 I    0  0    ( -1,  0,  0,  0),
00094 I C  0  0        { 37 "%"}
00095 I    0  0    (  0,  0, 60,100),
00096 I    0  0    ( 20, 75, 10, 85),
00097 I    0  0    ( 10, 85, 20, 95),
00098 I    0  0    ( 20, 95, 30, 85),
00099 I    0  0    ( 30, 85, 20, 75),
00100 I    0  0    ( 40,  5, 30, 15),
00101 I    0  0    ( 30, 15, 40, 25),
00102 I    0  0    ( 40, 25, 50, 15),
00103 I    0  0    ( 50, 15, 40,  5),
00104 I    0  0    ( -1,  0,  0,  0),
00105 I    0  0    ( -1,  0,  0,  0),
00106 I    0  0    ( -1,  0,  0,  0),
00107 I    0  0    ( -1,  0,  0,  0),
00108 I    0  0    ( -1,  0,  0,  0),
00109 I    0  0    ( -1,  0,  0,  0),
00110 I C  0  0        { 38 "&"}

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00111 I    0  0    ( 60, 23, 52, 10),
00112 I    0  0    ( 52, 10, 43,  0),
00113 I    0  0    ( 43,  0, 10,  0),
00114 I    0  0    ( 10,  0,  0, 10),
00115 I    0  0    (  0, 10,  0, 31),
00116 I    0  0    (  0, 31, 10, 40),
00117 I    0  0    ( 10, 40, 30, 55),
00118 I    0  0    ( 30, 55, 45, 80),
00119 I    0  0    ( 45, 80, 45, 90),
00120 I    0  0    ( 45, 90, 35,100),
00121 I    0  0    ( 35,100, 25,100),
00122 I    0  0    ( 25,100, 15, 90),
00123 I    0  0    ( 15, 90, 15, 80),
00124 I    0  0    ( 15, 80, 30, 55),
00125 I    0  0    ( 30, 55, 60,  0),
00126 I C  0  0        { 39 "'"}
00127 I    0  0    ( 39, 70, 50,100),
00128 I    0  0    ( -1,  0,  0,  0),
00129 I    0  0    ( -1,  0,  0,  0),
00130 I    0  0    ( -1,  0,  0,  0),
00131 I    0  0    ( -1,  0,  0,  0),
00132 I    0  0    ( -1,  0,  0,  0),
00133 I    0  0    ( -1,  0,  0,  0),
00134 I    0  0    ( -1,  0,  0,  0),
00135 I    0  0    ( -1,  0,  0,  0),
00136 I    0  0    ( -1,  0,  0,  0),
00137 I    0  0    ( -1,  0,  0,  0),
00138 I    0  0    ( -1,  0,  0,  0),
00139 I    0  0    ( -1,  0,  0,  0),
00140 I    0  0    ( -1,  0,  0,  0),
00141 I    0  0    ( -1,  0,  0,  0),
00142 I C  0  0        { 40 "("}
00143 I    0  0    ( 50,  0, 40, 10),
00144 I    0  0    ( 40, 10, 33, 20),
00145 I    0  0    ( 33, 20, 30, 30),
00146 I    0  0    ( 30, 30, 30, 70),
00147 I    0  0    ( 30, 70, 33, 80),
00148 I    0  0    ( 33, 80, 40, 90),
00149 I    0  0    ( 40, 90, 50,100),
00150 I    0  0    ( -1,  0,  0,  0),
00151 I    0  0    ( -1,  0,  0,  0),
00152 I    0  0    ( -1,  0,  0,  0),
00153 I    0  0    ( -1,  0,  0,  0),
00154 I    0  0    ( -1,  0,  0,  0),
00155 I    0  0    ( -1,  0,  0,  0),
00156 I    0  0    ( -1,  0,  0,  0),
00157 I    0  0    ( -1,  0,  0,  0),
00158 I C  0  0        { 41 ")"}
00159 I    0  0    ( 10,  0, 20, 10),
00160 I    0  0    ( 20, 10, 27, 20),
00161 I    0  0    ( 27, 20, 30, 30),
00162 I    0  0    ( 30, 30, 30, 70),
00163 I    0  0    ( 30, 70, 27, 80),
00164 I    0  0    ( 27, 80, 20, 90),
00165 I    0  0    ( 20, 90, 10,100),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00166 I    0  0    ( -1,  0,  0,  0),
00167 I    0  0    ( -1,  0,  0,  0),
00168 I    0  0    ( -1,  0,  0,  0),
00169 I    0  0    ( -1,  0,  0,  0),
00170 I    0  0    ( -1,  0,  0,  0),
00171 I    0  0    ( -1,  0,  0,  0),
00172 I    0  0    ( -1,  0,  0,  0),
00173 I    0  0    ( -1,  0,  0,  0),
00174 I C  0  0        { 42 "*"}
00175 I    0  0    ( 10, 20, 50, 80),
00176 I    0  0    ( 50, 20, 10, 80),
00177 I    0  0    (  0, 50, 60, 50),
00178 I    0  0    ( -1,  0,  0,  0),
00179 I    0  0    ( -1,  0,  0,  0),
00180 I    0  0    ( -1,  0,  0,  0),
00181 I    0  0    ( -1,  0,  0,  0),
00182 I    0  0    ( -1,  0,  0,  0),
00183 I    0  0    ( -1,  0,  0,  0),
00184 I    0  0    ( -1,  0,  0,  0),
00185 I    0  0    ( -1,  0,  0,  0),
00186 I    0  0    ( -1,  0,  0,  0),
00187 I    0  0    ( -1,  0,  0,  0),
00188 I    0  0    ( -1,  0,  0,  0),
00189 I    0  0    ( -1,  0,  0,  0),
00190 I C  0  0        { 43 "+"}
00191 I    0  0    ( 30, 20, 30, 80),
00192 I    0  0    (  0, 50, 60, 50),
00193 I    0  0    ( -1,  0,  0,  0),
00194 I    0  0    ( -1,  0,  0,  0),
00195 I    0  0    ( -1,  0,  0,  0),
00196 I    0  0    ( -1,  0,  0,  0),
00197 I    0  0    ( -1,  0,  0,  0),
00198 I    0  0    ( -1,  0,  0,  0),
00199 I    0  0    ( -1,  0,  0,  0),
00200 I    0  0    ( -1,  0,  0,  0),
00201 I    0  0    ( -1,  0,  0,  0),
00202 I    0  0    ( -1,  0,  0,  0),
00203 I    0  0    ( -1,  0,  0,  0),
00204 I    0  0    ( -1,  0,  0,  0),
00205 I    0  0    ( -1,  0,  0,  0),
00206 I C  0  0        { 44 ","}
00207 I    0  0    ( 30, 20, 37, 10),
00208 I    0  0    ( 37, 10, 39,  4),
00209 I    0  0    ( 39,  4, 39,-14),
00210 I    0  0    ( 39,-14, 30,-25),
00211 I    0  0    ( -1,  0,  0,  0),
00212 I    0  0    ( -1,  0,  0,  0),
00213 I    0  0    ( -1,  0,  0,  0),
00214 I    0  0    ( -1,  0,  0,  0),
00215 I    0  0    ( -1,  0,  0,  0),
00216 I    0  0    ( -1,  0,  0,  0),
00217 I    0  0    ( -1,  0,  0,  0),
00218 I    0  0    ( -1,  0,  0,  0),
00219 I    0  0    ( -1,  0,  0,  0),
00220 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00221 I    0  0    ( -1,  0,  0,  0),
00222 I C  0  0        { 45 "-"}
00223 I    0  0    (  0, 50, 60, 50),
00224 I    0  0    ( -1,  0,  0,  0),
00225 I    0  0    ( -1,  0,  0,  0),
00226 I    0  0    ( -1,  0,  0,  0),
00227 I    0  0    ( -1,  0,  0,  0),
00228 I    0  0    ( -1,  0,  0,  0),
00229 I    0  0    ( -1,  0,  0,  0),
00230 I    0  0    ( -1,  0,  0,  0),
00231 I    0  0    ( -1,  0,  0,  0),
00232 I    0  0    ( -1,  0,  0,  0),
00233 I    0  0    ( -1,  0,  0,  0),
00234 I    0  0    ( -1,  0,  0,  0),
00235 I    0  0    ( -1,  0,  0,  0),
00236 I    0  0    ( -1,  0,  0,  0),
00237 I    0  0    ( -1,  0,  0,  0),
00238 I C  0  0        { 46 "."}
00239 I    0  0    ( 30,  0, 30,  0),
00240 I    0  0    ( 30,  0, 30,  5),
00241 I    0  0    ( 30,  5, 30,  5),
00242 I    0  0    ( -1,  0,  0,  0),
00243 I    0  0    ( -1,  0,  0,  0),
00244 I    0  0    ( -1,  0,  0,  0),
00245 I    0  0    ( -1,  0,  0,  0),
00246 I    0  0    ( -1,  0,  0,  0),
00247 I    0  0    ( -1,  0,  0,  0),
00248 I    0  0    ( -1,  0,  0,  0),
00249 I    0  0    ( -1,  0,  0,  0),
00250 I    0  0    ( -1,  0,  0,  0),
00251 I    0  0    ( -1,  0,  0,  0),
00252 I    0  0    ( -1,  0,  0,  0),
00253 I    0  0    ( -1,  0,  0,  0),
00254 I C  0  0        { 47 "/"}
00255 I    0  0    ( 10,  0, 50,100),
00256 I    0  0    ( -1,  0,  0,  0),
00257 I    0  0    ( -1,  0,  0,  0),
00258 I    0  0    ( -1,  0,  0,  0),
00259 I    0  0    ( -1,  0,  0,  0),
00260 I    0  0    ( -1,  0,  0,  0),
00261 I    0  0    ( -1,  0,  0,  0),
00262 I    0  0    ( -1,  0,  0,  0),
00263 I    0  0    ( -1,  0,  0,  0),
00264 I    0  0    ( -1,  0,  0,  0),
00265 I    0  0    ( -1,  0,  0,  0),
00266 I    0  0    ( -1,  0,  0,  0),
00267 I    0  0    ( -1,  0,  0,  0),
00268 I    0  0    ( -1,  0,  0,  0),
00269 I    0  0    ( -1,  0,  0,  0),
00270 I C  0  0        { 48 "0"}
00271 I    0  0    ( 20,100, 40,100),
00272 I    0  0    ( 40,100, 60, 70),
00273 I    0  0    ( 60, 70, 60, 30),
00274 I    0  0    ( 60, 30, 40,  0),
00275 I    0  0    ( 40,  0, 20,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00276 I    0  0    ( 20,  0,  0, 30),
00277 I    0  0    (  0, 30,  0, 70),
00278 I    0  0    (  0, 70, 20,100),
00279 I    0  0    ( -1,  0,  0,  0),
00280 I    0  0    ( -1,  0,  0,  0),
00281 I    0  0    ( -1,  0,  0,  0),
00282 I    0  0    ( -1,  0,  0,  0),
00283 I    0  0    ( -1,  0,  0,  0),
00284 I    0  0    ( -1,  0,  0,  0),
00285 I    0  0    ( -1,  0,  0,  0),
00286 I C  0  0        { 49 "1"}
00287 I    0  0    ( 20,  0, 40,  0),
00288 I    0  0    ( 30,  0, 30,100),
00289 I    0  0    ( 30,100, 20, 90),
00290 I    0  0    ( -1,  0,  0,  0),
00291 I    0  0    ( -1,  0,  0,  0),
00292 I    0  0    ( -1,  0,  0,  0),
00293 I    0  0    ( -1,  0,  0,  0),
00294 I    0  0    ( -1,  0,  0,  0),
00295 I    0  0    ( -1,  0,  0,  0),
00296 I    0  0    ( -1,  0,  0,  0),
00297 I    0  0    ( -1,  0,  0,  0),
00298 I    0  0    ( -1,  0,  0,  0),
00299 I    0  0    ( -1,  0,  0,  0),
00300 I    0  0    ( -1,  0,  0,  0),
00301 I    0  0    ( -1,  0,  0,  0),
00302 I C  0  0        { 50 "2"}
00303 I    0  0    (  0, 81, 12, 95),
00304 I    0  0    ( 12, 95, 30,100),
00305 I    0  0    ( 30,100, 48, 95),
00306 I    0  0    ( 48, 95, 60, 81),
00307 I    0  0    ( 60, 81, 60, 65),
00308 I    0  0    ( 60, 65, 52, 52),
00309 I    0  0    ( 52, 52, 10, 32),
00310 I    0  0    ( 10, 32,  0, 19),
00311 I    0  0    (  0, 19,  0,  0),
00312 I    0  0    (  0,  0, 60,  0),
00313 I    0  0    ( -1,  0,  0,  0),
00314 I    0  0    ( -1,  0,  0,  0),
00315 I    0  0    ( -1,  0,  0,  0),
00316 I    0  0    ( -1,  0,  0,  0),
00317 I    0  0    ( -1,  0,  0,  0),
00318 I C  0  0        { 51 "3"}
00319 I    0  0    (  0, 83, 17,100),
00320 I    0  0    ( 17,100, 43,100),
00321 I    0  0    ( 43,100, 60, 83),
00322 I    0  0    ( 60, 83, 60, 67),
00323 I    0  0    ( 60, 67, 40, 50),
00324 I    0  0    ( 40, 50, 60, 33),
00325 I    0  0    ( 60, 33, 60, 17),
00326 I    0  0    ( 60, 17, 43,  0),
00327 I    0  0    ( 43,  0, 17,  0),
00328 I    0  0    ( 17,  0,  0, 17),
00329 I    0  0    ( -1,  0,  0,  0),
00330 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00331 I    0  0    ( -1,  0,  0,  0),
00332 I    0  0    ( -1,  0,  0,  0),
00333 I    0  0    ( -1,  0,  0,  0),
00334 I C  0  0        { 52 "4"}
00335 I    0  0    ( 40,  0, 40,100),
00336 I    0  0    ( 40,100,  0, 30),
00337 I    0  0    (  0, 30, 60, 30),
00338 I    0  0    ( -1,  0,  0,  0),
00339 I    0  0    ( -1,  0,  0,  0),
00340 I    0  0    ( -1,  0,  0,  0),
00341 I    0  0    ( -1,  0,  0,  0),
00342 I    0  0    ( -1,  0,  0,  0),
00343 I    0  0    ( -1,  0,  0,  0),
00344 I    0  0    ( -1,  0,  0,  0),
00345 I    0  0    ( -1,  0,  0,  0),
00346 I    0  0    ( -1,  0,  0,  0),
00347 I    0  0    ( -1,  0,  0,  0),
00348 I    0  0    ( -1,  0,  0,  0),
00349 I    0  0    ( -1,  0,  0,  0),
00350 I C  0  0        { 53 "5"}
00351 I    0  0    ( 60,100,  0,100),
00352 I    0  0    (  0,100,  0, 50),
00353 I    0  0    (  0, 50, 45, 50),
00354 I    0  0    ( 45, 50, 60, 35),
00355 I    0  0    ( 60, 35, 60, 15),
00356 I    0  0    ( 60, 15, 45,  0),
00357 I    0  0    ( 45,  0, 15,  0),
00358 I    0  0    ( 15,  0,  0, 15),
00359 I    0  0    ( -1,  0,  0,  0),
00360 I    0  0    ( -1,  0,  0,  0),
00361 I    0  0    ( -1,  0,  0,  0),
00362 I    0  0    ( -1,  0,  0,  0),
00363 I    0  0    ( -1,  0,  0,  0),
00364 I    0  0    ( -1,  0,  0,  0),
00365 I    0  0    ( -1,  0,  0,  0),
00366 I C  0  0        { 54 "6"}
00367 I    0  0    ( 60, 83, 43,100),
00368 I    0  0    ( 43,100, 17,100),
00369 I    0  0    ( 17,100,  0, 83),
00370 I    0  0    (  0, 83,  0, 17),
00371 I    0  0    (  0, 17, 17,  0),
00372 I    0  0    ( 17,  0, 43,  0),
00373 I    0  0    ( 43,  0, 60, 17),
00374 I    0  0    ( 60, 17, 60, 33),
00375 I    0  0    ( 60, 33, 43, 50),
00376 I    0  0    ( 43, 50, 17, 50),
00377 I    0  0    ( 17, 50,  0, 33),
00378 I    0  0    ( -1,  0,  0,  0),
00379 I    0  0    ( -1,  0,  0,  0),
00380 I    0  0    ( -1,  0,  0,  0),
00381 I    0  0    ( -1,  0,  0,  0),
00382 I C  0  0        { 55 "7"}
00383 I    0  0    (  0,100, 60,100),
00384 I    0  0    ( 60,100, 60, 90),
00385 I    0  0    ( 60, 90, 58, 80),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    8
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00386 I    0  0    ( 58, 80, 54, 70),
00387 I    0  0    ( 54, 70, 50, 60),
00388 I    0  0    ( 50, 60, 45, 50),
00389 I    0  0    ( 45, 50, 40, 40),
00390 I    0  0    ( 40, 40, 35, 30),
00391 I    0  0    ( 35, 30, 31, 20),
00392 I    0  0    ( 31, 20, 30,  0),
00393 I    0  0    ( -1,  0,  0,  0),
00394 I    0  0    ( -1,  0,  0,  0),
00395 I    0  0    ( -1,  0,  0,  0),
00396 I    0  0    ( -1,  0,  0,  0),
00397 I    0  0    ( -1,  0,  0,  0),
00398 I C  0  0        { 56 "8"}
00399 I    0  0    ( 10,  0, 50,  0),
00400 I    0  0    ( 50,  0, 60, 10),
00401 I    0  0    ( 60, 10, 60, 40),
00402 I    0  0    ( 60, 40, 50, 50),
00403 I    0  0    ( 50, 50, 60, 60),
00404 I    0  0    ( 60, 60, 60, 90),
00405 I    0  0    ( 60, 90, 50,100),
00406 I    0  0    ( 50,100, 10,100),
00407 I    0  0    ( 10,100,  0, 90),
00408 I    0  0    (  0, 90,  0, 60),
00409 I    0  0    (  0, 60, 10, 50),
00410 I    0  0    ( 10, 50,  0, 40),
00411 I    0  0    (  0, 40,  0, 10),
00412 I    0  0    (  0, 10, 10,  0),
00413 I    0  0    ( 10, 50, 50, 50),
00414 I C  0  0        { 57 "9"}
00415 I    0  0    (  0, 17, 17,  0),
00416 I    0  0    ( 17,  0, 43,  0),
00417 I    0  0    ( 43,  0, 60, 17),
00418 I    0  0    ( 60, 17, 60, 83),
00419 I    0  0    ( 60, 83, 43,100),
00420 I    0  0    ( 43,100, 17,100),
00421 I    0  0    ( 17,100,  0, 83),
00422 I    0  0    (  0, 83,  0, 67),
00423 I    0  0    (  0, 67, 17, 50),
00424 I    0  0    ( 17, 50, 43, 50),
00425 I    0  0    ( 43, 50, 60, 67),
00426 I    0  0    ( -1,  0,  0,  0),
00427 I    0  0    ( -1,  0,  0,  0),
00428 I    0  0    ( -1,  0,  0,  0),
00429 I    0  0    ( -1,  0,  0,  0),
00430 I C  0  0        { 58 ":"}
00431 I    0  0    ( 30, 20, 30, 25),
00432 I    0  0    ( 30, 25, 30, 25),
00433 I    0  0    ( 30, 50, 30, 55),
00434 I    0  0    ( 30, 55, 30, 55),
00435 I    0  0    ( -1,  0,  0,  0),
00436 I    0  0    ( -1,  0,  0,  0),
00437 I    0  0    ( -1,  0,  0,  0),
00438 I    0  0    ( -1,  0,  0,  0),
00439 I    0  0    ( -1,  0,  0,  0),
00440 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page    9
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00441 I    0  0    ( -1,  0,  0,  0),
00442 I    0  0    ( -1,  0,  0,  0),
00443 I    0  0    ( -1,  0,  0,  0),
00444 I    0  0    ( -1,  0,  0,  0),
00445 I    0  0    ( -1,  0,  0,  0),
00446 I C  0  0        { 59 ";"}
00447 I    0  0    ( 30, 50, 30, 55),
00448 I    0  0    ( 30, 20, 37, 10),
00449 I    0  0    ( 37, 10, 39,  4),
00450 I    0  0    ( 39,  4, 39,-14),
00451 I    0  0    ( 39,-14, 30,-25),
00452 I    0  0    ( -1,  0,  0,  0),
00453 I    0  0    ( -1,  0,  0,  0),
00454 I    0  0    ( -1,  0,  0,  0),
00455 I    0  0    ( -1,  0,  0,  0),
00456 I    0  0    ( -1,  0,  0,  0),
00457 I    0  0    ( -1,  0,  0,  0),
00458 I    0  0    ( -1,  0,  0,  0),
00459 I    0  0    ( -1,  0,  0,  0),
00460 I    0  0    ( -1,  0,  0,  0),
00461 I    0  0    ( -1,  0,  0,  0),
00462 I C  0  0        { 60 "<"}
00463 I    0  0    ( 50, 10,  0, 50),
00464 I    0  0    (  0, 50, 50, 90),
00465 I    0  0    ( -1,  0,  0,  0),
00466 I    0  0    ( -1,  0,  0,  0),
00467 I    0  0    ( -1,  0,  0,  0),
00468 I    0  0    ( -1,  0,  0,  0),
00469 I    0  0    ( -1,  0,  0,  0),
00470 I    0  0    ( -1,  0,  0,  0),
00471 I    0  0    ( -1,  0,  0,  0),
00472 I    0  0    ( -1,  0,  0,  0),
00473 I    0  0    ( -1,  0,  0,  0),
00474 I    0  0    ( -1,  0,  0,  0),
00475 I    0  0    ( -1,  0,  0,  0),
00476 I    0  0    ( -1,  0,  0,  0),
00477 I    0  0    ( -1,  0,  0,  0),
00478 I C  0  0        { 61 "="}
00479 I    0  0    (  0, 60, 60, 60),
00480 I    0  0    (  0, 40, 60, 40),
00481 I    0  0    ( -1,  0,  0,  0),
00482 I    0  0    ( -1,  0,  0,  0),
00483 I    0  0    ( -1,  0,  0,  0),
00484 I    0  0    ( -1,  0,  0,  0),
00485 I    0  0    ( -1,  0,  0,  0),
00486 I    0  0    ( -1,  0,  0,  0),
00487 I    0  0    ( -1,  0,  0,  0),
00488 I    0  0    ( -1,  0,  0,  0),
00489 I    0  0    ( -1,  0,  0,  0),
00490 I    0  0    ( -1,  0,  0,  0),
00491 I    0  0    ( -1,  0,  0,  0),
00492 I    0  0    ( -1,  0,  0,  0),
00493 I    0  0    ( -1,  0,  0,  0),
00494 I C  0  0        { 62 ">"}
00495 I    0  0    ( 10, 10, 60, 50),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   10
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00496 I    0  0    ( 10, 90, 60, 50),
00497 I    0  0    ( -1,  0,  0,  0),
00498 I    0  0    ( -1,  0,  0,  0),
00499 I    0  0    ( -1,  0,  0,  0),
00500 I    0  0    ( -1,  0,  0,  0),
00501 I    0  0    ( -1,  0,  0,  0),
00502 I    0  0    ( -1,  0,  0,  0),
00503 I    0  0    ( -1,  0,  0,  0),
00504 I    0  0    ( -1,  0,  0,  0),
00505 I    0  0    ( -1,  0,  0,  0),
00506 I    0  0    ( -1,  0,  0,  0),
00507 I    0  0    ( -1,  0,  0,  0),
00508 I    0  0    ( -1,  0,  0,  0),
00509 I    0  0    ( -1,  0,  0,  0),
00510 I C  0  0        { 63 "?"}
00511 I    0  0    ( 30, 15, 30, 40),
00512 I    0  0    ( 30, 40, 50, 60),
00513 I    0  0    ( 50, 60, 56, 70),
00514 I    0  0    ( 56, 70, 60, 78),
00515 I    0  0    ( 60, 78, 60, 90),
00516 I    0  0    ( 60, 90, 50,100),
00517 I    0  0    ( 50,100, 10,100),
00518 I    0  0    ( 10,100,  0, 90),
00519 I    0  0    (  0, 90,  0, 78),
00520 I    0  0    ( 30,  0, 30,  5),
00521 I    0  0    ( -1,  0,  0,  0),
00522 I    0  0    ( -1,  0,  0,  0),
00523 I    0  0    ( -1,  0,  0,  0),
00524 I    0  0    ( -1,  0,  0,  0),
00525 I    0  0    ( -1,  0,  0,  0),
00526 I C  0  0        { 64 "@"}
00527 I    0  0    ( 50,  0, 17,  0),
00528 I    0  0    ( 17,  0,  0, 17),
00529 I    0  0    (  0, 17,  0, 70),
00530 I    0  0    (  0, 70, 17, 85),
00531 I    0  0    ( 17, 85, 43, 85),
00532 I    0  0    ( 43, 85, 60, 70),
00533 I    0  0    ( 60, 70, 60, 25),
00534 I    0  0    ( 60, 25, 49, 38),
00535 I    0  0    ( 49, 38, 45, 53),
00536 I    0  0    ( 45, 53, 30, 60),
00537 I    0  0    ( 30, 60, 15, 53),
00538 I    0  0    ( 15, 53, 11, 38),
00539 I    0  0    ( 11, 38, 20, 25),
00540 I    0  0    ( 20, 25, 40, 25),
00541 I    0  0    ( 40, 25, 49, 38),
00542 I C  0  0          { 65 "A"}
00543 I    0  0    (  0,  0, 18, 90),
00544 I    0  0    ( 18, 90, 25,100),
00545 I    0  0    ( 25,100, 35,100),
00546 I    0  0    ( 35,100, 43, 90),
00547 I    0  0    ( 43, 90, 60,  0),
00548 I    0  0    ( 10, 50, 50, 50),
00549 I    0  0    ( -1,  0,  0,  0),
00550 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   11
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00551 I    0  0    ( -1,  0,  0,  0),
00552 I    0  0    ( -1,  0,  0,  0),
00553 I    0  0    ( -1,  0,  0,  0),
00554 I    0  0    ( -1,  0,  0,  0),
00555 I    0  0    ( -1,  0,  0,  0),
00556 I    0  0    ( -1,  0,  0,  0),
00557 I    0  0    ( -1,  0,  0,  0),
00558 I C  0  0        { 66 "B"}
00559 I    0  0    (  0,  0,  0,100),
00560 I    0  0    (  0,100, 40,100),
00561 I    0  0    ( 40,100, 55, 90),
00562 I    0  0    ( 55, 90, 55, 60),
00563 I    0  0    ( 55, 60, 40, 50),
00564 I    0  0    ( 40, 50, 60, 35),
00565 I    0  0    ( 60, 35, 60, 15),
00566 I    0  0    ( 60, 15, 40,  0),
00567 I    0  0    ( 40,  0,  0,  0),
00568 I    0  0    (  0, 50, 40, 50),
00569 I    0  0    ( -1,  0,  0,  0),
00570 I    0  0    ( -1,  0,  0,  0),
00571 I    0  0    ( -1,  0,  0,  0),
00572 I    0  0    ( -1,  0,  0,  0),
00573 I    0  0    ( -1,  0,  0,  0),
00574 I C  0  0        { 67 "C"}
00575 I    0  0    ( 60, 17, 43,  0),
00576 I    0  0    ( 43,  0, 17,  0),
00577 I    0  0    ( 17,  0,  0, 17),
00578 I    0  0    (  0, 17,  0, 83),
00579 I    0  0    (  0, 83, 17,100),
00580 I    0  0    ( 17,100, 43,100),
00581 I    0  0    ( 43,100, 60, 83),
00582 I    0  0    ( -1,  0,  0,  0),
00583 I    0  0    ( -1,  0,  0,  0),
00584 I    0  0    ( -1,  0,  0,  0),
00585 I    0  0    ( -1,  0,  0,  0),
00586 I    0  0    ( -1,  0,  0,  0),
00587 I    0  0    ( -1,  0,  0,  0),
00588 I    0  0    ( -1,  0,  0,  0),
00589 I    0  0    ( -1,  0,  0,  0),
00590 I C  0  0        { 68 "D"}
00591 I    0  0    ( 60, 17, 43,  0),
00592 I    0  0    ( 43,  0,  0,  0),
00593 I    0  0    (  0,  0,  0,100),
00594 I    0  0    (  0,100, 43,100),
00595 I    0  0    ( 43,100, 60, 83),
00596 I    0  0    ( 60, 83, 60, 17),
00597 I    0  0    ( -1,  0,  0,  0),
00598 I    0  0    ( -1,  0,  0,  0),
00599 I    0  0    ( -1,  0,  0,  0),
00600 I    0  0    ( -1,  0,  0,  0),
00601 I    0  0    ( -1,  0,  0,  0),
00602 I    0  0    ( -1,  0,  0,  0),
00603 I    0  0    ( -1,  0,  0,  0),
00604 I    0  0    ( -1,  0,  0,  0),
00605 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   12
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00606 I C  0  0        { 69 "E"}
00607 I    0  0    ( 60,  0,  0,  0),
00608 I    0  0    (  0,  0,  0,100),
00609 I    0  0    (  0,100, 60,100),
00610 I    0  0    (  0, 50, 40, 50),
00611 I    0  0    ( -1,  0,  0,  0),
00612 I    0  0    ( -1,  0,  0,  0),
00613 I    0  0    ( -1,  0,  0,  0),
00614 I    0  0    ( -1,  0,  0,  0),
00615 I    0  0    ( -1,  0,  0,  0),
00616 I    0  0    ( -1,  0,  0,  0),
00617 I    0  0    ( -1,  0,  0,  0),
00618 I    0  0    ( -1,  0,  0,  0),
00619 I    0  0    ( -1,  0,  0,  0),
00620 I    0  0    ( -1,  0,  0,  0),
00621 I    0  0    ( -1,  0,  0,  0),
00622 I C  0  0        { 70 "F"}
00623 I    0  0    (  0,  0,  0,100),
00624 I    0  0    (  0,100, 60,100),
00625 I    0  0    (  0, 50, 40, 50),
00626 I    0  0    ( -1,  0,  0,  0),
00627 I    0  0    ( -1,  0,  0,  0),
00628 I    0  0    ( -1,  0,  0,  0),
00629 I    0  0    ( -1,  0,  0,  0),
00630 I    0  0    ( -1,  0,  0,  0),
00631 I    0  0    ( -1,  0,  0,  0),
00632 I    0  0    ( -1,  0,  0,  0),
00633 I    0  0    ( -1,  0,  0,  0),
00634 I    0  0    ( -1,  0,  0,  0),
00635 I    0  0    ( -1,  0,  0,  0),
00636 I    0  0    ( -1,  0,  0,  0),
00637 I    0  0    ( -1,  0,  0,  0),
00638 I C  0  0        { 71 "G"}
00639 I    0  0    ( 40, 40, 60, 40),
00640 I    0  0    ( 60, 40, 60, 17),
00641 I    0  0    ( 60, 17, 43,  0),
00642 I    0  0    ( 43,  0, 17,  0),
00643 I    0  0    ( 17,  0,  0, 17),
00644 I    0  0    (  0, 17,  0, 83),
00645 I    0  0    (  0, 83, 17,100),
00646 I    0  0    ( 17,100, 43,100),
00647 I    0  0    ( 43,100, 60, 83),
00648 I    0  0    ( -1,  0,  0,  0),
00649 I    0  0    ( -1,  0,  0,  0),
00650 I    0  0    ( -1,  0,  0,  0),
00651 I    0  0    ( -1,  0,  0,  0),
00652 I    0  0    ( -1,  0,  0,  0),
00653 I    0  0    ( -1,  0,  0,  0),
00654 I C  0  0        { 72 "H"}
00655 I    0  0    (  0,  0,  0,100),
00656 I    0  0    (  0, 50, 60, 50),
00657 I    0  0    ( 60,  0, 60,100),
00658 I    0  0    ( -1,  0,  0,  0),
00659 I    0  0    ( -1,  0,  0,  0),
00660 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   13
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00661 I    0  0    ( -1,  0,  0,  0),
00662 I    0  0    ( -1,  0,  0,  0),
00663 I    0  0    ( -1,  0,  0,  0),
00664 I    0  0    ( -1,  0,  0,  0),
00665 I    0  0    ( -1,  0,  0,  0),
00666 I    0  0    ( -1,  0,  0,  0),
00667 I    0  0    ( -1,  0,  0,  0),
00668 I    0  0    ( -1,  0,  0,  0),
00669 I    0  0    ( -1,  0,  0,  0),
00670 I C  0  0        { 73 "I"}
00671 I    0  0    ( 10,  0, 50,  0),
00672 I    0  0    ( 30,  0, 30,100),
00673 I    0  0    ( 10,100, 50,100),
00674 I    0  0    ( -1,  0,  0,  0),
00675 I    0  0    ( -1,  0,  0,  0),
00676 I    0  0    ( -1,  0,  0,  0),
00677 I    0  0    ( -1,  0,  0,  0),
00678 I    0  0    ( -1,  0,  0,  0),
00679 I    0  0    ( -1,  0,  0,  0),
00680 I    0  0    ( -1,  0,  0,  0),
00681 I    0  0    ( -1,  0,  0,  0),
00682 I    0  0    ( -1,  0,  0,  0),
00683 I    0  0    ( -1,  0,  0,  0),
00684 I    0  0    ( -1,  0,  0,  0),
00685 I    0  0    ( -1,  0,  0,  0),
00686 I C  0  0        { 74 "J"}
00687 I    0  0    ( 60,100, 60, 17),
00688 I    0  0    ( 60, 17, 43,  0),
00689 I    0  0    ( 43,  0, 17,  0),
00690 I    0  0    ( 17,  0,  0, 17),
00691 I    0  0    ( -1,  0,  0,  0),
00692 I    0  0    ( -1,  0,  0,  0),
00693 I    0  0    ( -1,  0,  0,  0),
00694 I    0  0    ( -1,  0,  0,  0),
00695 I    0  0    ( -1,  0,  0,  0),
00696 I    0  0    ( -1,  0,  0,  0),
00697 I    0  0    ( -1,  0,  0,  0),
00698 I    0  0    ( -1,  0,  0,  0),
00699 I    0  0    ( -1,  0,  0,  0),
00700 I    0  0    ( -1,  0,  0,  0),
00701 I    0  0    ( -1,  0,  0,  0),
00702 I C  0  0        { 75 "K"}
00703 I    0  0    (  0,  0,  0,100),
00704 I    0  0    (  0, 40, 60,100),
00705 I    0  0    ( 23, 62, 60,  0),
00706 I    0  0    ( -1,  0,  0,  0),
00707 I    0  0    ( -1,  0,  0,  0),
00708 I    0  0    ( -1,  0,  0,  0),
00709 I    0  0    ( -1,  0,  0,  0),
00710 I    0  0    ( -1,  0,  0,  0),
00711 I    0  0    ( -1,  0,  0,  0),
00712 I    0  0    ( -1,  0,  0,  0),
00713 I    0  0    ( -1,  0,  0,  0),
00714 I    0  0    ( -1,  0,  0,  0),
00715 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   14
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00716 I    0  0    ( -1,  0,  0,  0),
00717 I    0  0    ( -1,  0,  0,  0),
00718 I C  0  0        { 76 "L"}
00719 I    0  0    ( 60,  0,  0,  0),
00720 I    0  0    (  0,  0,  0,100),
00721 I    0  0    ( -1,  0,  0,  0),
00722 I    0  0    ( -1,  0,  0,  0),
00723 I    0  0    ( -1,  0,  0,  0),
00724 I    0  0    ( -1,  0,  0,  0),
00725 I    0  0    ( -1,  0,  0,  0),
00726 I    0  0    ( -1,  0,  0,  0),
00727 I    0  0    ( -1,  0,  0,  0),
00728 I    0  0    ( -1,  0,  0,  0),
00729 I    0  0    ( -1,  0,  0,  0),
00730 I    0  0    ( -1,  0,  0,  0),
00731 I    0  0    ( -1,  0,  0,  0),
00732 I    0  0    ( -1,  0,  0,  0),
00733 I    0  0    ( -1,  0,  0,  0),
00734 I C  0  0        { 77 "M"}
00735 I    0  0    (  0,  0,  0,100),
00736 I    0  0    (  0,100, 30, 50),
00737 I    0  0    ( 30, 50, 60,100),
00738 I    0  0    ( 60,100, 60,  0),
00739 I    0  0    ( -1,  0,  0,  0),
00740 I    0  0    ( -1,  0,  0,  0),
00741 I    0  0    ( -1,  0,  0,  0),
00742 I    0  0    ( -1,  0,  0,  0),
00743 I    0  0    ( -1,  0,  0,  0),
00744 I    0  0    ( -1,  0,  0,  0),
00745 I    0  0    ( -1,  0,  0,  0),
00746 I    0  0    ( -1,  0,  0,  0),
00747 I    0  0    ( -1,  0,  0,  0),
00748 I    0  0    ( -1,  0,  0,  0),
00749 I    0  0    ( -1,  0,  0,  0),
00750 I C  0  0        { 78 "N"}
00751 I    0  0    (  0,  0,  0,100),
00752 I    0  0    (  0,100, 60,  0),
00753 I    0  0    ( 60,  0, 60,100),
00754 I    0  0    ( -1,  0,  0,  0),
00755 I    0  0    ( -1,  0,  0,  0),
00756 I    0  0    ( -1,  0,  0,  0),
00757 I    0  0    ( -1,  0,  0,  0),
00758 I    0  0    ( -1,  0,  0,  0),
00759 I    0  0    ( -1,  0,  0,  0),
00760 I    0  0    ( -1,  0,  0,  0),
00761 I    0  0    ( -1,  0,  0,  0),
00762 I    0  0    ( -1,  0,  0,  0),
00763 I    0  0    ( -1,  0,  0,  0),
00764 I    0  0    ( -1,  0,  0,  0),
00765 I    0  0    ( -1,  0,  0,  0),
00766 I C  0  0        { 79 "O"}
00767 I    0  0    ( 17,  0,  0, 17),
00768 I    0  0    (  0, 17,  0, 83),
00769 I    0  0    (  0, 83, 17,100),
00770 I    0  0    ( 17,100, 43,100),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   15
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00771 I    0  0    ( 43,100, 60, 83),
00772 I    0  0    ( 43,100, 60, 83),
00773 I    0  0    ( 60, 83, 60, 17),
00774 I    0  0    ( 60, 17, 43,  0),
00775 I    0  0    ( 43,  0, 17,  0),
00776 I    0  0    ( -1,  0,  0,  0),
00777 I    0  0    ( -1,  0,  0,  0),
00778 I    0  0    ( -1,  0,  0,  0),
00779 I    0  0    ( -1,  0,  0,  0),
00780 I    0  0    ( -1,  0,  0,  0),
00781 I    0  0    ( -1,  0,  0,  0),
00782 I C  0  0        { 80 "P"}
00783 I    0  0    (  0,  0,  0,100),
00784 I    0  0    (  0,100, 45,100),
00785 I    0  0    ( 45,100, 60, 85),
00786 I    0  0    ( 60, 85, 60, 65),
00787 I    0  0    ( 60, 65, 45, 50),
00788 I    0  0    ( 45, 50,  0, 50),
00789 I    0  0    ( -1,  0,  0,  0),
00790 I    0  0    ( -1,  0,  0,  0),
00791 I    0  0    ( -1,  0,  0,  0),
00792 I    0  0    ( -1,  0,  0,  0),
00793 I    0  0    ( -1,  0,  0,  0),
00794 I    0  0    ( -1,  0,  0,  0),
00795 I    0  0    ( -1,  0,  0,  0),
00796 I    0  0    ( -1,  0,  0,  0),
00797 I    0  0    ( -1,  0,  0,  0),
00798 I C  0  0        { 81 "Q"}
00799 I    0  0    ( 17,  0,  0, 17),
00800 I    0  0    (  0, 17,  0, 83),
00801 I    0  0    (  0, 83, 17,100),
00802 I    0  0    ( 17,100, 43,100),
00803 I    0  0    ( 43,100, 60, 83),
00804 I    0  0    ( 60, 83, 60, 17),
00805 I    0  0    ( 60, 17, 43,  0),
00806 I    0  0    ( 43,  0, 17,  0),
00807 I    0  0    ( 30, 10, 36,  0),
00808 I    0  0    ( 36,  0, 40, -6),
00809 I    0  0    ( 40, -6, 46,-16),
00810 I    0  0    ( -1,  0,  0,  0),
00811 I    0  0    ( -1,  0,  0,  0),
00812 I    0  0    ( -1,  0,  0,  0),
00813 I    0  0    ( -1,  0,  0,  0),
00814 I C  0  0        { 82 "R"}
00815 I    0  0    (  0,  0,  0,100),
00816 I    0  0    (  0,100, 45,100),
00817 I    0  0    ( 45,100, 60, 85),
00818 I    0  0    ( 60, 85, 60, 65),
00819 I    0  0    ( 60, 65, 45, 50),
00820 I    0  0    ( 45, 50,  0, 50),
00821 I    0  0    ( 40, 50, 60,  0),
00822 I    0  0    ( -1,  0,  0,  0),
00823 I    0  0    ( -1,  0,  0,  0),
00824 I    0  0    ( -1,  0,  0,  0),
00825 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   16
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00826 I    0  0    ( -1,  0,  0,  0),
00827 I    0  0    ( -1,  0,  0,  0),
00828 I    0  0    ( -1,  0,  0,  0),
00829 I    0  0    ( -1,  0,  0,  0),
00830 I C  0  0        { 83 "S"}
00831 I    0  0    (  0, 15, 15,  0),
00832 I    0  0    ( 15,  0, 45,  0),
00833 I    0  0    ( 45,  0, 60, 15),
00834 I    0  0    ( 60, 15, 60, 35),
00835 I    0  0    ( 60, 35, 45, 50),
00836 I    0  0    ( 45, 50, 15, 50),
00837 I    0  0    ( 15, 50,  0, 65),
00838 I    0  0    (  0, 65,  0, 85),
00839 I    0  0    (  0, 85, 15,100),
00840 I    0  0    ( 15,100, 45,100),
00841 I    0  0    ( 45,100, 60, 85),
00842 I    0  0    ( -1,  0,  0,  0),
00843 I    0  0    ( -1,  0,  0,  0),
00844 I    0  0    ( -1,  0,  0,  0),
00845 I    0  0    ( -1,  0,  0,  0),
00846 I C  0  0        { 84 "T"}
00847 I    0  0    ( 30,  0, 30,100),
00848 I    0  0    (  0,100, 60,100),
00849 I    0  0    ( -1,  0,  0,  0),
00850 I    0  0    ( -1,  0,  0,  0),
00851 I    0  0    ( -1,  0,  0,  0),
00852 I    0  0    ( -1,  0,  0,  0),
00853 I    0  0    ( -1,  0,  0,  0),
00854 I    0  0    ( -1,  0,  0,  0),
00855 I    0  0    ( -1,  0,  0,  0),
00856 I    0  0    ( -1,  0,  0,  0),
00857 I    0  0    ( -1,  0,  0,  0),
00858 I    0  0    ( -1,  0,  0,  0),
00859 I    0  0    ( -1,  0,  0,  0),
00860 I    0  0    ( -1,  0,  0,  0),
00861 I    0  0    ( -1,  0,  0,  0),
00862 I C  0  0        { 85 "U"}
00863 I    0  0    ( 60,100, 60, 17),
00864 I    0  0    ( 60, 17, 43,  0),
00865 I    0  0    ( 43,  0, 17,  0),
00866 I    0  0    ( 17,  0,  0, 17),
00867 I    0  0    (  0, 17,  0,100),
00868 I    0  0    ( -1,  0,  0,  0),
00869 I    0  0    ( -1,  0,  0,  0),
00870 I    0  0    ( -1,  0,  0,  0),
00871 I    0  0    ( -1,  0,  0,  0),
00872 I    0  0    ( -1,  0,  0,  0),
00873 I    0  0    ( -1,  0,  0,  0),
00874 I    0  0    ( -1,  0,  0,  0),
00875 I    0  0    ( -1,  0,  0,  0),
00876 I    0  0    ( -1,  0,  0,  0),
00877 I    0  0    ( -1,  0,  0,  0),
00878 I C  0  0        { 86 "V"}
00879 I    0  0    (  0,100, 30,  0),
00880 I    0  0    ( 30,  0, 60,100),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   17
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00881 I    0  0    ( -1,  0,  0,  0),
00882 I    0  0    ( -1,  0,  0,  0),
00883 I    0  0    ( -1,  0,  0,  0),
00884 I    0  0    ( -1,  0,  0,  0),
00885 I    0  0    ( -1,  0,  0,  0),
00886 I    0  0    ( -1,  0,  0,  0),
00887 I    0  0    ( -1,  0,  0,  0),
00888 I    0  0    ( -1,  0,  0,  0),
00889 I    0  0    ( -1,  0,  0,  0),
00890 I    0  0    ( -1,  0,  0,  0),
00891 I    0  0    ( -1,  0,  0,  0),
00892 I    0  0    ( -1,  0,  0,  0),
00893 I    0  0    ( -1,  0,  0,  0),
00894 I C  0  0        { 87 "W"}
00895 I    0  0    (  0,100, 20,  0),
00896 I    0  0    ( 20,  0, 30, 60),
00897 I    0  0    ( 30, 60, 40,  0),
00898 I    0  0    ( 40,  0, 60,100),
00899 I    0  0    ( -1,  0,  0,  0),
00900 I    0  0    ( -1,  0,  0,  0),
00901 I    0  0    ( -1,  0,  0,  0),
00902 I    0  0    ( -1,  0,  0,  0),
00903 I    0  0    ( -1,  0,  0,  0),
00904 I    0  0    ( -1,  0,  0,  0),
00905 I    0  0    ( -1,  0,  0,  0),
00906 I    0  0    ( -1,  0,  0,  0),
00907 I    0  0    ( -1,  0,  0,  0),
00908 I    0  0    ( -1,  0,  0,  0),
00909 I    0  0    ( -1,  0,  0,  0),
00910 I C  0  0        { 88 "X"}
00911 I    0  0    (  0,  0, 60,100),
00912 I    0  0    (  0,100, 60,  0),
00913 I    0  0    ( -1,  0,  0,  0),
00914 I    0  0    ( -1,  0,  0,  0),
00915 I    0  0    ( -1,  0,  0,  0),
00916 I    0  0    ( -1,  0,  0,  0),
00917 I    0  0    ( -1,  0,  0,  0),
00918 I    0  0    ( -1,  0,  0,  0),
00919 I    0  0    ( -1,  0,  0,  0),
00920 I    0  0    ( -1,  0,  0,  0),
00921 I    0  0    ( -1,  0,  0,  0),
00922 I    0  0    ( -1,  0,  0,  0),
00923 I    0  0    ( -1,  0,  0,  0),
00924 I    0  0    ( -1,  0,  0,  0),
00925 I    0  0    ( -1,  0,  0,  0),
00926 I C  0  0        { 89 "Y"}
00927 I    0  0    ( 30,  0, 30, 50),
00928 I    0  0    ( 30, 50,  0,100),
00929 I    0  0    ( 30, 50, 60,100),
00930 I    0  0    ( -1,  0,  0,  0),
00931 I    0  0    ( -1,  0,  0,  0),
00932 I    0  0    ( -1,  0,  0,  0),
00933 I    0  0    ( -1,  0,  0,  0),
00934 I    0  0    ( -1,  0,  0,  0),
00935 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   18
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00936 I    0  0    ( -1,  0,  0,  0),
00937 I    0  0    ( -1,  0,  0,  0),
00938 I    0  0    ( -1,  0,  0,  0),
00939 I    0  0    ( -1,  0,  0,  0),
00940 I    0  0    ( -1,  0,  0,  0),
00941 I    0  0    ( -1,  0,  0,  0),
00942 I C  0  0        { 90 "Z"}
00943 I    0  0    (  0,100, 60,100),
00944 I    0  0    ( 60,100,  0,  0),
00945 I    0  0    (  0,  0, 60,  0),
00946 I    0  0    ( -1,  0,  0,  0),
00947 I    0  0    ( -1,  0,  0,  0),
00948 I    0  0    ( -1,  0,  0,  0),
00949 I    0  0    ( -1,  0,  0,  0),
00950 I    0  0    ( -1,  0,  0,  0),
00951 I    0  0    ( -1,  0,  0,  0),
00952 I    0  0    ( -1,  0,  0,  0),
00953 I    0  0    ( -1,  0,  0,  0),
00954 I    0  0    ( -1,  0,  0,  0),
00955 I    0  0    ( -1,  0,  0,  0),
00956 I    0  0    ( -1,  0,  0,  0),
00957 I    0  0    ( -1,  0,  0,  0),
00958 I C  0  0        { 91 "["}
00959 I    0  0    ( 60,  0, 30,  0),
00960 I    0  0    ( 30,  0, 30,100),
00961 I    0  0    ( 30,100, 60,100),
00962 I    0  0    ( -1,  0,  0,  0),
00963 I    0  0    ( -1,  0,  0,  0),
00964 I    0  0    ( -1,  0,  0,  0),
00965 I    0  0    ( -1,  0,  0,  0),
00966 I    0  0    ( -1,  0,  0,  0),
00967 I    0  0    ( -1,  0,  0,  0),
00968 I    0  0    ( -1,  0,  0,  0),
00969 I    0  0    ( -1,  0,  0,  0),
00970 I    0  0    ( -1,  0,  0,  0),
00971 I    0  0    ( -1,  0,  0,  0),
00972 I    0  0    ( -1,  0,  0,  0),
00973 I    0  0    ( -1,  0,  0,  0),
00974 I C  0  0        { 92 "\"}
00975 I    0  0    ( 50,  0, 10,100),
00976 I    0  0    ( -1,  0,  0,  0),
00977 I    0  0    ( -1,  0,  0,  0),
00978 I    0  0    ( -1,  0,  0,  0),
00979 I    0  0    ( -1,  0,  0,  0),
00980 I    0  0    ( -1,  0,  0,  0),
00981 I    0  0    ( -1,  0,  0,  0),
00982 I    0  0    ( -1,  0,  0,  0),
00983 I    0  0    ( -1,  0,  0,  0),
00984 I    0  0    ( -1,  0,  0,  0),
00985 I    0  0    ( -1,  0,  0,  0),
00986 I    0  0    ( -1,  0,  0,  0),
00987 I    0  0    ( -1,  0,  0,  0),
00988 I    0  0    ( -1,  0,  0,  0),
00989 I    0  0    ( -1,  0,  0,  0),
00990 I C  0  0        { 93 "]"}

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   19
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

00991 I    0  0    (  0,  0, 30,  0),
00992 I    0  0    ( 30,  0, 30,100),
00993 I    0  0    ( 30,100,  0,100),
00994 I    0  0    ( -1,  0,  0,  0),
00995 I    0  0    ( -1,  0,  0,  0),
00996 I    0  0    ( -1,  0,  0,  0),
00997 I    0  0    ( -1,  0,  0,  0),
00998 I    0  0    ( -1,  0,  0,  0),
00999 I    0  0    ( -1,  0,  0,  0),
01000 I    0  0    ( -1,  0,  0,  0),
01001 I    0  0    ( -1,  0,  0,  0),
01002 I    0  0    ( -1,  0,  0,  0),
01003 I    0  0    ( -1,  0,  0,  0),
01004 I    0  0    ( -1,  0,  0,  0),
01005 I    0  0    ( -1,  0,  0,  0),
01006 I C  0  0        { 94 "^"}
01007 I    0  0    ( 10, 70, 30,100),
01008 I    0  0    ( 30,100, 50, 70),
01009 I    0  0    ( -1,  0,  0,  0),
01010 I    0  0    ( -1,  0,  0,  0),
01011 I    0  0    ( -1,  0,  0,  0),
01012 I    0  0    ( -1,  0,  0,  0),
01013 I    0  0    ( -1,  0,  0,  0),
01014 I    0  0    ( -1,  0,  0,  0),
01015 I    0  0    ( -1,  0,  0,  0),
01016 I    0  0    ( -1,  0,  0,  0),
01017 I    0  0    ( -1,  0,  0,  0),
01018 I    0  0    ( -1,  0,  0,  0),
01019 I    0  0    ( -1,  0,  0,  0),
01020 I    0  0    ( -1,  0,  0,  0),
01021 I    0  0    ( -1,  0,  0,  0),
01022 I C  0  0        { 95 "_"}
01023 I    0  0    (  0,-10, 60,-10),
01024 I    0  0    ( -1,  0,  0,  0),
01025 I    0  0    ( -1,  0,  0,  0),
01026 I    0  0    ( -1,  0,  0,  0),
01027 I    0  0    ( -1,  0,  0,  0),
01028 I    0  0    ( -1,  0,  0,  0),
01029 I    0  0    ( -1,  0,  0,  0),
01030 I    0  0    ( -1,  0,  0,  0),
01031 I    0  0    ( -1,  0,  0,  0),
01032 I    0  0    ( -1,  0,  0,  0),
01033 I    0  0    ( -1,  0,  0,  0),
01034 I    0  0    ( -1,  0,  0,  0),
01035 I    0  0    ( -1,  0,  0,  0),
01036 I    0  0    ( -1,  0,  0,  0),
01037 I    0  0    ( -1,  0,  0,  0),
01038 I C  0  0        { 96 "'"}
01039 I    0  0    ( 21, 70, 10,100),
01040 I    0  0    ( -1,  0,  0,  0),
01041 I    0  0    ( -1,  0,  0,  0),
01042 I    0  0    ( -1,  0,  0,  0),
01043 I    0  0    ( -1,  0,  0,  0),
01044 I    0  0    ( -1,  0,  0,  0),
01045 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   20
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01046 I    0  0    ( -1,  0,  0,  0),
01047 I    0  0    ( -1,  0,  0,  0),
01048 I    0  0    ( -1,  0,  0,  0),
01049 I    0  0    ( -1,  0,  0,  0),
01050 I    0  0    ( -1,  0,  0,  0),
01051 I    0  0    ( -1,  0,  0,  0),
01052 I    0  0    ( -1,  0,  0,  0),
01053 I    0  0    ( -1,  0,  0,  0),
01054 I C  0  0        { 97 "a"}
01055 I    0  0    ( 10, 60, 50, 60),
01056 I    0  0    ( 50, 60, 60, 45),
01057 I    0  0    ( 60, 45, 60,  0),
01058 I    0  0    ( 60, 10, 50,  0),
01059 I    0  0    ( 50,  0, 10,  0),
01060 I    0  0    ( 10,  0,  0, 10),
01061 I    0  0    (  0, 10,  0, 20),
01062 I    0  0    (  0, 20, 10, 30),
01063 I    0  0    ( 10, 30, 50, 30),
01064 I    0  0    ( 50, 30, 60, 20),
01065 I    0  0    ( -1,  0,  0,  0),
01066 I    0  0    ( -1,  0,  0,  0),
01067 I    0  0    ( -1,  0,  0,  0),
01068 I    0  0    ( -1,  0,  0,  0),
01069 I    0  0    ( -1,  0,  0,  0),
01070 I C  0  0        { 98 "b"}
01071 I    0  0    ( 17,  0,  0, 17),
01072 I    0  0    (  0, 17,  0, 43),
01073 I    0  0    (  0, 43, 17, 60),
01074 I    0  0    ( 17, 60, 43, 60),
01075 I    0  0    ( 43, 60, 60, 43),
01076 I    0  0    ( 60, 43, 60, 17),
01077 I    0  0    ( 60, 17, 43,  0),
01078 I    0  0    ( 43,  0, 17,  0),
01079 I    0  0    (  0,  0,  0,100),
01080 I    0  0    ( -1,  0,  0,  0),
01081 I    0  0    ( -1,  0,  0,  0),
01082 I    0  0    ( -1,  0,  0,  0),
01083 I    0  0    ( -1,  0,  0,  0),
01084 I    0  0    ( -1,  0,  0,  0),
01085 I    0  0    ( -1,  0,  0,  0),
01086 I C  0  0        { 99 "c"}
01087 I    0  0    ( 54, 10, 43,  0),
01088 I    0  0    ( 43,  0, 17,  0),
01089 I    0  0    ( 17,  0,  0, 17),
01090 I    0  0    (  0, 17,  0, 43),
01091 I    0  0    (  0, 43, 17, 60),
01092 I    0  0    ( 17, 60, 43, 60),
01093 I    0  0    ( 43, 60, 54, 50),
01094 I    0  0    ( -1,  0,  0,  0),
01095 I    0  0    ( -1,  0,  0,  0),
01096 I    0  0    ( -1,  0,  0,  0),
01097 I    0  0    ( -1,  0,  0,  0),
01098 I    0  0    ( -1,  0,  0,  0),
01099 I    0  0    ( -1,  0,  0,  0),
01100 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   21
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01101 I    0  0    ( -1,  0,  0,  0),
01102 I C  0  0        {100 "d"}
01103 I    0  0    ( 60,100, 60, 43),
01104 I    0  0    ( 60, 43, 43, 60),
01105 I    0  0    ( 43, 60, 17, 60),
01106 I    0  0    ( 17, 60,  0, 43),
01107 I    0  0    (  0, 43,  0, 17),
01108 I    0  0    (  0, 17, 17,  0),
01109 I    0  0    ( 17,  0, 43,  0),
01110 I    0  0    ( 43,  0, 60, 17),
01111 I    0  0    ( 60, 17, 60,  0),
01112 I    0  0    ( 60,  0, 60, 43),
01113 I    0  0    ( -1,  0,  0,  0),
01114 I    0  0    ( -1,  0,  0,  0),
01115 I    0  0    ( -1,  0,  0,  0),
01116 I    0  0    ( -1,  0,  0,  0),
01117 I    0  0    ( -1,  0,  0,  0),
01118 I C  0  0        {101 "e"}
01119 I    0  0    ( 14,  0,  0, 17),
01120 I    0  0    (  0, 17,  0, 40),
01121 I    0  0    (  0, 40, 14, 60),
01122 I    0  0    ( 14, 60, 44, 60),
01123 I    0  0    ( 44, 60, 60, 40),
01124 I    0  0    ( 60, 40,  0, 40),
01125 I    0  0    ( 60, 17, 45,  0),
01126 I    0  0    ( 45,  0, 14,  0),
01127 I    0  0    ( -1,  0,  0,  0),
01128 I    0  0    ( -1,  0,  0,  0),
01129 I    0  0    ( -1,  0,  0,  0),
01130 I    0  0    ( -1,  0,  0,  0),
01131 I    0  0    ( -1,  0,  0,  0),
01132 I    0  0    ( -1,  0,  0,  0),
01133 I    0  0    ( -1,  0,  0,  0),
01134 I C  0  0        {102 "f"}
01135 I    0  0    ( 30,  0, 30, 90),
01136 I    0  0    ( 30, 90, 36,100),
01137 I    0  0    ( 36,100, 51,100),
01138 I    0  0    ( 51,100, 60, 89),
01139 I    0  0    ( 60, 89, 60, 80),
01140 I    0  0    ( 10, 60, 50, 60),
01141 I    0  0    ( -1,  0,  0,  0),
01142 I    0  0    ( -1,  0,  0,  0),
01143 I    0  0    ( -1,  0,  0,  0),
01144 I    0  0    ( -1,  0,  0,  0),
01145 I    0  0    ( -1,  0,  0,  0),
01146 I    0  0    ( -1,  0,  0,  0),
01147 I    0  0    ( -1,  0,  0,  0),
01148 I    0  0    ( -1,  0,  0,  0),
01149 I    0  0    ( -1,  0,  0,  0),
01150 I C  0  0        {103 "g"}
01151 I    0  0    ( 17,  0,  0, 17),
01152 I    0  0    (  0, 17,  0, 43),
01153 I    0  0    (  0, 43, 17, 60),
01154 I    0  0    ( 17, 60, 43, 60),
01155 I    0  0    ( 43, 60, 60, 43),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   22
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01156 I    0  0    ( 60, 43, 60, 60),
01157 I    0  0    ( 60, 43, 60, 17),
01158 I    0  0    ( 60, 17, 43,  0),
01159 I    0  0    ( 43,  0, 17,  0),
01160 I    0  0    ( 60, 17, 60,-23),
01161 I    0  0    ( 60,-23, 43,-40),
01162 I    0  0    ( 43,-40, 17,-40),
01163 I    0  0    ( 17,-40,  0,-23),
01164 I    0  0    (  0,-23,  0,-23),
01165 I    0  0    ( -1,  0,  0,  0),
01166 I C  0  0        {104 "h"}
01167 I    0  0    (  0,  0,  0,100),
01168 I    0  0    (  0, 43, 17, 60),
01169 I    0  0    ( 17, 60, 43, 60),
01170 I    0  0    ( 43, 60, 60, 43),
01171 I    0  0    ( 60, 43, 60,  0),
01172 I    0  0    ( -1,  0,  0,  0),
01173 I    0  0    ( -1,  0,  0,  0),
01174 I    0  0    ( -1,  0,  0,  0),
01175 I    0  0    ( -1,  0,  0,  0),
01176 I    0  0    ( -1,  0,  0,  0),
01177 I    0  0    ( -1,  0,  0,  0),
01178 I    0  0    ( -1,  0,  0,  0),
01179 I    0  0    ( -1,  0,  0,  0),
01180 I    0  0    ( -1,  0,  0,  0),
01181 I    0  0    ( -1,  0,  0,  0),
01182 I C  0  0        {105 "i"}
01183 I    0  0    ( 30,  0, 30, 60),
01184 I    0  0    ( 30, 80, 30, 85),
01185 I    0  0    ( 30, 85, 30, 85),
01186 I    0  0    ( -1,  0,  0,  0),
01187 I    0  0    ( -1,  0,  0,  0),
01188 I    0  0    ( -1,  0,  0,  0),
01189 I    0  0    ( -1,  0,  0,  0),
01190 I    0  0    ( -1,  0,  0,  0),
01191 I    0  0    ( -1,  0,  0,  0),
01192 I    0  0    ( -1,  0,  0,  0),
01193 I    0  0    ( -1,  0,  0,  0),
01194 I    0  0    ( -1,  0,  0,  0),
01195 I    0  0    ( -1,  0,  0,  0),
01196 I    0  0    ( -1,  0,  0,  0),
01197 I    0  0    ( -1,  0,  0,  0),
01198 I C  0  0        {106 "j"}
01199 I    0  0    ( 30, 80, 30, 85),
01200 I    0  0    ( 30, 60, 30,-40),
01201 I    0  0    ( 30,-40, 10,-40),
01202 I    0  0    ( 10,-40,  0,-30),
01203 I    0  0    (  0,-30,  0,-20),
01204 I    0  0    ( -1,  0,  0,  0),
01205 I    0  0    ( -1,  0,  0,  0),
01206 I    0  0    ( -1,  0,  0,  0),
01207 I    0  0    ( -1,  0,  0,  0),
01208 I    0  0    ( -1,  0,  0,  0),
01209 I    0  0    ( -1,  0,  0,  0),
01210 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   23
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01211 I    0  0    ( -1,  0,  0,  0),
01212 I    0  0    ( -1,  0,  0,  0),
01213 I    0  0    ( -1,  0,  0,  0),
01214 I C  0  0        {107 "k"}
01215 I    0  0    ( 14,  0, 14,100),
01216 I    0  0    ( 14, 40, 60, 80),
01217 I    0  0    ( 25, 50, 60,  0),
01218 I    0  0    ( -1,  0,  0,  0),
01219 I    0  0    ( -1,  0,  0,  0),
01220 I    0  0    ( -1,  0,  0,  0),
01221 I    0  0    ( -1,  0,  0,  0),
01222 I    0  0    ( -1,  0,  0,  0),
01223 I    0  0    ( -1,  0,  0,  0),
01224 I    0  0    ( -1,  0,  0,  0),
01225 I    0  0    ( -1,  0,  0,  0),
01226 I    0  0    ( -1,  0,  0,  0),
01227 I    0  0    ( -1,  0,  0,  0),
01228 I    0  0    ( -1,  0,  0,  0),
01229 I    0  0    ( -1,  0,  0,  0),
01230 I C  0  0        {108 "l"}
01231 I    0  0    ( 30,  0, 30,100),
01232 I    0  0    ( -1,  0,  0,  0),
01233 I    0  0    ( -1,  0,  0,  0),
01234 I    0  0    ( -1,  0,  0,  0),
01235 I    0  0    ( -1,  0,  0,  0),
01236 I    0  0    ( -1,  0,  0,  0),
01237 I    0  0    ( -1,  0,  0,  0),
01238 I    0  0    ( -1,  0,  0,  0),
01239 I    0  0    ( -1,  0,  0,  0),
01240 I    0  0    ( -1,  0,  0,  0),
01241 I    0  0    ( -1,  0,  0,  0),
01242 I    0  0    ( -1,  0,  0,  0),
01243 I    0  0    ( -1,  0,  0,  0),
01244 I    0  0    ( -1,  0,  0,  0),
01245 I    0  0    ( -1,  0,  0,  0),
01246 I C  0  0        {109 "m"}
01247 I    0  0    (  0,  0,  0, 60),
01248 I    0  0    (  0, 49, 10, 60),
01249 I    0  0    ( 10, 60, 17, 60),
01250 I    0  0    ( 17, 60, 30, 40),
01251 I    0  0    ( 30, 40, 30,  0),
01252 I    0  0    ( 30, 40, 43, 60),
01253 I    0  0    ( 43, 60, 50, 60),
01254 I    0  0    ( 50, 60, 60, 49),
01255 I    0  0    ( 60, 49, 60,  0),
01256 I    0  0    ( -1,  0,  0,  0),
01257 I    0  0    ( -1,  0,  0,  0),
01258 I    0  0    ( -1,  0,  0,  0),
01259 I    0  0    ( -1,  0,  0,  0),
01260 I    0  0    ( -1,  0,  0,  0),
01261 I    0  0    ( -1,  0,  0,  0),
01262 I C  0  0        {110 "n"}
01263 I    0  0    (  0,  0,  0, 60),
01264 I    0  0    (  0, 43, 17, 60),
01265 I    0  0    ( 17, 60, 43, 60),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   24
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01266 I    0  0    ( 43, 60, 60, 43),
01267 I    0  0    ( 60, 43, 60,  0),
01268 I    0  0    ( -1,  0,  0,  0),
01269 I    0  0    ( -1,  0,  0,  0),
01270 I    0  0    ( -1,  0,  0,  0),
01271 I    0  0    ( -1,  0,  0,  0),
01272 I    0  0    ( -1,  0,  0,  0),
01273 I    0  0    ( -1,  0,  0,  0),
01274 I    0  0    ( -1,  0,  0,  0),
01275 I    0  0    ( -1,  0,  0,  0),
01276 I    0  0    ( -1,  0,  0,  0),
01277 I    0  0    ( -1,  0,  0,  0),
01278 I C  0  0        {111 "o"}
01279 I    0  0    ( 17,  0,  0, 17),
01280 I    0  0    (  0, 17,  0, 43),
01281 I    0  0    (  0, 43, 17, 60),
01282 I    0  0    ( 17, 60, 43, 60),
01283 I    0  0    ( 17, 60, 43, 60),
01284 I    0  0    ( 43, 60, 60, 43),
01285 I    0  0    ( 60, 43, 60, 17),
01286 I    0  0    ( 60, 17, 43,  0),
01287 I    0  0    ( 43,  0, 17,  0),
01288 I    0  0    ( -1,  0,  0,  0),
01289 I    0  0    ( -1,  0,  0,  0),
01290 I    0  0    ( -1,  0,  0,  0),
01291 I    0  0    ( -1,  0,  0,  0),
01292 I    0  0    ( -1,  0,  0,  0),
01293 I    0  0    ( -1,  0,  0,  0),
01294 I C  0  0        {112 "p"}
01295 I    0  0    (  0, 60,  0,-40),
01296 I    0  0    (  0, 43, 17, 60),
01297 I    0  0    ( 17, 60, 43, 60),
01298 I    0  0    ( 43, 60, 60, 43),
01299 I    0  0    ( 60, 43, 60, 17),
01300 I    0  0    ( 60, 17, 43,  0),
01301 I    0  0    ( 43,  0, 17,  0),
01302 I    0  0    ( 17,  0,  0, 17),
01303 I    0  0    ( -1,  0,  0,  0),
01304 I    0  0    ( -1,  0,  0,  0),
01305 I    0  0    ( -1,  0,  0,  0),
01306 I    0  0    ( -1,  0,  0,  0),
01307 I    0  0    ( -1,  0,  0,  0),
01308 I    0  0    ( -1,  0,  0,  0),
01309 I    0  0    ( -1,  0,  0,  0),
01310 I C  0  0        {113 "q"}
01311 I    0  0    ( 17,  0,  0, 17),
01312 I    0  0    (  0, 17,  0, 43),
01313 I    0  0    (  0, 43, 17, 60),
01314 I    0  0    ( 17, 60, 43, 60),
01315 I    0  0    ( 43, 60, 60, 43),
01316 I    0  0    ( 60, 43, 60, 17),
01317 I    0  0    ( 60, 17, 43,  0),
01318 I    0  0    ( 43,  0, 17,  0),
01319 I    0  0    ( 60, 70, 60,-40),
01320 I    0  0    ( 60,-40, 64,-40),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   25
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01321 I    0  0    ( -1,  0,  0,  0),
01322 I    0  0    ( -1,  0,  0,  0),
01323 I    0  0    ( -1,  0,  0,  0),
01324 I    0  0    ( -1,  0,  0,  0),
01325 I    0  0    ( -1,  0,  0,  0),
01326 I C  0  0        {114 "r"}
01327 I    0  0    ( 10,  0, 10, 60),
01328 I    0  0    ( 10, 50, 20, 60),
01329 I    0  0    ( 20, 60, 50, 60),
01330 I    0  0    ( 50, 60, 60, 50),
01331 I    0  0    ( -1,  0,  0,  0),
01332 I    0  0    ( -1,  0,  0,  0),
01333 I    0  0    ( -1,  0,  0,  0),
01334 I    0  0    ( -1,  0,  0,  0),
01335 I    0  0    ( -1,  0,  0,  0),
01336 I    0  0    ( -1,  0,  0,  0),
01337 I    0  0    ( -1,  0,  0,  0),
01338 I    0  0    ( -1,  0,  0,  0),
01339 I    0  0    ( -1,  0,  0,  0),
01340 I    0  0    ( -1,  0,  0,  0),
01341 I    0  0    ( -1,  0,  0,  0),
01342 I C  0  0        {115 "s"}
01343 I    0  0    (  0, 10, 10,  0),
01344 I    0  0    ( 10,  0, 50,  0),
01345 I    0  0    ( 50,  0, 60, 10),
01346 I    0  0    ( 60, 10, 60, 20),
01347 I    0  0    ( 60, 20, 50, 30),
01348 I    0  0    ( 50, 30, 10, 30),
01349 I    0  0    ( 10, 30,  0, 40),
01350 I    0  0    (  0, 40,  0, 50),
01351 I    0  0    (  0, 50, 10, 60),
01352 I    0  0    ( 10, 60, 50, 60),
01353 I    0  0    ( 50, 60, 60, 50),
01354 I    0  0    ( -1,  0,  0,  0),
01355 I    0  0    ( -1,  0,  0,  0),
01356 I    0  0    ( -1,  0,  0,  0),
01357 I    0  0    ( -1,  0,  0,  0),
01358 I C  0  0        {116 "t"}
01359 I    0  0    ( 50, 10, 50,  5),
01360 I    0  0    ( 50,  5, 49,  3),
01361 I    0  0    ( 49,  3, 46,  0),
01362 I    0  0    ( 46,  0, 34,  0),
01363 I    0  0    ( 34,  0, 31,  3),
01364 I    0  0    ( 31,  3, 30,  5),
01365 I    0  0    ( 30,  5, 30, 70),
01366 I    0  0    ( 10, 50, 50, 50),
01367 I    0  0    ( -1,  0,  0,  0),
01368 I    0  0    ( -1,  0,  0,  0),
01369 I    0  0    ( -1,  0,  0,  0),
01370 I    0  0    ( -1,  0,  0,  0),
01371 I    0  0    ( -1,  0,  0,  0),
01372 I    0  0    ( -1,  0,  0,  0),
01373 I    0  0    ( -1,  0,  0,  0),
01374 I C  0  0        {117 "u"}
01375 I    0  0    (  0, 60,  0, 17),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   26
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01376 I    0  0    (  0, 17, 17,  0),
01377 I    0  0    ( 17,  0, 43,  0),
01378 I    0  0    ( 43,  0, 60, 17),
01379 I    0  0    ( 60, 17, 60, 60),
01380 I    0  0    ( 60, 17, 60,  0),
01381 I    0  0    ( -1,  0,  0,  0),
01382 I    0  0    ( -1,  0,  0,  0),
01383 I    0  0    ( -1,  0,  0,  0),
01384 I    0  0    ( -1,  0,  0,  0),
01385 I    0  0    ( -1,  0,  0,  0),
01386 I    0  0    ( -1,  0,  0,  0),
01387 I    0  0    ( -1,  0,  0,  0),
01388 I    0  0    ( -1,  0,  0,  0),
01389 I    0  0    ( -1,  0,  0,  0),
01390 I C  0  0        {118 "v"}
01391 I    0  0    (  0, 60, 30,  0),
01392 I    0  0    ( 30,  0, 60, 60),
01393 I    0  0    ( -1,  0,  0,  0),
01394 I    0  0    ( -1,  0,  0,  0),
01395 I    0  0    ( -1,  0,  0,  0),
01396 I    0  0    ( -1,  0,  0,  0),
01397 I    0  0    ( -1,  0,  0,  0),
01398 I    0  0    ( -1,  0,  0,  0),
01399 I    0  0    ( -1,  0,  0,  0),
01400 I    0  0    ( -1,  0,  0,  0),
01401 I    0  0    ( -1,  0,  0,  0),
01402 I    0  0    ( -1,  0,  0,  0),
01403 I    0  0    ( -1,  0,  0,  0),
01404 I    0  0    ( -1,  0,  0,  0),
01405 I    0  0    ( -1,  0,  0,  0),
01406 I C  0  0        {119 "w"}
01407 I    0  0    (  0, 60, 20,  0),
01408 I    0  0    ( 20,  0, 30, 30),
01409 I    0  0    ( 30, 30, 40,  0),
01410 I    0  0    ( 40,  0, 60, 60),
01411 I    0  0    ( -1,  0,  0,  0),
01412 I    0  0    ( -1,  0,  0,  0),
01413 I    0  0    ( -1,  0,  0,  0),
01414 I    0  0    ( -1,  0,  0,  0),
01415 I    0  0    ( -1,  0,  0,  0),
01416 I    0  0    ( -1,  0,  0,  0),
01417 I    0  0    ( -1,  0,  0,  0),
01418 I    0  0    ( -1,  0,  0,  0),
01419 I    0  0    ( -1,  0,  0,  0),
01420 I    0  0    ( -1,  0,  0,  0),
01421 I    0  0    ( -1,  0,  0,  0),
01422 I C  0  0        {120 "x"}
01423 I    0  0    (  0,  0, 60, 60),
01424 I    0  0    ( 60,  0,  0, 60),
01425 I    0  0    ( -1,  0,  0,  0),
01426 I    0  0    ( -1,  0,  0,  0),
01427 I    0  0    ( -1,  0,  0,  0),
01428 I    0  0    ( -1,  0,  0,  0),
01429 I    0  0    ( -1,  0,  0,  0),
01430 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   27
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01431 I    0  0    ( -1,  0,  0,  0),
01432 I    0  0    ( -1,  0,  0,  0),
01433 I    0  0    ( -1,  0,  0,  0),
01434 I    0  0    ( -1,  0,  0,  0),
01435 I    0  0    ( -1,  0,  0,  0),
01436 I    0  0    ( -1,  0,  0,  0),
01437 I    0  0    ( -1,  0,  0,  0),
01438 I C  0  0        {121 "y"}
01439 I    0  0    (  0, 60, 25,  3),
01440 I    0  0    ( 60, 60,  0,-40),
01441 I    0  0    ( -1,  0,  0,  0),
01442 I    0  0    ( -1,  0,  0,  0),
01443 I    0  0    ( -1,  0,  0,  0),
01444 I    0  0    ( -1,  0,  0,  0),
01445 I    0  0    ( -1,  0,  0,  0),
01446 I    0  0    ( -1,  0,  0,  0),
01447 I    0  0    ( -1,  0,  0,  0),
01448 I    0  0    ( -1,  0,  0,  0),
01449 I    0  0    ( -1,  0,  0,  0),
01450 I    0  0    ( -1,  0,  0,  0),
01451 I    0  0    ( -1,  0,  0,  0),
01452 I    0  0    ( -1,  0,  0,  0),
01453 I    0  0    ( -1,  0,  0,  0),
01454 I C  0  0        {122 "z"}
01455 I    0  0    (  0, 60, 60, 60),
01456 I    0  0    ( 60, 60,  0,  0),
01457 I    0  0    (  0,  0, 60,  0),
01458 I    0  0    ( -1,  0,  0,  0),
01459 I    0  0    ( -1,  0,  0,  0),
01460 I    0  0    ( -1,  0,  0,  0),
01461 I    0  0    ( -1,  0,  0,  0),
01462 I    0  0    ( -1,  0,  0,  0),
01463 I    0  0    ( -1,  0,  0,  0),
01464 I    0  0    ( -1,  0,  0,  0),
01465 I    0  0    ( -1,  0,  0,  0),
01466 I    0  0    ( -1,  0,  0,  0),
01467 I    0  0    ( -1,  0,  0,  0),
01468 I    0  0    ( -1,  0,  0,  0),
01469 I    0  0    ( -1,  0,  0,  0),
01470 I C  0  0        {123 "{"}
01471 I    0  0    ( 40,  0, 35,  7),
01472 I    0  0    ( 35,  7, 32, 13),
01473 I    0  0    ( 32, 13, 30, 19),
01474 I    0  0    ( 30, 19, 30, 40),
01475 I    0  0    ( 30, 40, 20, 50),
01476 I    0  0    ( 20, 50, 30, 60),
01477 I    0  0    ( 30, 60, 30, 81),
01478 I    0  0    ( 30, 81, 32, 87),
01479 I    0  0    ( 32, 87, 35, 93),
01480 I    0  0    ( 35, 93, 40,100),
01481 I    0  0    ( -1,  0,  0,  0),
01482 I    0  0    ( -1,  0,  0,  0),
01483 I    0  0    ( -1,  0,  0,  0),
01484 I    0  0    ( -1,  0,  0,  0),
01485 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   28
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01486 I C  0  0        {124 "|"}
01487 I    0  0    ( 30,  0, 30,100),
01488 I    0  0    ( -1,  0,  0,  0),
01489 I    0  0    ( -1,  0,  0,  0),
01490 I    0  0    ( -1,  0,  0,  0),
01491 I    0  0    ( -1,  0,  0,  0),
01492 I    0  0    ( -1,  0,  0,  0),
01493 I    0  0    ( -1,  0,  0,  0),
01494 I    0  0    ( -1,  0,  0,  0),
01495 I    0  0    ( -1,  0,  0,  0),
01496 I    0  0    ( -1,  0,  0,  0),
01497 I    0  0    ( -1,  0,  0,  0),
01498 I    0  0    ( -1,  0,  0,  0),
01499 I    0  0    ( -1,  0,  0,  0),
01500 I    0  0    ( -1,  0,  0,  0),
01501 I    0  0    ( -1,  0,  0,  0),
01502 I C  0  0        {125 "}{"}
01503 I    0  0    ( 20,  0, 25,  7),
01504 I    0  0    ( 25,  7, 28, 13),
01505 I    0  0    ( 28, 13, 30, 19),
01506 I    0  0    ( 30, 19, 30, 40),
01507 I    0  0    ( 30, 40, 40, 50),
01508 I    0  0    ( 40, 50, 30, 60),
01509 I    0  0    ( 30, 60, 30, 81),
01510 I    0  0    ( 30, 81, 28, 87),
01511 I    0  0    ( 28, 87, 25, 93),
01512 I    0  0    ( 25, 93, 20,100),
01513 I    0  0    ( -1,  0,  0,  0),
01514 I    0  0    ( -1,  0,  0,  0),
01515 I    0  0    ( -1,  0,  0,  0),
01516 I    0  0    ( -1,  0,  0,  0),
01517 I    0  0    ( -1,  0,  0,  0),
01518 I C  0  0        {126 "~"}
01519 I    0  0    (  0, 50,  4, 60),
01520 I    0  0    (  4, 60, 10, 67),
01521 I    0  0    ( 10, 67, 15, 69),
01522 I    0  0    ( 15, 69, 20, 68),
01523 I    0  0    ( 20, 68, 30, 61),
01524 I    0  0    ( 30, 61, 35, 54),
01525 I    0  0    ( 35, 54, 40, 50),
01526 I    0  0    ( 40, 50, 45, 49),
01527 I    0  0    ( 45, 49, 50, 51),
01528 I    0  0    ( 50, 51, 54, 54),
01529 I    0  0    ( 54, 54, 60, 62),
01530 I    0  0    ( -1,  0,  0,  0),
01531 I    0  0    ( -1,  0,  0,  0),
01532 I    0  0    ( -1,  0,  0,  0),
01533 I    0  0    ( -1,  0,  0,  0),
01534 I C  0  0        {127 " "}
01535 I    0  0    ( -1,  0,  0,  0),
01536 I    0  0    ( -1,  0,  0,  0),
01537 I    0  0    ( -1,  0,  0,  0),
01538 I    0  0    ( -1,  0,  0,  0),
01539 I    0  0    ( -1,  0,  0,  0),
01540 I    0  0    ( -1,  0,  0,  0),

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   29
QPLOT                           Source Listing                  26-Jan-1988 10:16:34    DUA1:[QPLOT.QPLOT.SOURCE]SYMBOL.I;338 (1)

-LINE-IDC-PL-SL-

01541 I    0  0    ( -1,  0,  0,  0),
01542 I    0  0    ( -1,  0,  0,  0),
01543 I    0  0    ( -1,  0,  0,  0),
01544 I    0  0    ( -1,  0,  0,  0),
01545 I    0  0    ( -1,  0,  0,  0),
01546 I    0  0    ( -1,  0,  0,  0),
01547 I    0  0    ( -1,  0,  0,  0),
01548 I    0  0    ( -1,  0,  0,  0),
01549 I    0  0    ( -1,  0,  0,  0));
01550 I    0  0 
01551   C  0  0 {=============================================================================}
01552      0  0 END.

FONT                                                            23-Dec-1988 09:51:46    VAX Pascal V3.7-254                Page   30
QPLOT                           Pascal Compilation Statistics   19-Oct-1987 11:02:23    DUA1:[QPLOT.QPLOT.SOURCE]FONT.PAS;8 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$LOCAL                               5760  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)



STANDARD                                                        23-Dec-1988 09:52:16    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  30-Nov-1988 09:57:46    [QPLOT.QPLOT.SOURCE]STANDARD.PAS;122 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ'),
00003      0  0   ENVIRONMENT ('QLIBHOME:STANDARD') ]
00004      0  0 MODULE standard (textfile);
00005   C  0  0 {=============================================================================}
00006   C  0  0 {  This module defines constants for use throughout qplot.  It MUST be        }
00007   C  0  0 {  inherited by all qplot modules.                                            }
00008   C  0  0 {=============================================================================}
00009      0  0 CONST
00010      0  0    QVERSION       = 'QPLOT Version 2.32C -- November 30, 1988';
00011      0  0    NUL            = chr(0);                       { End of ASCIIZ strings     }
00012      0  0    CTC            = chr(3);                       { Abort                     }
00013      0  0    BEL            = chr(7);                       { Ding Dong                 }
00014      0  0    BS             = chr(8);                       { Backspace                 }
00015      0  0    TAB            = chr(9);                       { TAB character             }
00016      0  0    LF             = chr(10);                      { Line Feed                 }
00017      0  0    FF             = chr(12);                      { Form Feed                 }
00018      0  0    CR             = chr(13);                      { Carriage Return           }
00019      0  0    SO             = chr(14);                      { Shift Out                 }
00020      0  0    SI             = chr(15);                      { Shift In                  }
00021      0  0    CTY            = chr(25);                      { Abort                     }
00022      0  0    CTZ            = chr(26);                      { Abort                     }
00023      0  0    ESC            = chr(27);                      { Escape character          }
00024      0  0    DEL            = chr(127);                     { Rubout character          }
00025      0  0    CRLF           = CR + LF;
00026      0  0    BIG            = 1D38;                         { Large number for vax      }
00027      0  0    PI             = 3.1415926535897932385D0;      { We all know what this is  }
00028      0  0    UNDEFINED_REAL = 9.4815190034524353295D31;     { Used for I/O routines     }
00029      0  0    LOGICALNAMESIZE= 20;                           { Size of logical names     }
00030      0  0 CONST
00031      0  0    QPL_ABORT      = %X08A7FFF8;                   { User Abort Error Code     }
00032      0  0    QPL_CTRLC      = %X08A7FFE8;                   { CTRLC Abort Error Code    }
00033      0  0    QPL_ERROR      = %X08A7FFD8;                   { QPLOT generated error     }
00034      0  0    QPL_BADSPAWN   = %X08A7FFC8;                   { Error in spawned process  }
00035      0  0 TYPE
00036      0  0    byte           = [BYTE] 0..255;                { halfword                  }
00037      0  0    shortunsigned  = [WORD] 0..65535;              { half of a doublword       }
00038      0  0    real           = double;                       { QPLOT uses only double    }
00039      0  0    anystring      = VARYING [255] OF char;        { Generic string type       }
00040      0  0    logicalname    = VARYING [LOGICALNAMESIZE] OF char; { Logical name type    }
00041      0  0    color_type     = VARYING [30] OF char;         { Used to name colors       }
00042      0  0    command_type   = VARYING [20] OF char;         { Command name type         }
00043      0  0    ins_type       = (I_col,I_pan,I_clo,I_pos,I_dra,I_siz,I_mar,I_pri,I_emp);
00044   C  0  0                                                   { Used externally... add    }
00045   C  0  0                                                   { items only at end!!!      }
00046      0  0    ipoint         = RECORD ix,iy : integer; END;  { Point in terminal space   }
00047      0  0 VAR
00048      0  0    textfile       : text;                         { General Purpose text file }
00049   C  0  0                                                   { Please close after using  }
00050   C  0  0                                                   { Test before using         }
00051      0  0    fieldwidth     : integer := 24;                { Width of real output      }
00052      0  0    goodconvert    : boolean;                      { Was last conversion good  }
00053      0  0    err            : [ VOLATILE ] 
00054      0  0                     VARYING [80] OF char := '';   { Latest error              }
00055      0  0    application    : RECORD

STANDARD                                                        23-Dec-1988 09:52:16    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  30-Nov-1988 09:57:46    [QPLOT.QPLOT.SOURCE]STANDARD.PAS;122 (1)

-LINE-IDC-PL-SL-

00056      0  0                     name              : logicalname;
00057      0  0                     helplibrary       : anystring;
00058      0  0                     equalscommand     : logicalname;
00059      0  0                     maintenanceperson : logicalname;
00060      0  0                     END
00061      0  0                   := ('QPLOT','','','');
00062   C  0  0 {=============================================================================}
00063   C  0  0 {-- ERROR SIGNALER -----------------------------------------------------------}
00064   C  0  0 {=============================================================================}
00065      0  0 [ GLOBAL ]
00066      1  0 PROCEDURE registerapplication (name : logicalname;  helplibrary : anystring;
00067      1  0    equalscommand : logicalname);
00068   C  1  0 { Purpose -- Initialize application structure.  Call at beginning of main  }
00069   C  1  0 {            Program with application name.                                }
00070      1  0 VAR
00071      1  0    line : anystring;
00072      1  1 BEGIN
00073      1  1 application.name          := name;
00074      1  1 application.helplibrary   := helplibrary;
00075      1  1 application.equalscommand := equalscommand;
00076      1  1 open (textfile,'QPLOTHOME:APPLICATI.BUG',OLD,ERROR:=CONTINUE);
00077      1  1 IF status (textfile) = 0
00078      1  1  THEN
00079      1  2   BEGIN
00080      1  2   reset (textfile);
00081      1  2   WHILE NOT eof (textfile) DO
00082      1  3      BEGIN
00083      1  3      readln (textfile,line);
00084      1  3      IF index (line,application.name) = 1
00085      1  3       THEN application.maintenanceperson := substr (line,16,length(line)-15);
00086      1  2      END;
00087      1  1   END;
00088      1  1 close (textfile,ERROR:=CONTINUE);
00089      0  0 END;
00090   C  0  0 {-----------------------------------------------------------------------------}
00091      0  0 [ GLOBAL ]
00092      1  0 PROCEDURE raise (inerr : VARYING [LEN] OF char);
00093   C  1  0 { Purpose -- Allow various routines to signal error conditions which will  }
00094   C  1  0 {            cancel the current procedure and return to command level.     }
00095      1  0 VAR
00096      1  0    i : integer;
00097      1  1 BEGIN
00098      1  1 err := '';
00099      1  1 FOR i := 1 TO LEN DO IF i <= 80 THEN err := err + inerr[i];
00100      1  1 LIB$SIGNAL (QPL_ERROR);
00101      0  0 END;
00102   C  0  0 {=============================================================================}
00103      0  0 END.

STANDARD                                                        23-Dec-1988 09:52:16    VAX Pascal V3.7-254                Page    3
QPLOT                           Pascal Compilation Statistics   30-Nov-1988 09:57:46    [QPLOT.QPLOT.SOURCE]STANDARD.PAS;122 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                 633  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                435  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         2         1



IO                                                              23-Dec-1988 09:52:27    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 13:20:58    DUA1:[QPLOT.QPLOT.SOURCE]IO.PAS;459 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD'),
00004      0  0   ENVIRONMENT ('QLIBHOME:IO') ]
00005      0  0 MODULE io;
00006   C  0  0 {=============================================================================}
00007      0  0 TYPE
00008      0  0    destination    = (OUT,AUD,BOTH,TEMP);          { QPLOT I/O outputs         }
00009      0  0 VAR
00010      0  0    tempfile       : [ GLOBAL ] text;              { File for destination temp }
00011      0  0    convertlower   : [ GLOBAL ] boolean := true;   { Convert lowercase to upper}
00012   C  0  0 {=============================================================================}
00013   C  0  0 {-- DEFINITION MODULE FOR IO SUBMODULE ---------------------------------------}
00014   C  0  0 {=============================================================================}
00015      1  0 FUNCTION registerqplot (name : logicalname;  helplibrary : anystring;
00016      1  0    equalscommand : logicalname) : anystring;
00017      0  0 EXTERN;
00018   C  0  0 {-----------------------------------------------------------------------------}
00019      1  0 PROCEDURE clearscreen;
00020      0  0 EXTERN;
00021   C  0  0 {-----------------------------------------------------------------------------}
00022      1  0 PROCEDURE writestring (dest : destination;  string : anystring);
00023      0  0 EXTERN;
00024   C  0  0 {-----------------------------------------------------------------------------}
00025      1  0 PROCEDURE writeline (dest : destination;  string : anystring);
00026      0  0 EXTERN;
00027   C  0  0 {-----------------------------------------------------------------------------}
00028      1  0 PROCEDURE pause;
00029      0  0 EXTERN;
00030   C  0  0 {-----------------------------------------------------------------------------}
00031      1  0 PROCEDURE bell;
00032      0  0 EXTERN;
00033   C  0  0 {-----------------------------------------------------------------------------}
00034      1  0 PROCEDURE readstring (prompt : VARYING [l1] OF CHAR;  
00035      1  0    VAR str : VARYING [l2] OF CHAR;  onceonly : boolean);
00036      0  0 EXTERN;
00037   C  0  0 {-----------------------------------------------------------------------------}
00038      1  0 PROCEDURE unread (m : VARYING [l1] OF CHAR);
00039      0  0 EXTERN;
00040   C  0  0 {-----------------------------------------------------------------------------}
00041      1  0 PROCEDURE readst ( prompt : VARYING [l1] OF CHAR;  
00042      1  0                    VAR s : VARYING [l2] OF CHAR);
00043      0  0 EXTERN;
00044   C  0  0 {-----------------------------------------------------------------------------}
00045      1  0 PROCEDURE readch ( prompt : VARYING [l1] OF CHAR;  VAR ch : char;  
00046      1  0    charset : anystring;  def : char);
00047      0  0 EXTERN;
00048   C  0  0 {-----------------------------------------------------------------------------}
00049      1  0 FUNCTION readyes (prompt : VARYING [l1] OF CHAR) : boolean;
00050      0  0 EXTERN;
00051   C  0  0 {-----------------------------------------------------------------------------}
00052      1  0 PROCEDURE readvary (prompt : VARYING [l1] OF CHAR;  
00053      1  0           VAR st : VARYING [l2] OF CHAR;  def : VARYING [l3] OF CHAR);
00054      0  0 EXTERN;
00055   C  0  0 {-----------------------------------------------------------------------------}

IO                                                              23-Dec-1988 09:52:27    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 13:20:58    DUA1:[QPLOT.QPLOT.SOURCE]IO.PAS;459 (1)

-LINE-IDC-PL-SL-

00056      1  0 PROCEDURE readlowervary (prompt : VARYING [l1] OF CHAR;  
00057      1  0           VAR st : VARYING [l2] OF CHAR;  def : VARYING [l3] OF CHAR);
00058      0  0 EXTERN;
00059   C  0  0 {-----------------------------------------------------------------------------}
00060      1  0 PROCEDURE readlogicalname (prompt : VARYING [l1] OF CHAR;  
00061      1  0           VAR st : logicalname;  def : logicalname);
00062      0  0 EXTERN;
00063   C  0  0 {-----------------------------------------------------------------------------}
00064      1  0 PROCEDURE readboo (prompt : VARYING [l1] OF CHAR; VAR f : boolean;  
00065      1  0    def : boolean);
00066      0  0 EXTERN;
00067   C  0  0 {-----------------------------------------------------------------------------}
00068      1  0 PROCEDURE readint (prompt : VARYING [l1] OF CHAR; VAR i : integer;  
00069      1  0    min,max,def : integer);
00070      0  0 EXTERN;
00071   C  0  0 {-----------------------------------------------------------------------------}
00072      1  0 PROCEDURE readreal (prompt : VARYING [l1] OF CHAR; VAR r : real;
00073      1  0    min,max,def : real);
00074      0  0 EXTERN;
00075   C  0  0 {-----------------------------------------------------------------------------}
00076      1  0 PROCEDURE editfile (filename : VARYING [l1] OF CHAR);
00077      0  0 EXTERN;
00078   C  0  0 {=============================================================================}
00079   C  0  0 {-- DEFINITION MODULE FOR COMMAND SUBMODULE ----------------------------------}
00080   C  0  0 {=============================================================================}
00081      1  0 FUNCTION candomenu : boolean;
00082      0  0 EXTERN;
00083   C  0  0 {-----------------------------------------------------------------------------}
00084      1  0 PROCEDURE startcommand (prompt : VARYING [l1] OF CHAR;  lettered : boolean);
00085      0  0 EXTERN;
00086   C  0  0 {-----------------------------------------------------------------------------}
00087      1  0 PROCEDURE setcommand (c : command_type);
00088      0  0 EXTERN;
00089   C  0  0 {-----------------------------------------------------------------------------}
00090      1  0 FUNCTION fullcommand (com : command_type) : command_type;
00091      0  0 EXTERN;
00092   C  0  0 {-----------------------------------------------------------------------------}
00093      1  0 PROCEDURE readcommand (VAR com : command_type;  default : char;
00094      1  0    toplevel : boolean;  helpprefix : anystring);
00095      0  0 EXTERN;
00096   C  0  0 {-----------------------------------------------------------------------------}
00097      1  0 PROCEDURE readargument (VAR arg : anystring);
00098      0  0 EXTERN;
00099   C  0  0 {-----------------------------------------------------------------------------}
00100      1  0 FUNCTION commandcount : integer;
00101      0  0 EXTERN;
00102   C  0  0 {-----------------------------------------------------------------------------}
00103      1  0 FUNCTION commandcreate (i : integer) : command_type;
00104      0  0 EXTERN;
00105   C  0  0 {=============================================================================}
00106   C  0  0 {-- LOW LEVEL GRAPHICS ROUTINES ----------------------------------------------}
00107   C  0  0 {=============================================================================}
00108      1  0 PROCEDURE setcolor (color : color_type);
00109      0  0 EXTERN;
00110   C  0  0 {-----------------------------------------------------------------------------}

IO                                                              23-Dec-1988 09:52:27    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 13:20:58    DUA1:[QPLOT.QPLOT.SOURCE]IO.PAS;459 (1)

-LINE-IDC-PL-SL-

00111      1  0 PROCEDURE openpanel (color,border_color : color_type);
00112      0  0 EXTERN;
00113   C  0  0 {-----------------------------------------------------------------------------}
00114      1  0 PROCEDURE closepanel;
00115      0  0 EXTERN;
00116   C  0  0 {-----------------------------------------------------------------------------}
00117      1  0 PROCEDURE position (ix,iy : integer);
00118      0  0 EXTERN;
00119   C  0  0 {-----------------------------------------------------------------------------}
00120      1  0 PROCEDURE moveto (ix,iy : integer);
00121      0  0 EXTERN;
00122   C  0  0 {-----------------------------------------------------------------------------}
00123      1  0 PROCEDURE draw (ix,iy : integer);
00124      0  0 EXTERN;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      1  0 PROCEDURE drawto (ix,iy : integer);
00127      0  0 EXTERN;
00128   C  0  0 {-----------------------------------------------------------------------------}
00129      1  0 PROCEDURE setchsize (width,height : integer);
00130      0  0 EXTERN;
00131   C  0  0 {-----------------------------------------------------------------------------}
00132      1  0 PROCEDURE setchmargin (charspacing,linespacing : integer);
00133      0  0 EXTERN;
00134   C  0  0 {-----------------------------------------------------------------------------}
00135      1  0 PROCEDURE grprint (string : anystring);
00136      0  0 EXTERN;
00137   C  0  0 {-----------------------------------------------------------------------------}
00138      1  0 PROCEDURE centergrprint (string : anystring);
00139      0  0 EXTERN;
00140   C  0  0 {-----------------------------------------------------------------------------}
00141      1  0 PROCEDURE finplot;
00142      0  0 EXTERN;
00143   C  0  0 {-----------------------------------------------------------------------------}
00144      1  0 PROCEDURE readgin (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00145      0  0 EXTERN;
00146   C  0  0 {=============================================================================}
00147      0  0 END.

IO                                                              23-Dec-1988 09:52:27    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 13:20:58    DUA1:[QPLOT.QPLOT.SOURCE]IO.PAS;459 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                  21  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 18  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         0         0
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        23        19



STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD'),
00004      0  0   ENVIRONMENT ('QLIBHOME:STRING')]
00005      0  0 MODULE string;
00006   C  0  0 {=============================================================================}
00007   C  0  0 {-- STRING MANIPILATION ------------------------------------------------------}
00008   C  0  0 {=============================================================================}
00009      0  0 [ GLOBAL ]
00010      1  0 FUNCTION chofcom (com : command_type) : char;
00011      1  0 VAR
00012      1  0    out : char;
00013      1  0    i   : integer;
00014      1  1 BEGIN
00015      1  1 IF com = ESC
00016      1  1  THEN out := ESC
00017      1  1  ELSE out := NUL;
00018      1  1 FOR i := length (com) DOWNTO 1 DO
00019      1  1    IF NOT (com[i] IN ['a'..'z']) 
00020      1  1     THEN out := com[i];
00021      1  1 chofcom := out;
00022      0  0 END;
00023   C  0  0 {-----------------------------------------------------------------------------}
00024      0  0 [ GLOBAL ]
00025      1  0 FUNCTION upcase (ch : char) : char;
00026      1  1 BEGIN
00027      1  1 IF ch IN ['a'..'z'] THEN upcase := chr(ord(ch)-32) ELSE upcase := ch;
00028      0  0 END;
00029   C  0  0 {-----------------------------------------------------------------------------}
00030      0  0 [ GLOBAL ]
00031      1  0 FUNCTION upcasestr (st : anystring) : anystring;
00032      1  0 VAR
00033      1  0    i   : integer;
00034      1  0    out : anystring;
00035      1  1 BEGIN
00036      1  1 out := st;
00037      1  1 FOR i := 1 TO length (out) DO
00038      1  1    IF out[i] IN ['a'..'z'] THEN out[i] := chr(ord(out[i])-32);
00039      1  1 upcasestr := out;
00040      0  0 END;
00041   C  0  0 {-----------------------------------------------------------------------------}
00042      0  0 [ GLOBAL ]
00043      1  0 FUNCTION stripblank (st : anystring) : anystring;
00044      1  0 VAR
00045      1  0    i   : integer;
00046      1  0    out : anystring;
00047      1  1 BEGIN
00048      1  1 out := '';
00049      1  1 FOR i := 1 TO length(st) DO IF st[i] <> ' ' THEN out := out + st[i];
00050      1  1 stripblank := out;
00051      0  0 END;
00052   C  0  0 {-----------------------------------------------------------------------------}
00053      0  0 [ GLOBAL ]
00054      1  0 FUNCTION striptrail (st : anystring) : anystring;
00055      1  0 VAR

STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

-LINE-IDC-PL-SL-

00056      1  0    i,j : integer;
00057      1  1 BEGIN
00058      1  1 j := 0;
00059      1  1 FOR i := 1 TO length(st) DO IF st[i] <> ' ' THEN j := i;
00060      1  1 striptrail := substr (st,1,j);
00061      0  0 END;
00062   C  0  0 {-----------------------------------------------------------------------------}
00063      0  0 [ GLOBAL ]
00064      1  0 FUNCTION strfix (st : anystring;  len : integer) : anystring;
00065   C  1  0 { Purpose -- Generate string of fixed length, truncating or padding as needed }
00066      1  1 BEGIN
00067      1  1 IF len <= length(st)
00068      1  1  THEN strfix := substr(st,1,len)
00069      1  1  ELSE strfix := pad (st,' ',len);
00070      0  0 END;
00071   C  0  0 {-----------------------------------------------------------------------------}
00072      0  0 [ GLOBAL ]
00073      1  0 FUNCTION strtrunc (st : anystring;  len : integer) : anystring;
00074   C  1  0 { Purpose -- Generate string less than a certain length, truncating as needed }
00075      1  1 BEGIN
00076      1  1 IF len <= length(st)
00077      1  1  THEN strtrunc := substr (st,1,len)
00078      1  1  ELSE strtrunc := st;
00079      0  0 END;
00080   C  0  0 {-----------------------------------------------------------------------------}
00081      0  0 [ GLOBAL ]
00082      1  0 FUNCTION strtime : anystring;
00083   C  1  0 { Purpose -- Generate a string that gives the date and time }
00084      1  0 VAR
00085      1  0    tstr,dstr : PACKED ARRAY [1..11] OF char;
00086      1  1 BEGIN
00087      1  1 time (tstr);
00088      1  1 date (dstr);
00089      1  1 strtime := tstr + '  ' + dstr;
00090      0  0 END;
00091   C  0  0 {-----------------------------------------------------------------------------}
00092      0  0 [ GLOBAL ]
00093      1  0 PROCEDURE namefromstr (VAR fname : logicalname;  string : anystring);
00094   C  1  0 { Purpose -- Convert character string into logical name.                   }
00095      1  0 VAR
00096      1  0    i         : integer;
00097      1  1 BEGIN
00098      1  1 goodconvert := true;
00099      1  1 string := striptrail (string);
00100      1  1 FOR i := 1 TO length (string) DO
00101      1  1    IF NOT (string[i] IN ['A'..'Z','0'..'9','_']) THEN string[i] := ' ';
00102      1  1 fname := strtrunc (stripblank (string),LOGICALNAMESIZE);
00103      1  1 IF fname = ''
00104      1  1  THEN fname := 'UNNAMED'
00105      1  1 ELSE IF fname <> string
00106      1  1  THEN goodconvert := false
00107      1  1 ELSE IF NOT (fname[1] IN ['A'..'Z'])
00108      1  1  THEN goodconvert := false
00109      1  1  ELSE goodconvert := true;
00110      0  0 END;

STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

-LINE-IDC-PL-SL-

00111   C  0  0 {-----------------------------------------------------------------------------}
00112      0  0 [ GLOBAL ]
00113      1  0 FUNCTION strofi (i : integer;  width : integer) : anystring;
00114   C  1  0 { Purpose -- Generate a string that represents an integer.     }
00115      1  0 VAR
00116      1  0    out      : anystring;
00117      1  1 BEGIN
00118      1  1 IF width = 0
00119      1  1  THEN 
00120      1  2   BEGIN
00121      1  2   writev (out,i:20);
00122      1  2   strofi := stripblank(out);
00123      1  2   END
00124      1  1  ELSE 
00125      1  2   BEGIN
00126      1  2   writev (out,i:width);
00127      1  2   strofi := out;
00128      1  1   END;
00129      0  0 END;
00130   C  0  0 {-----------------------------------------------------------------------------}
00131      0  0 [ GLOBAL ]
00132      1  0 FUNCTION strofr (r : real;  width : integer) : anystring;
00133   C  1  0 { Purpose -- Generate a string that represents a real number.      }
00134   C  1  0 {            Default width is given by the global fieldwidth.      }
00135      1  0 VAR
00136      1  0    i,status : integer;
00137      1  0    st       : PACKED ARRAY [1..80] OF char;
00138      1  0    out      : anystring;
00139      1  1 BEGIN
00140      1  1 IF width = 0 THEN width := fieldwidth;
00141      1  1 IF r = UNDEFINED_REAL
00142      1  1  THEN out := strfix('UNDEFINED',width)
00143      1  1 ELSE IF r = 0 
00144      1  1  THEN out := pad (' 0.','0',width-4) + '    '
00145      1  1 ELSE IF abs (r) >= 1
00146      1  1  THEN
00147      1  2   BEGIN
00148      1  2   status := FOR$CVT_D_TG (r,st,width-6,,1,,);
00149      1  2   out := substr (st,81-width,width);
00150      1  2   IF index (out,'E') <> 0
00151      1  2    THEN
00152      1  3     BEGIN
00153      1  3     status := FOR$CVT_D_TG (r,st,width-7,,1,,);
00154      1  3     out := substr (st,81-width,width);
00155      1  2     END;
00156      1  2   END
00157      1  1  ELSE 
00158      1  2   BEGIN
00159      1  2   status := FOR$CVT_D_TG (r,st,width-7,,1,,);
00160      1  2   out := substr (st,81-width,width);
00161      1  1   END;
00162      1  1 strofr := out;
00163      0  0 END;
00164   C  0  0 {-----------------------------------------------------------------------------}
00165      0  0 [ GLOBAL ]

STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

-LINE-IDC-PL-SL-

00166      1  0 FUNCTION strofr2 (r : real;  width,dec : integer) : anystring;
00167   C  1  0 { Purpose -- Generate a string that represents a real number.      }
00168      1  0 VAR
00169      1  0    i,status : integer;
00170      1  0    st       : PACKED ARRAY [1..80] OF char;
00171      1  0    out      : anystring;
00172      1  1 BEGIN
00173      1  1 IF r = UNDEFINED_REAL
00174      1  1  THEN out := strfix('UNDEFINED',width)
00175      1  1  ELSE 
00176      1  2   BEGIN
00177      1  2   status := FOR$CVT_D_TF (r,st,dec,,,,);
00178      1  2   out := substr (st,81-width,width);
00179      1  1   END;
00180      1  1 strofr2 := out;
00181      0  0 END;
00182   C  0  0 {-----------------------------------------------------------------------------}
00183      0  0 [ GLOBAL ]
00184      1  0 FUNCTION iofstr (st : anystring) : integer;
00185   C  1  0 { Purpose -- Convert character string into integer.                           }
00186   C  1  0 {            Variable goodconvert indicates result of conversion.             }
00187      1  0 VAR
00188      1  0    i   : integer;
00189      1  1 BEGIN
00190      1  1 goodconvert := OTS$CVT_TI_L ((st),i,4,1) = 1;
00191      1  1 IF goodconvert THEN iofstr := i ELSE iofstr := 0;
00192      0  0 END;
00193   C  0  0 {-----------------------------------------------------------------------------}
00194      0  0 [ GLOBAL ]
00195      1  0 FUNCTION rofstr (st : anystring) : real;
00196   C  1  0 { Purpose -- Convert character string into real number.                       }
00197   C  1  0 {            Variable goodconvert indicates result of conversion.             }
00198      1  0 VAR
00199      1  0    r  : real;
00200      1  1 BEGIN
00201      1  1 IF index (st + ' ','PI ') = 1
00202      1  2  THEN BEGIN goodconvert := true;  rofstr := PI;  END
00203      1  1 ELSE IF index (st,'UNDEF') = 1
00204      1  2  THEN BEGIN goodconvert := true;  rofstr := UNDEFINED_REAL;  END
00205      1  1  ELSE 
00206      1  2   BEGIN 
00207      1  2   goodconvert := OTS$CVT_T_D ((st),r,0,0,1) = 1;  
00208      1  2   IF goodconvert THEN rofstr := r ELSE rofstr := 0;
00209      1  1   END;
00210      0  0 END;
00211   C  0  0 {=============================================================================}
00212      0  0 TYPE
00213      0  0    parse_type = RECORD
00214      0  0                 ic    : integer;
00215      0  0                 line  : VARYING [1000] OF char;
00216      0  0                 END;
00217   C  0  0 {-----------------------------------------------------------------------------}
00218      0  0 [ GLOBAL ]
00219      1  0 PROCEDURE startparse (VAR p : parse_type;  l : anystring);
00220      1  1 BEGIN

STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

-LINE-IDC-PL-SL-

00221      1  1 p.ic := 1;
00222      1  1 p.line := l + NUL;
00223      0  0 END;
00224   C  0  0 {-----------------------------------------------------------------------------}
00225      0  0 [ GLOBAL ]
00226      1  0 FUNCTION parse (VAR p : parse_type;  stop : anystring) : anystring;
00227      1  0 VAR
00228      1  0    st : anystring;
00229      1  1 BEGIN
00230      1  1 stop := stop + NUL;
00231      1  1 IF length (p.line) >= p.ic
00232      1  1  THEN
00233      1  1   WHILE p.line[p.ic] = ' ' DO p.ic := p.ic + 1;
00234      1  1 st := '';
00235      1  1 IF (index (stop,p.line[p.ic]) <> 0) AND (p.line[p.ic] <> NUL)
00236      1  1  THEN
00237      1  2   BEGIN
00238      1  2   st := p.line[p.ic];
00239      1  2   p.ic := p.ic + 1;
00240      1  2   END
00241      1  1  ELSE
00242      1  1   WHILE index (stop,p.line[p.ic]) = 0 DO
00243      1  2      BEGIN
00244      1  2      st := st + p.line[p.ic];
00245      1  2      p.ic := p.ic + 1;
00246      1  1      END;
00247      1  1 parse := st;
00248      0  0 END;
00249   C  0  0 {=============================================================================}
00250      0  0 END.

STRING                                                          23-Dec-1988 09:52:37    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics    4-Dec-1987 15:04:03    DUA1:[QPLOT.QPLOT.SOURCE]STRING.PAS;56 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3555  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        50        19
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        26        21



COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:STRING'),
00006      0  0   ENVIRONMENT ('QLIBHOME:COLOR')]
00007      0  0 MODULE color;
00008   C  0  0 {=============================================================================}
00009   C  0  0 {-- BASIC COLOR OPERATIONS ---------------------------------------------------}
00010   C  0  0 {=============================================================================}
00011      0  0 TYPE
00012      0  0    hlsa_type        = RECORD
00013      0  0                       hue           : integer;
00014      0  0                       lightness     : integer;
00015      0  0                       saturation    : integer;
00016      0  0                       attribute     : char;
00017      0  0                       END;
00018      0  0    rgba_type        = RECORD
00019      0  0                       r             : real;
00020      0  0                       g             : real;
00021      0  0                       b             : real;
00022      0  0                       a             : char;
00023      0  0                       END;
00024   C  0  0 {-----------------------------------------------------------------------------}
00025      0  0 [ GLOBAL ]
00026      1  0 FUNCTION rgbaofhlsa (hlsa : hlsa_type) : rgba_type;
00027      1  0 VAR
00028      1  0    h,l,s : real;
00029      1  0    m1,m2 : real;
00030      1  0    rgba  : rgba_type;
00031   C  1  0 {-------------------}
00032      2  0 FUNCTION value (n1,n2,hue : real) : real;
00033      2  1 BEGIN
00034      2  1 IF hue > 360 THEN hue := hue - 360;
00035      2  1 IF hue <   0 THEN hue := hue + 360;
00036      2  1 IF      hue <  60 
00037      2  1  THEN value := n1 + (n2-n1) * hue / 60
00038      2  1 ELSE IF hue < 180 
00039      2  1  THEN value := n2
00040      2  1 ELSE IF hue < 240 
00041      2  1  THEN value := n1 + (n2-n1) * (240-hue) / 60
00042      2  1  ELSE value := n1;
00043      1  0 END;
00044   C  1  0 {-------------------}
00045      1  1 BEGIN
00046      1  1 h := hlsa.hue;
00047      1  1 l := hlsa.lightness / 100;
00048      1  1 s := hlsa.saturation / 100;
00049      1  1 IF l <= 0.5
00050      1  1  THEN m2 := l*(1+s)
00051      1  1  ELSE m2 := l+s - l*s;
00052      1  1 m1 := 2*l - m2;
00053      1  1 IF s = 0
00054      1  1  THEN
00055      1  2   BEGIN

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00056      1  2   rgba.r := l;
00057      1  2   rgba.g := l;
00058      1  2   rgba.b := l;
00059      1  2   END
00060      1  1  ELSE
00061      1  2   BEGIN
00062      1  2   rgba.b := value (m1,m2,h+120);
00063      1  2   rgba.r := value (m1,m2,h);
00064      1  2   rgba.g := value (m1,m2,h-120);
00065      1  1   END;
00066      1  1 rgba.a := hlsa.attribute;
00067      1  1 rgbaofhlsa := rgba;
00068      0  0 END;
00069   C  0  0 {-----------------------------------------------------------------------------}
00070      0  0 [ GLOBAL ]
00071      1  0 FUNCTION hlsaofrgba (rgba : rgba_type) : hlsa_type;
00072      1  0 VAR
00073      1  0    h,l,s            : real;
00074      1  0    max,min,rc,gc,bc : real;
00075      1  0    hlsa             : hlsa_type;
00076      1  1 BEGIN
00077      1  1 max := MTH$DMAX1 (rgba.r,rgba.g,rgba.b);
00078      1  1 min := MTH$DMIN1 (rgba.r,rgba.g,rgba.b);
00079      1  1 l := (max + min) / 2;
00080      1  1 IF max = min
00081      1  2  THEN BEGIN  s := 0;  h := 0;  END
00082      1  1  ELSE
00083      1  2   BEGIN
00084      1  2   IF l < 0.5
00085      1  2    THEN s := (max-min) / (max+min)
00086      1  2    ELSE s := (max-min) / (2-max-min);
00087      1  2   rc := (max-rgba.r) / (max-min);
00088      1  2   gc := (max-rgba.g) / (max-min);
00089      1  2   bc := (max-rgba.b) / (max-min);
00090      1  2   IF      rgba.b = max THEN h := 60 * (gc-rc)
00091      1  2   ELSE IF rgba.r = max THEN h := 60 * (bc-gc) + 120
00092      1  2   ELSE                      h := 60 * (rc-bc) + 240;
00093      1  2   IF h < 0 THEN h := h + 360;
00094      1  1   END;
00095      1  1 hlsa.hue        := round (h);
00096      1  1 hlsa.lightness  := round (l*100);
00097      1  1 hlsa.saturation := round (s*100);
00098      1  1 hlsa.attribute  := rgba.a;
00099      1  1 hlsaofrgba := hlsa;
00100      0  0 END;
00101   C  0  0 {=============================================================================}
00102   C  0  0 {-- COLOR DESCRIPTION DEFINITIONS --------------------------------------------}
00103   C  0  0 {=============================================================================}
00104      0  0 VAR
00105      0  0    endofgetcolor : boolean := false;
00106      0  0 [ HIDDEN ] CONST
00107      0  0    COLORLIM         = 99;
00108      0  0 [ HIDDEN ] TYPE
00109      0  0    colorclass_type  = (C_PRI,C_DEF,C_UNU);
00110      0  0    coloritem_type   = RECORD

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00111      0  0                       color        : color_type;
00112      0  0                       CASE colorclass : colorclass_type OF
00113      0  0                          C_PRI: (hlsa         : hlsa_type);
00114      0  0                          C_DEF: (equivalent   : color_type);
00115      0  0                          C_UNU: ();
00116      0  0                          END;
00117      0  0 [ HIDDEN ] VAR
00118      0  0    colorlist        : RECORD
00119      0  0                       count        : integer;
00120      0  0                       pos          : integer;
00121      0  0                       data         : ARRAY [1..COLORLIM] OF coloritem_type;
00122      0  0                       END
00123      0  0                     := (0,0,(COLORLIM OF ('',C_UNU)));
00124      0  0    depth            : integer;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      0  0 [ HIDDEN ] 
00127      1  0 FUNCTION iofcolor (c : color_type) : integer;
00128      1  0 VAR
00129      1  0    i,j : integer;
00130      1  1 BEGIN
00131      1  1 j := 0;
00132      1  1 FOR i := 1 TO colorlist.count DO
00133      1  1    IF c = colorlist.data[i].color THEN j := i;
00134      1  1 IF j = 0
00135      1  1  THEN
00136      1  2   BEGIN
00137      1  2   IF colorlist.count = COLORLIM 
00138      1  2    THEN raise ('COLOR: color definition list overflow');
00139      1  2   colorlist.count := colorlist.count + 1;
00140      1  2   j := colorlist.count;
00141      1  1   END;
00142      1  1 iofcolor := j;
00143      0  0 END;
00144   C  0  0 {-----------------------------------------------------------------------------}
00145      0  0 [ GLOBAL ]
00146      1  0 PROCEDURE addPRI (c : color_type;  h,l,s : integer;  a : char);
00147      1  1 BEGIN
00148      1  1 WITH colorlist.data[iofcolor(c)] DO
00149      1  2    BEGIN
00150      1  2    color           := c;
00151      1  2    colorclass      := C_PRI;
00152      1  2    hlsa.hue        := h;
00153      1  2    hlsa.lightness  := l;
00154      1  2    hlsa.saturation := s;
00155      1  2    hlsa.attribute  := a;
00156      1  1    END;
00157      0  0 END;
00158   C  0  0 {-----------------------------------------------------------------------------}
00159      0  0 [ GLOBAL ]
00160      1  0 PROCEDURE addDEF (c : color_type;  e : color_type);
00161      1  1 BEGIN
00162      1  1 WITH colorlist.data[iofcolor(c)] DO
00163      1  2    BEGIN
00164      1  2    color      := c;
00165      1  2    colorclass := C_DEF;

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00166      1  2    equivalent := e;
00167      1  1    END;
00168      0  0 END;
00169   C  0  0 {-----------------------------------------------------------------------------}
00170      0  0 [ HIDDEN ]
00171      1  0 FUNCTION hlsaofcolor_2 (c : color_type) : hlsa_type;
00172      1  0 VAR
00173      1  0    i,j,m             : integer;
00174      1  0    count,factor,ct   : real;
00175      1  0    rgba,rgba1        : rgba_type;
00176      1  0    cp                : color_type;
00177      1  0    p                 : parse_type;
00178      1  0    hlsa1             : hlsa_type;
00179   C  1  0 {------------------------------}
00180      2  0 FUNCTION findcolor (c : color_type) : integer;
00181      2  0 VAR
00182      2  0    i,j,p,match : integer;
00183      2  1 BEGIN
00184      2  1 j := 0;
00185      2  1 p := 0;
00186      2  1 match := 0;
00187      2  1 FOR i := 1 TO colorlist.count DO
00188      2  1    IF colorlist.data[i].color = c
00189      2  1     THEN p := i
00190      2  1    ELSE IF index (colorlist.data[i].color,c) = 1
00191      2  1     THEN BEGIN  j := i;  match := match + 1;  END;
00192      2  1 IF p > 0
00193      2  1  THEN findcolor := p
00194      2  1 ELSE IF match = 1
00195      2  1  THEN findcolor := j
00196      2  1  ELSE findcolor := 0;
00197      1  0 END;
00198   C  1  0 {------------------------------}
00199      1  1 BEGIN
00200      1  1 depth := depth + 1;
00201      1  1 IF depth > 10 THEN raise ('COLOR: Recursively defined color "' + c + '"');
00202      1  1 
00203      1  1 factor := 1;
00204      1  1 count := 0;
00205      1  1 startparse (p,c);
00206      1  1 rgba.r := 0;
00207      1  1 rgba.g := 0;
00208      1  1 rgba.b := 0;
00209      1  1 rgba.a := 'F';
00210      1  2 REPEAT
00211      1  2    cp := parse (p,' ');
00212      1  2    ct := rofstr (cp);
00213      1  2    j := findcolor (cp);
00214      1  2    IF cp = ''
00215      1  2     THEN
00216      1  2    ELSE IF goodconvert 
00217      1  2     THEN factor := ct
00218      1  2    ELSE IF j <> 0
00219      1  2     THEN 
00220      1  2      WITH colorlist.data[j] DO

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00221      1  3         CASE colorclass OF
00222      1  4            C_PRI:  CASE hlsa.attribute OF
00223      1  4                       'C':  rgba.a := 'C';
00224      1  4                       'B':  IF rgba.a <> 'C' THEN rgba.a := 'B';
00225      1  5                       ' ':  BEGIN
00226      1  5                             IF rgba.a = 'F' THEN rgba.a := ' ';
00227      1  5                             rgba1 := rgbaofhlsa (hlsa);
00228      1  5                             count := count + factor;
00229      1  5                             rgba.r := rgba.r + factor * rgba1.r;
00230      1  5                             rgba.g := rgba.g + factor * rgba1.g;
00231      1  5                             rgba.b := rgba.b + factor * rgba1.b;
00232      1  5                             factor := 1;
00233      1  4                             END;
00234      1  3                       END;
00235      1  4            C_DEF:  BEGIN
00236      1  4                    IF rgba.a = 'F' THEN rgba.a := ' ';
00237      1  4                    hlsa1 := hlsaofcolor_2 (equivalent);
00238      1  5                    CASE hlsa1.attribute OF
00239      1  5                       'C':  rgba.a := 'C';
00240      1  5                       'B':  IF rgba.a <> 'C' THEN rgba.a := 'B';
00241      1  4                       END;
00242      1  4                    rgba1 := rgbaofhlsa (hlsa1);
00243      1  4                    count := count + factor;
00244      1  4                    rgba.r := rgba.r + factor * rgba1.r;
00245      1  4                    rgba.g := rgba.g + factor * rgba1.g;
00246      1  4                    rgba.b := rgba.b + factor * rgba1.b;
00247      1  4                    factor := 1;
00248      1  3                    END;
00249      1  3            END
00250      1  2     ELSE rgba.a := 'F';
00251      1  1    UNTIL cp = '';
00252      1  1 IF (count > 0) AND (rgba.a <> 'F')
00253      1  1  THEN 
00254      1  2   BEGIN  
00255      1  2   rgba.r := rgba.r / count;  
00256      1  2   rgba.g := rgba.g / count;  
00257      1  2   rgba.b := rgba.b / count;  
00258      1  2   END
00259      1  1  ELSE 
00260      1  2   BEGIN  
00261      1  2   rgba.r := 0.5;
00262      1  2   rgba.g := 0.5;
00263      1  2   rgba.b := 0.5;
00264      1  1   END;
00265      1  1 hlsaofcolor_2 := hlsaofrgba (rgba);
00266      1  1 depth := depth - 1;
00267      0  0 END;
00268   C  0  0 {-----------------------------------------------------------------------------}
00269      0  0 [ GLOBAL ]
00270      1  0 FUNCTION hlsaofcolor (c : color_type) : hlsa_type;
00271      1  0 VAR
00272      1  0    token : logicalname;
00273      1  0    p     : parse_type;
00274      1  0    hlsa  : hlsa_type;
00275      1  1 BEGIN

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00276      1  1 IF c[1] IN  ['#','*']
00277      1  1  THEN
00278      1  2   BEGIN
00279      1  2   startparse (p,c);
00280      1  2   token := parse (p,' #');
00281      1  2   hlsa.hue        := iofstr (parse (p,' '));
00282      1  2   hlsa.lightness  := iofstr (parse (p,' '));
00283      1  2   hlsa.saturation := iofstr (parse (p,' '));
00284      1  2   IF c[1] = '#'
00285      1  2    THEN hlsa.attribute := ' '
00286      1  2    ELSE hlsa.attribute := 'B';
00287      1  2   hlsaofcolor := hlsa;
00288      1  2   END
00289      1  1  ELSE
00290      1  2   BEGIN
00291      1  2   depth := 0;
00292      1  2   hlsaofcolor := hlsaofcolor_2 (c);
00293      1  1   END;
00294      0  0 END;
00295   C  0  0 {-----------------------------------------------------------------------------}
00296      0  0 [ GLOBAL ]
00297      1  0 FUNCTION goodcolor (c : color_type) : boolean;
00298      1  0 VAR 
00299      1  0    hlsa : hlsa_type;
00300      1  1 BEGIN
00301      1  1 hlsa := hlsaofcolor (c);
00302      1  1 goodcolor := hlsa.attribute <> 'F';
00303      0  0 END;
00304   C  0  0 {-----------------------------------------------------------------------------}
00305      0  0 [ GLOBAL ]
00306      1  0 FUNCTION clearcolor (c : color_type) : boolean;
00307      1  0 VAR 
00308      1  0    hlsa : hlsa_type;
00309      1  1 BEGIN
00310      1  1 hlsa := hlsaofcolor (c);
00311      1  1 clearcolor := hlsa.attribute = 'C';
00312      0  0 END;
00313   C  0  0 {-----------------------------------------------------------------------------}
00314      0  0 [ HIDDEN ]
00315      1  0 PROCEDURE setendofgetcolor;
00316      1  0 VAR
00317      1  0    i : integer;
00318      1  1 BEGIN
00319      1  1 endofgetcolor := true;
00320      1  1 FOR i := colorlist.pos+1 TO colorlist.count DO
00321      1  1    IF colorlist.data[i].colorclass = C_DEF
00322      1  1     THEN endofgetcolor := false;
00323      0  0 END;
00324   C  0  0 {-----------------------------------------------------------------------------}
00325      0  0 [ GLOBAL ]
00326      1  0 PROCEDURE startgetcolor;
00327      1  1 BEGIN
00328      1  1 colorlist.pos := 0;
00329      1  1 setendofgetcolor;
00330      0  0 END;

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00331   C  0  0 {-----------------------------------------------------------------------------}
00332      0  0 [ GLOBAL ]
00333      1  0 FUNCTION getcolor : color_type;
00334      1  1 BEGIN
00335      1  2 REPEAT
00336      1  2    colorlist.pos := colorlist.pos + 1;
00337      1  2    getcolor := colorlist.data[colorlist.pos].color;
00338      1  1    UNTIL colorlist.data[colorlist.pos].colorclass = C_DEF;
00339      1  1 setendofgetcolor;
00340      0  0 END;
00341   C  0  0 {-----------------------------------------------------------------------------}
00342      0  0 [ GLOBAL ]
00343      1  0 FUNCTION equofcolor (c : color_type) : color_type;
00344      1  0 VAR
00345      1  0    i : integer;
00346      1  1 BEGIN
00347      1  1 equofcolor := 'UNDEFINED';
00348      1  1 FOR i := 1 TO colorlist.count DO
00349      1  1    WITH colorlist.data[i] DO
00350      1  1       IF (color = c) AND (colorclass = C_DEF) THEN equofcolor := equivalent;
00351      0  0 END;
00352   C  0  0 {-----------------------------------------------------------------------------}
00353      0  0 [ GLOBAL ]
00354      1  0 PROCEDURE viewcolors;
00355      1  0 VAR
00356      1  0    i : integer;
00357      1  1 BEGIN
00358      1  1 writeline (out,' #  COLOR                          DEFINITION                ');
00359      1  1 writeline (out,'--  -----------------------------  --------------------------');
00360      1  1 FOR i := 1 TO colorlist.count DO
00361      1  1    WITH colorlist.data[i] DO
00362      1  2       CASE colorclass OF
00363      1  2          C_PRI:  writeline (out,strofi (i,2)
00364      1  2                  + '  ' + strfix (color,30)
00365      1  2                  + ' (' + strofi (hlsa.hue,3)
00366      1  2                  + '  ' + strofi (hlsa.lightness,3)
00367      1  2                  + '  ' + strofi (hlsa.saturation,3)
00368      1  2                  + '  ' + hlsa.attribute
00369      1  2                  + ')');
00370      1  2          C_DEF:  writeline (out,strofi (i,2)
00371      1  2                  + '  ' + strfix (color,30)
00372      1  2                  + ' =' + strfix (equivalent,30));
00373      1  1          END;
00374      1  1 writeline (out,'--  -----------------------------  --------------------------');
00375      0  0 END;
00376   C  0  0 {-----------------------------------------------------------------------------}
00377      0  0 [ INITIALIZE,HIDDEN ]
00378      1  0 PROCEDURE colorinit;
00379      1  1 BEGIN
00380      1  1 addPRI ('BLACK'          ,  0,  0,  0,' ');
00381      1  1 addPRI ('DARK'           ,  0,  0,  0,' ');
00382      1  1 addPRI ('GRAY'           ,  0, 50,  0,' ');
00383      1  1 addPRI ('GREY'           ,  0, 50,  0,' ');
00384      1  1 addPRI ('WHITE'          ,  0,100,  0,' ');
00385      1  1 addPRI ('LIGHT'          ,  0,100,  0,' ');

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    8
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00386      1  1 addPRI ('CLEAR'          ,  0,  0,  0,'C');
00387      1  1 addPRI ('BLINK'          ,  0,  0,  0,'B');
00388      1  1 addPRI ('BLUE'           ,  0, 50,100,' ');
00389      1  1 addPRI ('MAGENTA'        , 60, 50,100,' ');
00390      1  1 addPRI ('RED'            ,120, 50,100,' ');
00391      1  1 addPRI ('YELLOW'         ,180, 50,100,' ');
00392      1  1 addPRI ('GREEN'          ,240, 50,100,' ');
00393      1  1 addPRI ('CYAN'           ,300, 50,100,' ');
00394      1  1 addPRI ('ORANGE'         ,160, 50,100,' ');
00395      1  1 addPRI ('PURPLE'         , 24, 50, 50,' ');
00396      1  1 addPRI ('PINK'           ,120, 80,100,' ');
00397      1  1 addPRI ('BROWN'          ,150, 30,100,' ');
00398      1  1 addPRI ('OLIVE'          ,240, 30,100,' ');
00399      1  1 addPRI ('LAVENDER'       , 60, 70,100,' ');
00400      1  1 addPRI ('VIOLET'         , 44, 75, 90,' ');
00401      1  1 addPRI ('ROSE'           , 80, 50, 50,' ');
00402      1  1 addPRI ('RUST'           ,120, 50, 60,' ');
00403      1  1 addPRI ('GRASS'          ,220, 50, 50,' ');
00404      1  1 addPRI ('SKY'            ,308, 50, 90,' ');
00405      1  1 addPRI ('SLATE'          ,320, 30, 80,' ');
00406      1  1 addPRI ('PUCE'           , 92, 50, 90,' ');
00407      1  1 
00408      1  1 addDEF ('BOX'            ,'WHITE');
00409      1  1 addDEF ('CURSOR_1'       ,'RED');
00410      1  1 addDEF ('CURSOR_2'       ,'YELLOW');
00411      1  1 addDEF ('DARKGRAY'       ,'DARK GRAY GRAY');
00412      1  1 addDEF ('FILL'           ,'LIGHT GRAY GRAY');
00413      1  1 addDEF ('GIN_FRAMEALL'   ,'CYAN');
00414      1  1 addDEF ('GIN_FRAMELOCK'  ,'LIGHT GREEN');
00415      1  1 addDEF ('GIN_FRAMESELECT','BLUE');
00416      1  1 addDEF ('GIN_NORMAL'     ,'LIGHT YELLOW');
00417      1  1 addDEF ('HEADING'        ,'WHITE');
00418      1  1 addDEF ('OVERBOX'        ,'CLEAR');
00419      1  1 addDEF ('OVERCHAR'       ,'LIGHT RED');
00420      1  1 addDEF ('PANE'           ,'BLACK');
00421      1  1 addDEF ('PLOTBACK'       ,'BLACK');
00422      1  1 addDEF ('POLARGRID'      ,'DARKGRAY');
00423      1  1 addDEF ('OVERBOX'        ,'CLEAR');
00424      1  1 addDEF ('OVERCHAR'       ,'LIGHT RED');
00425      1  1 addDEF ('TEXTBACK'       ,'DARK BLUE');
00426      1  1 addDEF ('TEXTBOX'        ,'BLUE');
00427      1  1 addDEF ('TEXTCHAR'       ,'WHITE');
00428      1  1 addDEF ('WINDOW'         ,'BLACK');
00429      1  1 addDEF ('XGRID'          ,'CLEAR');
00430      1  1 addDEF ('XLABEL'         ,'WHITE');
00431      1  1 addDEF ('XNUMBER'        ,'WHITE');
00432      1  1 addDEF ('XSUBGRID'       ,'CLEAR');
00433      1  1 addDEF ('XSUBTICK'       ,'DARKGRAY');
00434      1  1 addDEF ('XTICK'          ,'DARKGRAY');
00435      1  1 addDEF ('YGRID'          ,'CLEAR');
00436      1  1 addDEF ('YLABEL'         ,'WHITE');
00437      1  1 addDEF ('YNUMBER'        ,'WHITE');
00438      1  1 addDEF ('YSUBGRID'       ,'CLEAR');
00439      1  1 addDEF ('YSUBTICK'       ,'DARKGRAY');
00440      1  1 addDEF ('YTICK'          ,'DARKGRAY');

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page    9
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00441      1  1 addDEF ('ZOOMBOX'        ,'YELLOW');
00442      1  1 addDEF ('ZOOMFILL'       ,'BROWN');
00443      0  0 END;
00444   C  0  0 {=============================================================================}
00445   C  0  0 {-- PALETTE OPERATIONS -------------------------------------------------------}
00446   C  0  0 {=============================================================================}
00447      0  0 TYPE
00448      0  0    pal_type         = RECORD
00449      0  0                       ir            : integer;
00450      0  0                       ig            : integer;
00451      0  0                       ib            : integer;
00452      0  0                       ia            : char;
00453      0  0                       END;
00454      0  0    palette_type     = RECORD
00455      0  0                       count         : integer;
00456      0  0                       max           : integer;
00457      0  0                       intensities   : integer;
00458      0  0                       candoblink    : boolean;
00459      0  0                       data          : ARRAY [1..256] OF pal_type;
00460      0  0                       END;
00461      0  0 VAR
00462      0  0    termpalette      : palette_type;
00463      0  0    hardpalette      : palette_type;
00464   C  0  0 {-----------------------------------------------------------------------------}
00465      0  0 [ HIDDEN ]
00466      1  0 FUNCTION palofcolor (c : color_type;  intensities : integer) : pal_type;
00467      1  0 VAR
00468      1  0    rgbmax : real;
00469      1  0    hlsa   : hlsa_type;
00470      1  0    rgba   : rgba_type;
00471      1  0    pal    : pal_type;
00472      1  1 BEGIN
00473      1  1 hlsa := hlsaofcolor (c);
00474      1  1 rgba := rgbaofhlsa (hlsa);
00475      1  1 pal.ir := trunc (rgba.r * intensities - 0.01);
00476      1  1 pal.ig := trunc (rgba.g * intensities - 0.01);
00477      1  1 pal.ib := trunc (rgba.b * intensities - 0.01);
00478      1  1 IF pal.ir > intensities THEN pal.ir := intensities;
00479      1  1 IF pal.ig > intensities THEN pal.ig := intensities;
00480      1  1 IF pal.ib > intensities THEN pal.ib := intensities;
00481      1  1 pal.ia := rgba.a;
00482      1  1 IF (pal.ir = 0) AND (pal.ig = 0) AND (pal.ib = 0) AND (pal.ia <> 'C') AND
00483      1  1    (hlsa.lightness <> 0)
00484      1  1  THEN
00485      1  2   BEGIN
00486      1  2   rgbmax := rgba.r;
00487      1  2   IF rgba.g > rgbmax THEN rgbmax := rgba.g;
00488      1  2   IF rgba.b > rgbmax THEN rgbmax := rgba.b;
00489      1  2   IF (rgba.r > rgbmax - 0.1/intensities) THEN pal.ir := 1;
00490      1  2   IF (rgba.g > rgbmax - 0.1/intensities) THEN pal.ig := 1;
00491      1  2   IF (rgba.b > rgbmax - 0.1/intensities) THEN pal.ib := 1;
00492      1  1   END;
00493      1  1 palofcolor := pal;
00494      0  0 END;
00495   C  0  0 {-----------------------------------------------------------------------------}

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page   10
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00496      0  0 [ HIDDEN ]
00497      1  0 FUNCTION colordif (VAR p : palette_type;  p1,p2 : pal_type) : integer;
00498      1  0 VAR
00499      1  0    dif : integer;
00500      1  1 BEGIN
00501      1  1 dif := (p1.ir-p2.ir)**2 + (p1.ig-p2.ig)**2 + (p1.ib-p2.ib)**2;
00502      1  1 IF (p1.ia = 'C') AND (p2.ia = 'C')
00503      1  1  THEN colordif := 0
00504      1  1 ELSE IF (p1.ia = 'C') OR (p2.ia = 'C')
00505      1  1  THEN colordif := 8 * p.intensities ** 2
00506      1  1 ELSE IF (p1.ia <> p2.ia) AND p.candoblink
00507      1  1  THEN colordif := dif*2+1
00508      1  1  ELSE colordif := dif*2;
00509      0  0 END;
00510   C  0  0 {-----------------------------------------------------------------------------}
00511      0  0 [ GLOBAL ]
00512      1  0 PROCEDURE initpalette (VAR p : palette_type;  maxcolor,intensities : integer;
00513      1  0    candoblink : boolean);
00514      1  1 BEGIN
00515      1  1 p.count       := 0;
00516      1  1 p.max         := maxcolor;
00517      1  1 p.intensities := intensities;
00518      1  1 p.candoblink  := candoblink;
00519      0  0 END;
00520   C  0  0 {-----------------------------------------------------------------------------}
00521      0  0 [ GLOBAL ]
00522      1  0 PROCEDURE getcolorindex (VAR ix : integer;  VAR new : boolean;
00523      1  0    VAR p : palette_type;  c : color_type);
00524      1  0 VAR
00525      1  0    pal         : pal_type;
00526      1  0    dif,lowdif  : integer;
00527      1  0    i,j,perfect : integer;
00528      1  1 BEGIN
00529      1  1 pal     := palofcolor (c,p.intensities);
00530      1  1 j       := 0;
00531      1  1 perfect := 0;
00532      1  1 lowdif  := MAXINT;
00533      1  1 FOR i := 1 TO p.count DO
00534      1  2    BEGIN
00535      1  2    dif := colordif (p,pal,p.data[i]);
00536      1  2    IF dif <= lowdif
00537      1  2     THEN
00538      1  3      BEGIN
00539      1  3      lowdif := dif;
00540      1  3      j := i;
00541      1  3      IF dif = 0 THEN perfect := i;
00542      1  2      END;
00543      1  1    END;
00544      1  1 IF pal.ia = 'C'
00545      1  1  THEN ix := 0
00546      1  1 ELSE IF perfect <> 0
00547      1  1  THEN ix := perfect
00548      1  1 ELSE IF p.count < p.max
00549      1  1  THEN ix := p.count + 1
00550      1  1  ELSE ix := j;

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page   11
QPLOT                           Source Listing                   7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

-LINE-IDC-PL-SL-

00551      1  1 new := ix > p.count;
00552      1  1 IF new
00553      1  1  THEN
00554      1  2   BEGIN
00555      1  2   p.count := p.count + 1;
00556      1  2   p.data[p.count] := pal;
00557      1  1   END;
00558      0  0 END;
00559   C  0  0 {=============================================================================}
00560      0  0 END.

COLOR                                                           23-Dec-1988 09:53:01    VAX Pascal V3.7-254                Page   12
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 15:06:47    DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PAS;113 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                               10340  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                              13137  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
LIB$INITIALIZE                          4  NOVEC,NOWRT,  RD,NOEXE,NOSHR,  GBL,  REL,  CON,NOPIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         6         2
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        18        15
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        17         8
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        33        46



FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD'),
00003      0  0   ENVIRONMENT ('QLIBHOME:FIG') ]
00004      0  0 MODULE fig;
00005   C  0  0 {=============================================================================}
00006   C  0  0 {-- VIEWPORT CONFIGURATION DEFINITIONS ---------------------------------------}
00007   C  0  0 {=============================================================================}
00008      0  0 CONST
00009      0  0    LIMFRAMELIST   = 20;
00010      0  0 TYPE
00011      0  0    limitpoint     = RECORD
00012      0  0                     x,y     : real;
00013      0  0                     END;
00014      0  0 
00015      0  0    plotlimits     = RECORD
00016      0  0                     min,max : limitpoint;
00017      0  0                     END;
00018      0  0 
00019      0  0    zoomlink       = ^zoomtype;
00020      0  0    zoomtype       = RECORD
00021      0  0                     lim       : plotlimits;
00022      0  0                     nextzoom  : zoomlink;
00023      0  0                     END;
00024      0  0 
00025      0  0    frameaxis_type = RECORD
00026      0  0                     log         : boolean;                   { SETX }
00027      0  0                     convert     : real;                      { SETX }
00028      0  0                     labletext   : VARYING [80] OF char;      { SETX }
00029      0  0                     suffix      : VARYING [20] OF char;      { SETX }
00030      0  0                     lablelow    : boolean;                   { SETX }
00031      0  0                     lablehigh   : boolean;                   { SETX }
00032      0  0                     bmin        : integer;                   { AUTO }
00033      0  0                     bmax        : integer;                   { AUTO }
00034      0  0                     jmin        : integer;                   { AUTO }
00035      0  0                     jmax        : integer;                   { AUTO }
00036      0  0                     min         : real;                      { AUTO }
00037      0  0                     max         : real;                      { AUTO }
00038      0  0                     round       : boolean;                   { U F XY R }
00039      0  0                     tick        : color_type;                { U F XY T }
00040      0  0                     subtick     : color_type;                { U F XY T }
00041      0  0                     grid        : color_type;                { U F XY G }
00042      0  0                     subgrid     : color_type;                { U F XY S }
00043      0  0                     lable       : color_type;                { U F XY L }
00044      0  0                     number      : color_type;                { U F XY L }
00045      0  0                     END;
00046      0  0 
00047      0  0    frame_type     = RECORD
00048      0  0                     x,y         : frameaxis_type;            { }
00049      0  0                     title       : anystring;                 { SETL }
00050      0  0                     format      : (XYTICK,XYNOTICK,
00051      0  0                                    XYPLAIN,POLAR);           { MAPIT }
00052      0  0                     lim         : plotlimits;                { SETL }
00053      0  0                     currlim     : plotlimits;                { SETL }
00054      0  0                     templim     : plotlimits;                { SETL AUTO }
00055      0  0                     lset,uset   : boolean;                   { SETL AUTO }

FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

-LINE-IDC-PL-SL-

00056      0  0                     firstzoom   : zoomlink;                  { SETL AUTO }
00057      0  0                     origin      : real;                      { MAPIT }
00058      0  0                     squarebox   : boolean;                   { SETF }
00059      0  0                     fullborder  : boolean;                   { SETF }
00060      0  0                     clearpanels : boolean;                   { SETF }
00061      0  0                     ticksize    : integer;                   { U F S T }
00062      0  0                     subticksize : integer;                   { U F S S }
00063      0  0                     maxticks    : integer;                   { U F S M }
00064      0  0                     radpct      : integer;                   { U F S R }
00065      0  0                     azipct      : integer;                   { U F S A }
00066      0  0                     window      : color_type;                { U F S W }
00067      0  0                     pane        : color_type;                { U F S P }
00068      0  0                     box         : color_type;                { U F S B }
00069      0  0                     fill        : color_type;                { U F S F }
00070      0  0                     heading     : color_type;                { U F S H }
00071      0  0                     END;
00072      0  0 
00073      0  0    framelink      = ^frame_type;
00074      0  0    framelist_type = RECORD
00075      0  0                     count     : integer;
00076      0  0                     data      : ARRAY [0..LIMFRAMELIST] OF framelink;
00077      0  0                     END;
00078      0  0 VAR
00079      0  0    frametemplate  : framelist_type := (0,(LIMFRAMELIST+1 OF NIL));
00080      0  0    frame          : framelist_type := (0,(LIMFRAMELIST+1 OF NIL));
00081      0  0 
00082      0  0 [ HIDDEN ] VAR
00083      0  0    background     : [ VOLATILE ] frame_type
00084      0  0                   := ((false,1,'X-AXIS','',true,false,0,65535,0,65535,0,65535,
00085      0  0                          false,'XTICK','XSUBTICK',
00086      0  0                                'XGRID','XSUBGRID','XLABEL','XNUMBER'),
00087      0  0                       (false,1,'Y-AXIS','',true,false,0,49151,0,49151,0,49151,
00088      0  0                          false,'YTICK','YSUBTICK',
00089      0  0                                'YGRID','YSUBGRID','YLABEL','YNUMBER'),
00090      0  0                       'BACKGROUND',
00091      0  0                       XYPLAIN,((0,0),(65535,49151)),((0,0),(65535,49151)),
00092      0  0                       ((0,0),(65535,49151)),
00093      0  0                       false,false,NIL,0,true,false,false,1024,640,7,65,65,
00094      0  0                       'WINDOW','PANE','BOX','FILL','HEADING');
00095   C  0  0 {-----------------------------------------------------------------------------}
00096      0  0 [ GLOBAL ]
00097      1  0 PROCEDURE addtemplate (l : framelink);
00098      1  1 BEGIN
00099      1  1 frametemplate.count   := frametemplate.count + 1;
00100      1  1 frametemplate.data[frametemplate.count] := l;
00101      0  0 END;
00102   C  0  0 {-----------------------------------------------------------------------------}
00103      0  0 [ INITIALIZE, HIDDEN ]
00104      1  0 PROCEDURE initframe;
00105      1  1 BEGIN
00106      1  1 addtemplate (address (background));
00107      1  1 frame.count   := 0;
00108      1  1 frame.data[0] := address (background);
00109      0  0 END;
00110   C  0  0 {=============================================================================}

FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

-LINE-IDC-PL-SL-

00111   C  0  0 {-- GENERAL CONFIGURATION DEFINITIONS ----------------------------------------}
00112   C  0  0 {=============================================================================}
00113      0  0 TYPE
00114      0  0    ch_type        = RECORD
00115      0  0                     width       : integer;
00116      0  0                     height      : integer;
00117      0  0                     charspacing : integer;
00118      0  0                     linespacing : integer;
00119      0  0                     END;
00120      0  0 VAR
00121      0  0    config         : RECORD
00122      0  0                     editor      : command_type;
00123      0  0                     overlaykill : boolean;
00124      0  0                     verify      : boolean;
00125      0  0                     assist      : boolean;
00126      0  0                     menu        : boolean;
00127      0  0                     keypress    : boolean;
00128      0  0                     nopresswait : real;
00129      0  0                     resolution  : integer;
00130      0  0                     dotsize     : integer;
00131      0  0                     starsize    : integer;
00132      0  0                     ansi364     : boolean;
00133      0  0                     drawblack   : boolean;
00134      0  0                     ch          : ch_type;
00135      0  0                     END
00136      0  0                   := ('',true,true,false,true,true,
00137      0  0                       2.0,64,64,320,false,false,(0,0,0,0));
00138   C  0  0 {=============================================================================}
00139   C  0  0 {-- TERMINAL CONFIGURATION DEFINITIONS ---------------------------------------}
00140   C  0  0 {=============================================================================}
00141      0  0 TYPE
00142      0  0    devname_type   = VARYING [8] OF char;
00143      0  0    configcontrol_type = (CON,QUE,REP);
00144      0  0 VAR
00145      0  0    terminal       : [ GLOBAL ] RECORD
00146      0  0                     iounit      : PACKED ARRAY [1..6] OF char;
00147      0  0                     id          : integer;
00148      0  0                     name        : devname_type;
00149      0  0                     hardname    : devname_type;
00150      0  0                     END
00151      0  0                   := ('      ',2,'DUMB    ','LOCAL   ');
00152   C  0  0 {=============================================================================}
00153   C  0  0 {-- PLOT MEMORY CONFIGURATION DEFINITIONS ------------------------------------}
00154   C  0  0 {=============================================================================}
00155      0  0 TYPE
00156      0  0    plotitem_type  = RECORD
00157      0  0                     ins   : ins_type;
00158      0  0                     ix    : shortunsigned;
00159      0  0                     iy    : shortunsigned;
00160      0  0                     st    : VARYING [200] OF char;
00161      0  0                     END;
00162      0  0 VAR
00163      0  0    plotitem       : plotitem_type;
00164      0  0    plotitemfile   : text;
00165   C  0  0 {-----------------------------------------------------------------------------}

FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

-LINE-IDC-PL-SL-

00166      1  0 PROCEDURE readplotitem;
00167      1  0 VAR
00168      1  0    plotdata       : RECORD
00169      1  0                     CASE integer OF
00170      1  0                        1:  (data     : anystring);
00171      1  0                        2:  (ii       : shortunsigned;
00172      1  0                             ins      : ins_type;
00173      1  0                             ix       : shortunsigned;
00174      1  0                             iy       : shortunsigned);
00175      1  0                     END;
00176      1  1 BEGIN
00177      1  1 readln (plotitemfile,plotdata.data);
00178      1  1 plotitem.ins := plotdata.ins;
00179      1  1 plotitem.ix  := plotdata.ix;
00180      1  1 plotitem.iy  := plotdata.iy;
00181      1  1 IF plotitem.ins IN [I_col,I_pan,I_pri] 
00182      1  1  THEN plotitem.st := substr (plotdata.data,6,length (plotdata.data)-5)
00183      1  1  ELSE plotitem.st := '';
00184      0  0 END;
00185   C  0  0 {-----------------------------------------------------------------------------}
00186      1  0 PROCEDURE writeplotitem;
00187      1  0 VAR
00188      1  0    plotdata       : RECORD
00189      1  0                     CASE integer OF
00190      1  0                        1:  (data     : anystring);
00191      1  0                        2:  (ii       : shortunsigned;
00192      1  0                             ins      : ins_type;
00193      1  0                             ix       : shortunsigned;
00194      1  0                             iy       : shortunsigned);
00195      1  0                     END;
00196      1  1 BEGIN
00197      1  1 plotdata.ins := plotitem.ins;
00198      1  1 plotdata.ix  := plotitem.ix;
00199      1  1 plotdata.iy  := plotitem.iy;
00200      1  1 plotdata.data.length := 5;
00201      1  1 IF plotdata.ins IN [I_col,I_pan,I_pri] 
00202      1  1  THEN plotdata.data := plotdata.data + plotitem.st;
00203      1  1 writeln (plotitemfile,plotdata.data);
00204      0  0 END;
00205   C  0  0 {=============================================================================}
00206   C  0  0 {-- MENU CONFIGURATION DEFINITIONS -------------------------------------------}
00207   C  0  0 {=============================================================================}
00208      0  0 CONST
00209      0  0    MENULIM        = 150;
00210      0  0 TYPE
00211      0  0    menuitem_type  = RECORD
00212      0  0                     s             : integer;
00213      0  0                     r             : integer;
00214      0  0                     c             : integer;
00215      0  0                     ch            : char;
00216      0  0                     it            : command_type;
00217      0  0                     END;
00218      0  0 VAR
00219      0  0    menu           : RECORD
00220      0  0                     name          : VARYING [80] OF char;

FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

-LINE-IDC-PL-SL-

00221      0  0                     active        : boolean;
00222      0  0                     screens       : integer;
00223      0  0                     lettered      : boolean;
00224      0  0                     count         : integer;
00225      0  0                     pos           : integer;
00226      0  0                     scr           : integer;
00227      0  0                     data          : ARRAY [1..MENULIM] OF menuitem_type;
00228      0  0                     END;
00229   C  0  0 {=============================================================================}
00230   C  0  0 {-- MACRO CONFIGURATION DEFINITIONS ------------------------------------------}
00231   C  0  0 {=============================================================================}
00232      0  0 CONST
00233      0  0    MACROMIN       = 'A';
00234      0  0    MACROMAX       = 'Z';
00235      0  0 VAR
00236      0  0    macro          : ARRAY [MACROMIN..MACROMAX] OF command_type
00237      0  0                   := (ord(MACROMAX) - ord(MACROMIN) + 1 OF '');
00238   C  0  0 {=============================================================================}
00239      0  0 END.

FIG                                                             23-Dec-1988 09:54:45    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 15:05:39    DUA1:[QPLOT.QPLOT.SOURCE]FIG.PAS;220 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                 505  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                               7660  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
LIB$INITIALIZE                          4  NOVEC,NOWRT,  RD,NOEXE,NOSHR,  GBL,  REL,  CON,NOPIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        39        31



HANDLER                                                         23-Dec-1988 10:19:24    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  29-Mar-1988 11:01:28    [QPLOT.QPLOT.SOURCE]HANDLER.PAS;53 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('SYS$LIBRARY:STARLET',
00003      0  0                'QLIBHOME:STARLETQ',
00004      0  0                'QLIBHOME:STANDARD',
00005      0  0                'QLIBHOME:GENERAL',
00006      0  0                'QLIBHOME:IO',
00007      0  0                'QLIBHOME:STRING',
00008      0  0                'QLIBHOME:TERM_VAX'),
00009      0  0   ENVIRONMENT ('QLIBHOME:HANDLER')]
00010      0  0 MODULE handler;
00011      0  0 [ HIDDEN ] TYPE
00012      0  0    ivector            = ARRAY [0..15] OF integer;    { Error handler lists }
00013      0  0 [ HIDDEN ] VAR
00014      0  0    sigargs            : [ VOLATILE ] ivector;
00015      0  0    mechargs           : [ VOLATILE ] ivector;
00016   C  0  0 {=============================================================================}
00017   C  0  0 {-- ERROR HANDLING PROCEDURES ------------------------------------------------}
00018   C  0  0 {=============================================================================}
00019      1  0 [ GLOBAL, ASYNCHRONOUS ] FUNCTION handler (VAR sa,ma : ivector) : integer;
00020      1  1 BEGIN
00021      1  1 sigargs  := sa;
00022      1  1 mechargs := ma;
00023      1  2 CASE sigargs[1] OF
00024      1  2    %X00219F5C:  handler := 1;      { PASCAL dispose error }
00025      1  3    OTHERWISE    BEGIN
00026      1  3                 IF err = '' THEN err := 'HOST/PASCAL system error';
00027      1  3                 $unwind (mechargs[2],);
00028      1  3                 handler := %X00000918;  { SS$_RESIGNAL }
00029      1  2                 END;
00030      1  1    END;
00031      0  0 END;
00032   C  0  0 {-----------------------------------------------------------------------------}
00033      0  0 [ GLOBAL ]
00034      1  0 PROCEDURE resignal;
00035      1  1 BEGIN
00036      1  1 LIB$SIGNAL (sigargs[1]);
00037      0  0 END;
00038   C  0  0 {-----------------------------------------------------------------------------}
00039      0  0 [ GLOBAL ]
00040      1  0 PROCEDURE setctrlc;
00041      1  1 BEGIN
00042      1  1 qiowctrlc;
00043      0  0 END;
00044   C  0  0 {-----------------------------------------------------------------------------}
00045      0  0 [ GLOBAL ]
00046      1  0 PROCEDURE writeerror;
00047      1  0 VAR
00048      1  0    i : integer;
00049   C  1  0 {---------------------------------}
00050      2  0 PROCEDURE wrm (str : VARYING [l1] OF char);
00051      2  1 BEGIN  
00052      2  1 writeline (both,str);  
00053      1  0 END;
00054   C  1  0 {---------------------------------}
00055      1  1 BEGIN

HANDLER                                                         23-Dec-1988 10:19:24    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  29-Mar-1988 11:01:28    [QPLOT.QPLOT.SOURCE]HANDLER.PAS;53 (1)

-LINE-IDC-PL-SL-

00056      1  1 writeline (out,chr(7));
00057      1  1 wrm ('QPLOT error handler report');
00058      1  1 wrm (err);
00059      1  1 IF      sigargs[1] =       1164 THEN wrm ('Floating overflow')
00060      1  1 ELSE IF sigargs[1] =       1204 THEN wrm ('Floating overflow')
00061      1  1 ELSE IF sigargs[1] =       1180 THEN wrm ('Floating underflow')
00062      1  1 ELSE IF sigargs[1] =       1220 THEN wrm ('Floating underflow')
00063      1  1 ELSE IF sigargs[1] =       1172 THEN wrm ('Floating divide')
00064      1  1 ELSE IF sigargs[1] =       1212 THEN wrm ('Floating divide')
00065      1  1 ELSE IF sigargs[1] =       1148 THEN wrm ('Integer overflow')
00066      1  1 ELSE IF sigargs[1] =       1156 THEN wrm ('Integer divide')
00067      1  1 
00068      1  1 ELSE IF sigargs[1] = %X0016828C THEN wrm ('Invalid argument')
00069      1  1 ELSE IF sigargs[1] = %X0016829C THEN wrm ('Logarithm of zero or negative')
00070      1  1 ELSE IF sigargs[1] = %X001682A4 THEN wrm ('Square root of negative value')
00071      1  1 ELSE IF sigargs[1] = %X001682C4 THEN wrm ('Floating overflow')
00072      1  1 ELSE IF sigargs[1] = %X0021BEEC THEN wrm ('Access past end of string')
00073      1  1 ELSE IF sigargs[1] = %X0021BECC THEN wrm ('String length error')
00074      1  1 ELSE IF sigargs[1] = %X0021BE84 THEN wrm ('Array index value out of range')
00075      1  1 ELSE IF sigargs[1] = %X0076109A THEN wrm ('Unable to find HELP library')
00076      1  1 ELSE IF sigargs[1] = %X0085109C THEN wrm ('Unable to open file to edit')
00077      1  1 ELSE IF sigargs[1] =       8364 THEN wrm ('CPU time expired')
00078      1  1 ELSE IF sigargs[1] =       8372 THEN wrm ('Operator abort')
00079      1  1 ELSE IF sigargs[1] =         44 THEN wrm ('Aborted')
00080      1  1 ELSE IF sigargs[1] =         28 THEN wrm ('Exceeded Quota')
00081      1  1 
00082      1  1 ELSE IF sigargs[1] = QPL_ABORT  THEN wrm ('User abort')
00083      1  1 ELSE IF sigargs[1] = QPL_ERROR  THEN 
00084      1  2 ELSE IF sigargs[1] = QPL_CTRLC  THEN BEGIN wrm('CTRL-C abort'); qiowctrlc; END
00085      1  1  ELSE 
00086      1  2   BEGIN
00087      1  2   err := 'FATAL ERROR';
00088      1  2   wrm ('Unable to handle condition');
00089      1  2   wrm ('Error array listing:');
00090      1  2   FOR i := 0 TO sigargs[0] DO
00091      1  2      wrm ('Sigargs [' + strofi(i,1) + ']=' + hex(sigargs[i],10,8));
00092      1  2   FOR i := 0 TO mechargs[0] DO
00093      1  2      wrm ('Mechargs[' + strofi(i,1) + ']=' + hex(mechargs[i],10,8));
00094      1  1   END;
00095      1  1 IF err <> 'FATAL ERROR' THEN wrm ('Return to command level');
00096      1  1 FOR i := 1 TO 3 DO BEGIN  writestring (out,chr(7));  wait (0.1);  END;
00097      1  1 pause;
00098      0  0 END;
00099   C  0  0 {=============================================================================}
00100      0  0 END.

HANDLER                                                         23-Dec-1988 10:19:24    VAX Pascal V3.7-254                Page    3
QPLOT                           Pascal Compilation Statistics   29-Mar-1988 11:01:28    [QPLOT.QPLOT.SOURCE]HANDLER.PAS;53 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3235  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                128  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

SYS$SYSROOT:[SYSLIB]STARLET.PEN;5                      20386         6         0
DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         2         1
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        31        25
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         2        10
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        21        10
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101         1         1



IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:GENERAL',
00006      0  0                'QLIBHOME:STRING',
00007      0  0                'QLIBHOME:FIG',
00008      0  0                'QLIBHOME:TERM_VAX',
00009      0  0                'QLIBHOME:TERMIO'),
00010      0  0   ENVIRONMENT ('QLIBHOME:IOBASE') ]
00011      0  0 MODULE iobase (audit,sf1,sf2,sf3,sf4,sf5);
00012      0  0 VAR
00013      0  0    audit              : text;
00014      0  0    auditopen          : boolean := false;
00015      0  0    auditfilename      : VARYING [30] OF char := '';
00016      0  0 
00017      0  0    source             : 0..5 := 0;
00018      0  0    sf1,sf2,sf3,sf4,sf5: text;
00019      0  0    sourcesymbol       : ARRAY [1..5,1..9] OF VARYING [20] OF char;
00020      0  0 
00021      0  0 VAR
00022      0  0    journalfile        : text;
00023      0  0 [ HIDDEN ] VAR
00024      0  0    journalopen        : anystring := '';
00025      0  0    journalstring      : anystring := '';
00026   C  0  0 {=============================================================================}
00027   C  0  0 {-- TERMINAL IDENTIFICATION PROCEDURES ---------------------------------------}
00028   C  0  0 {=============================================================================}
00029      0  0 [ GLOBAL ]
00030      1  0 PROCEDURE opensourcefile (string,ext : anystring);
00031   C  1  0 { Purpose -- Open sourcefile for read using filename "string". }
00032      1  0 VAR
00033      1  0    opened     : boolean;
00034      1  0    s,filename : anystring;
00035      1  0    i          : integer;
00036      1  0    p          : parse_type;
00037   C  1  0 {------------------------------}
00038      2  0 PROCEDURE opens (filename : anystring);
00039      2  1 BEGIN
00040      2  2 CASE source OF
00041      2  2    1:  open (sf1,filename,READONLY);
00042      2  2    2:  open (sf2,filename,READONLY);
00043      2  2    3:  open (sf3,filename,READONLY);
00044      2  2    4:  open (sf4,filename,READONLY);
00045      2  2    5:  open (sf5,filename,READONLY);
00046      2  1    END;
00047      2  2 CASE source OF
00048      2  2    1:  reset (sf1);
00049      2  2    2:  reset (sf2);
00050      2  2    3:  reset (sf3);
00051      2  2    4:  reset (sf4);
00052      2  2    5:  reset (sf5);
00053      2  1    END;
00054      1  0 END;
00055   C  1  0 {------------------------------}

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00056      1  1 BEGIN
00057      1  1 IF source = 5 THEN raise ('Maximum nexting of source files is 5');
00058      1  1 source := source + 1;
00059      1  1 FOR i := 1 TO 9 DO sourcesymbol[source,i] := '';
00060      1  1 i := 0;
00061      1  1 startparse (p,string);
00062      1  1 filename := '';
00063      1  2 REPEAT
00064      1  2    s := parse (p,' ');
00065      1  2    IF s <> ''
00066      1  2     THEN
00067      1  3      BEGIN
00068      1  3      i := i + 1;
00069      1  3      IF i = 1
00070      1  3       THEN filename := s
00071      1  3      ELSE IF i <= 11
00072      1  3       THEN sourcesymbol[source,i-1] := s;
00073      1  2      END;
00074      1  1    UNTIL s = '';
00075      1  1 IF index (filename,'.') = 0 
00076      1  1  THEN filename := filename + ext
00077      1  1  ELSE filename := filename;
00078      1  1 
00079      1  1 IF exist (filename)
00080      1  1  THEN opens (filename)
00081      1  1 ELSE IF exist ('[-]' + filename)
00082      1  1  THEN opens ('[-]' + filename)
00083      1  1 ELSE IF exist ('[--]' + filename)
00084      1  1  THEN opens ('[--]' + filename)
00085      1  1 ELSE IF exist ('[---]' + filename)
00086      1  1  THEN opens ('[---]' + filename)
00087      1  1 ELSE IF exist ('[----]' + filename)
00088      1  1  THEN opens ('[----]' + filename)
00089      1  1 ELSE IF exist ('[-----]' + filename)
00090      1  1  THEN opens ('[-----]' + filename)
00091      1  1 ELSE IF exist ('[------]' + filename)
00092      1  1  THEN opens ('[------]' + filename)
00093      1  1 ELSE IF exist ('[-------]' + filename)
00094      1  1  THEN opens ('[-------]' + filename)
00095      1  1 ELSE IF exist ('[--------]' + filename)
00096      1  1  THEN opens ('[--------]' + filename)
00097      1  1  ELSE 
00098      1  2   BEGIN
00099      1  2   writeline (out,'Unable to find sourcefile "' + filename + '"');
00100      1  2   source := source - 1;
00101      1  1   END;
00102      0  0 END;
00103   C  0  0 {-----------------------------------------------------------------------------}
00104      0  0 [ GLOBAL ]
00105      1  0 PROCEDURE setterminal (com : command_type);
00106      1  0 TYPE
00107      1  0    short_integer = [WORD] -32768..32767;
00108      1  0 VAR
00109      1  0    i,j           : integer;
00110      1  0    numok,perfect : integer;

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00111      1  0    hold          : devname_type;
00112      1  0    line          : VARYING [80] OF char;
00113      1  0    log           : PACKED ARRAY [1..7] OF char;
00114      1  0    rsl           : PACKED ARRAY [1..80] OF char;
00115      1  0    len           : short_integer;
00116      1  1 BEGIN
00117      1  1 hold                 := 'UNKNOWN ';
00118      1  1 terminal.id          := 0;
00119      1  1 terminal.name        := strfix (com,8);
00120      1  1 terminal.hardname    := 'LOCAL   ';
00121      1  2 WITH terminal DO REPEAT
00122      1  2    IF name = 'AUTO    '
00123      1  2     THEN
00124      1  3      BEGIN
00125      1  3      name := 'UNKNOWN ';
00126      1  3      open (textfile,'QPLOTHOME:TERMINAL.MAP',READONLY,ERROR:=CONTINUE);
00127      1  3      IF status (textfile) = 0
00128      1  3       THEN
00129      1  4        BEGIN
00130      1  4        reset (textfile);
00131      1  4        WHILE NOT eof (textfile) DO
00132      1  5           BEGIN
00133      1  5           readln (textfile,line);
00134      1  5           line := strfix (line,80);       
00135      1  5           IF line[1] = ';'
00136      1  5            THEN
00137      1  5           ELSE IF substr(line,1,6) = iounit
00138      1  5            THEN 
00139      1  6             BEGIN
00140      1  6             name        := substr (line,8,8);
00141      1  6             hardname    := substr (line,17,8);
00142      1  6             opensourcefile ('QPLOTHOME:' 
00143      1  6                                  + striptrail (substr (line,26,18)),'.SOU');
00144      1  5             END;
00145      1  4           END;
00146      1  4        close (textfile);
00147      1  3        END;
00148      1  2      END;
00149      1  2    IF name = 'UNKNOWN '
00150      1  2     THEN
00151      1  3      BEGIN
00152      1  3      log := 'UNKNOWN';
00153      1  3      IF SYS$trnlog (log,len,rsl,,) = 1
00154      1  3       THEN name := strtrunc (substr (rsl,1,len),8);
00155      1  2      END;
00156      1  2    IF name = 'QUERY_VT'
00157      1  2     THEN
00158      1  3      BEGIN
00159      1  3      line := pad ('',' ',40);
00160      1  3      qiowreadprompttimednoechopurge (ESC + '[c',line,80);
00161      1  3      IF      substr (line,4,2) = '1;'       THEN name := 'VT100   '
00162      1  3      ELSE IF substr (line,4,2) = '6c'       THEN name := 'VT102   '
00163      1  3      ELSE IF substr (line,4,8) = '12;5;0;1' THEN name := 'VT125   '
00164      1  3      ELSE IF substr (line,4,8) = '12;7;1;1' THEN name := 'VT125   '
00165      1  3      ELSE IF substr (line,4,8) = '62;1;2;6' THEN name := 'VT220   '

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00166      1  3      ELSE IF substr (line,4,8) = '62;1;2;3' THEN name := 'VT240   '
00167      1  3      ELSE 
00168      1  4        BEGIN
00169      1  4        name := 'UNKNOWN ';
00170      1  4        writeline (out,'RESPONSE = "' + substr (line,4,8) + '"');
00171      1  4        wait (5);
00172      1  3        END;
00173      1  2      END;
00174      1  2    IF name = 'UNKNOWN '
00175      1  2     THEN
00176      1  3      BEGIN
00177      1  3      id := DUMBID;
00178      1  3      readvary ('ENTER TERMINAL TYPE : ',line,'');
00179      1  3      name := strtrunc (line,8);
00180      1  3      id := 0;
00181      1  2      END;
00182      1  2    numok := 0;
00183      1  2    perfect := 0;
00184      1  2    FOR i := 1 TO TERMIDLIM DO
00185      1  2       FOR j := 1 TO length(termname(i,0)) DO
00186      1  2          IF termname(i,j) <> ''
00187      1  2           THEN
00188      1  3            BEGIN
00189      1  3            IF strfix (name,8) = termname(i,j)
00190      1  3             THEN perfect := i;
00191      1  3            IF (index(termname(i,j),name) = 1) AND (name <> '') 
00192      1  3             THEN BEGIN hold := termname(i,j);  id := i;  numok := numok+1;  END;
00193      1  2            END;
00194      1  2    IF numok <> 1 THEN id := 0;
00195      1  2    IF perfect <> 0 THEN id := perfect;
00196      1  2    IF id <> 0 
00197      1  2     THEN name := hold
00198      1  2    ELSE IF index (name,'AUTO') = 1 
00199      1  2     THEN name := 'AUTO    '
00200      1  2     ELSE 
00201      1  3      BEGIN
00202      1  3      id := DUMBID;
00203      1  3      name := 'UNKNOWN ';
00204      1  3      writeline (out,'Terminal type not found, valid types are: ');
00205      1  3      line := ' AUTO    ';
00206      1  3      FOR i := 1 TO TERMIDLIM DO
00207      1  3         FOR j := 1 TO length(termname(i,0)) DO
00208      1  3            IF termname(i,j) <> '' 
00209      1  3             THEN 
00210      1  4              BEGIN
00211      1  4              line := line + ' ' + termname(i,j);
00212      1  4              IF length(line) > 70 
00213      1  4               THEN BEGIN  writeline (out,line);  line := '';  END;
00214      1  3              END;
00215      1  3      IF line <> '' THEN writeline (out,line);  
00216      1  3      id := 0;
00217      1  2      END;
00218      1  1    UNTIL id <> 0;
00219      1  1 termconfig (CON);
00220      1  1 screenerase (true);

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00221      0  0 END;
00222   C  0  0 {=============================================================================}
00223   C  0  0 {-- AUDIT FILE PROCEDURES ----------------------------------------------------}
00224   C  0  0 {=============================================================================}
00225      0  0 [ GLOBAL ]
00226      1  0 PROCEDURE openaudit (string : anystring);
00227   C  1  0 { Purpose -- Open audit file for write }
00228      1  1 BEGIN
00229      1  1 auditfilename := string;
00230      1  1 open (audit,string,new);
00231      1  1 rewrite (audit);
00232      1  1 auditopen := true;
00233      0  0 END;
00234   C  0  0 {-----------------------------------------------------------------------------}
00235      0  0 [ GLOBAL ]
00236      1  0 PROCEDURE reopenaudit;
00237   C  1  0 { Purpose -- Reopen audit file for write }
00238      1  0 VAR
00239      1  0    line : VARYING [80] OF char;
00240      1  1 BEGIN
00241      1  1 open (audit,auditfilename,old);
00242      1  1 reset (audit);
00243      1  1 WHILE NOT eof (audit) DO readln (audit,line);
00244      1  1 truncate (audit);
00245      1  1 auditopen := true;
00246      0  0 END;
00247   C  0  0 {-----------------------------------------------------------------------------}
00248      0  0 [ GLOBAL ]
00249      1  0 PROCEDURE closeaudit (disp : anystring);
00250   C  1  0 { Purpose -- Close audit file and dispose as indicated }
00251      1  1 BEGIN
00252      1  1 IF      index(disp,'SAVE') = 1         
00253      1  1  THEN close (audit,SAVE,ERROR:=CONTINUE)
00254      1  1 ELSE IF index(disp,'PRINT') = 1        
00255      1  1  THEN close (audit,PRINT,ERROR:=CONTINUE)
00256      1  1 ELSE IF index(disp,'DELETE') = 1       
00257      1  1  THEN close (audit,DELETE,ERROR:=CONTINUE)
00258      1  1 ELSE IF index(disp,'PRINT_DELETE') = 1 
00259      1  1  THEN close (audit,PRINT_DELETE,ERROR:=CONTINUE)
00260      1  1  ELSE close (audit,ERROR:=CONTINUE);
00261      1  1 auditopen := false;
00262      0  0 END;
00263   C  0  0 {=============================================================================}
00264   C  0  0 {-- TEXT INPUT PROCEDURES ----------------------------------------------------}
00265   C  0  0 {=============================================================================}
00266      0  0 [ GLOBAL ]
00267      1  0 PROCEDURE readline (VAR filein : text;  VAR outstr : VARYING [l2] OF char);
00268      1  0 VAR
00269      1  0    i     : integer;
00270      1  0    ch500 : VARYING [500] OF char;
00271      1  1 BEGIN
00272      1  1 readln (filein,ch500);
00273      1  1 outstr := '';
00274      1  1 FOR i := 1 TO l2 DO 
00275      1  1    IF (i <= length(ch500)) THEN outstr := outstr + ch500[i];

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00276      0  0 END;
00277   C  0  0 {-----------------------------------------------------------------------------}
00278      0  0 [ GLOBAL ] 
00279      1  0 PROCEDURE openjournal;
00280      1  1 BEGIN
00281      1  1 open (journalfile,'JOURNAL.SOU',NEW,ERROR:=CONTINUE);
00282      1  1 rewrite (journalfile,ERROR:=CONTINUE);
00283      0  0 END;
00284   C  0  0 {-----------------------------------------------------------------------------}
00285      0  0 [ GLOBAL ] 
00286      1  0 PROCEDURE deletejournal;
00287      1  1 BEGIN
00288      1  1 close (journalfile,DISPOSITION:=DELETE,ERROR:=CONTINUE);
00289      0  0 END;
00290   C  0  0 {-----------------------------------------------------------------------------}
00291      0  0 [ GLOBAL ] 
00292      1  0 PROCEDURE closejournal (st : anystring);
00293      1  1 BEGIN
00294      1  1 close (journalfile,DISPOSITION:=SAVE,ERROR:=CONTINUE);
00295      1  1 rename_file ('JOURNAL.SOU',st);
00296      0  0 END;
00297   C  0  0 {-----------------------------------------------------------------------------}
00298      0  0 [ HIDDEN ]
00299      1  0 PROCEDURE writejournal (VAR str : anystring);
00300      1  0 VAR
00301      1  0    i : integer;
00302      1  1 BEGIN
00303      1  1 FOR i := 1 TO length (str) DO
00304      1  1    IF NOT (str[i] IN [' '..'~'])
00305      1  1     THEN str[i] := '~';
00306      1  1 writeln (journalfile,str,ERROR:=CONTINUE);
00307      0  0 END;
00308   C  0  0 {-----------------------------------------------------------------------------}
00309      0  0 [ GLOBAL ]
00310      1  0 PROCEDURE writejournalstring (str : anystring);
00311      1  1 BEGIN
00312      1  1 journalstring := journalstring + str + ' ';
00313      0  0 END;
00314   C  0  0 {-----------------------------------------------------------------------------}
00315      0  0 [ GLOBAL ]
00316      1  0 PROCEDURE writeendofjournalline;
00317      1  1 BEGIN
00318      1  1 IF journalstring <> ''
00319      1  1  THEN
00320      1  2   BEGIN
00321      1  2   writejournal (journalstring);
00322      1  2   journalstring := '';
00323      1  1   END;
00324      0  0 END;
00325   C  0  0 {-----------------------------------------------------------------------------}
00326      0  0 [ GLOBAL ]
00327      1  0 PROCEDURE writejournalline (str : anystring);
00328      1  1 BEGIN
00329      1  1 IF journalstring <> '' THEN writejournal (journalstring);
00330      1  1 journalstring := '';

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                  22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

-LINE-IDC-PL-SL-

00331      1  1 writejournal (str);
00332      0  0 END;
00333   C  0  0 {=============================================================================}
00334      0  0 END.

IOBASE                                                          23-Dec-1988 10:21:18    VAX Pascal V3.7-254                Page    8
QPLOT                           Pascal Compilation Statistics   22-Dec-1987 16:13:36    DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PAS;72 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                7662  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                               1685  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        16         6
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        39        31
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        31        15
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         9        45
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        30        42
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        21        10
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        19        19
DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PEN;1                     98        14        14



UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:GENERAL',
00006      0  0                'QLIBHOME:DIRECTORY',
00007      0  0                'QLIBHOME:STRING',
00008      0  0                'QLIBHOME:COLOR',
00009      0  0                'QLIBHOME:FIG',
00010      0  0                'QLIBHOME:TERM_VAX',
00011      0  0                'QLIBHOME:TERMIO',
00012      0  0                'QLIBHOME:HARDIO',
00013      0  0                'QLIBHOME:IOBASE'),
00014      0  0   ENVIRONMENT ('QLIBHOME:UTILITIES')]
00015      0  0 MODULE utilities;
00016   C  0  0 {=============================================================================}
00017   C  0  0 {-- LIST AND SET ROUTINES ----------------------------------------------------}
00018   C  0  0 {=============================================================================}
00019      0  0 [ GLOBAL ]
00020      1  0 PROCEDURE setflag (VAR flag : boolean;  flagname, arg : anystring);
00021      1  0 VAR
00022      1  0    ch : char;
00023   C  1  0 {------------------------------}
00024      2  0 PROCEDURE listflag;
00025      2  1 BEGIN
00026      2  1 IF flag 
00027      2  1  THEN writeline (both,'The ' + flagname + '     flag is     on') 
00028      2  1  ELSE writeline (both,'The ' + flagname + '     flag is    off');
00029      1  0 END;
00030   C  1  0 {------------------------------}
00031      1  1 BEGIN
00032      1  1 IF arg  = '' THEN listflag;
00033      1  1 IF arg <> NUL
00034      1  1  THEN
00035      1  2   BEGIN
00036      1  2   unread (arg);
00037      1  2   readboo ('ENTER FLAG VALUE (ON or OFF) : ',flag,flag);
00038      1  1   END;
00039      1  1 listflag;
00040      0  0 END;
00041   C  0  0 {-----------------------------------------------------------------------------}
00042      0  0 [ GLOBAL ]
00043      1  0 PROCEDURE setint (VAR num : integer;  numname, arg : anystring;
00044      1  0    min,max : integer);
00045   C  1  0 {------------------------------}
00046      2  0 PROCEDURE listint;
00047      2  1 BEGIN
00048      2  1 writeline (both,'The value of ' + numname + ' is ' + strofi(num,6));
00049      1  0 END;
00050   C  1  0 {------------------------------}
00051      1  1 BEGIN
00052      1  1 IF arg = ''  THEN listint;
00053      1  1 IF arg <> NUL
00054      1  1  THEN
00055      1  2   BEGIN

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00056      1  2   unread (arg);
00057      1  2   readint ('ENTER ' + numname + ' VALUE : ',num,min,max,num);
00058      1  1   END;
00059      1  1 listint;
00060      0  0 END;
00061   C  0  0 {-----------------------------------------------------------------------------}
00062      0  0 [ GLOBAL ]
00063      1  0 PROCEDURE setreal (VAR num : real;  numname, arg : anystring;  min,max : real);
00064   C  1  0 {------------------------------}
00065      2  0 PROCEDURE listreal;
00066      2  1 BEGIN
00067      2  1 writeline (both,'The value of ' + numname + ' is ' + strofr(num,0));
00068      1  0 END;
00069   C  1  0 {------------------------------}
00070      1  1 BEGIN
00071      1  1 IF arg = ''  THEN listreal;
00072      1  1 IF arg <> NUL
00073      1  1  THEN
00074      1  2   BEGIN
00075      1  2   unread (arg);
00076      1  2   readreal ('ENTER ' + numname + ' VALUE : ',num,min,max,num);
00077      1  1   END;
00078      1  1 listreal;
00079      0  0 END;
00080   C  0  0 {-----------------------------------------------------------------------------}
00081      0  0 [ GLOBAL ]
00082      1  0 PROCEDURE setvary (VAR st : VARYING [l] OF char;  stname,arg : anystring);
00083   C  1  0 {------------------------------}
00084      2  0 PROCEDURE listvary;
00085      2  1 BEGIN
00086      2  1 writeline (both,'The value of ' + stname + ' is "' + st + '"');
00087      1  0 END;
00088   C  1  0 {------------------------------}
00089      1  1 BEGIN
00090      1  1 IF arg = ''  THEN listvary;
00091      1  1 IF arg <> NUL
00092      1  1  THEN
00093      1  2   BEGIN
00094      1  2   unread (arg);
00095      1  2   readvary ('ENTER ' + stname + ' STRING : ',st,st);
00096      1  1   END;
00097      1  1 listvary;
00098      0  0 END;
00099   C  0  0 {-----------------------------------------------------------------------------}
00100      0  0 [ HIDDEN ]
00101      1  0 PROCEDURE setpath (arg : anystring);
00102      1  0 VAR
00103      1  0    st : anystring;
00104   C  1  0 {------------------------------}
00105      2  0 PROCEDURE listpath;
00106      2  1 BEGIN
00107      2  1 getdirectory (st);
00108      2  1 writeline (both,'The value of PATH is "' + st + '"');
00109      1  0 END;
00110   C  1  0 {------------------------------}

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00111      1  1 BEGIN
00112      1  1 IF arg = ''  THEN listpath;
00113      1  1 IF arg <> NUL
00114      1  1  THEN
00115      1  2   BEGIN
00116      1  2   unread (arg);
00117      1  2   getdirectory (st);
00118      1  2   readvary ('ENTER PATH : ',st,st);
00119      1  2   setdirectory (st);
00120      1  1   END;
00121      1  1 listpath;
00122      0  0 END;
00123   C  0  0 {-----------------------------------------------------------------------------}
00124      0  0 [ HIDDEN ]
00125      1  0 PROCEDURE setmacro (arg : VARYING [len] OF CHAR);
00126      1  0 VAR
00127      1  0    ch   : char;
00128      1  0    modi : command_type;
00129      1  0    s    : anystring;
00130   C  1  0 {------------------------------}
00131      2  0 PROCEDURE listmacro;
00132      2  1 BEGIN
00133      2  1 writeline (both,'Currently defined macros:');
00134      2  1 writeline (both,'--------------------------');
00135      2  1 FOR ch := MACROMIN TO MACROMAX DO
00136      2  1    IF macro[ch] <> ''
00137      2  1     THEN writeline (both,ch + '= "' + macro[ch] + '"');
00138      2  1 writeline (both,'--------------------------');
00139      1  0 END;
00140   C  1  0 {------------------------------}
00141      1  1 BEGIN
00142      1  1 IF arg = NUL
00143      1  1  THEN listmacro
00144      1  1  ELSE
00145      1  2   BEGIN
00146      1  2   unread (arg);
00147      1  2   startcommand ('MACRO',true);
00148      1  2   FOR ch := MACROMIN TO MACROMAX DO
00149      1  2      IF length (macro[ch]) <= 16
00150      1  2       THEN setcommand (ch + ' = ' + macro[ch])
00151      1  2       ELSE setcommand (ch + ' = ' + strtrunc (macro[ch],13) + '...');
00152      1  2   readcommand (modi,' ',false,'UTILITIES SET MACRO');
00153      1  2   ch := chofcom (modi);
00154      1  2   IF ch IN [MACROMIN..MACROMAX]
00155      1  2    THEN readvary ('ENTER MACRO STRING : ',macro[ch],'')
00156      1  2    ELSE BEGIN  listmacro;  pause;  END;
00157      1  1   END;
00158      0  0 END;
00159   C  0  0 {-----------------------------------------------------------------------------}
00160      0  0 [ HIDDEN ]
00161      1  0 PROCEDURE viewtermmap;
00162      1  0 VAR
00163      1  0    string : VARYING [80] OF char;
00164      1  1 BEGIN
00165      1  1 writeline (out,'MAP OF TERMINALS KNOWN TO QPLOT');

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00166      1  1 writeline (out,'IF YOUR TERMINAL IS NOT LISTED, SEE QPLOT MAINTENANCE');
00167      1  1 writeline (out,'');
00168      1  1 IF exist ('QPLOTHOME:TERMINAL.MAP')
00169      1  1  THEN 
00170      1  2   BEGIN
00171      1  2   open (textfile,'QPLOTHOME:TERMINAL.MAP',OLD);
00172      1  2   reset (textfile);
00173      1  2   WHILE NOT eof (textfile) DO
00174      1  3      BEGIN
00175      1  3      readln (textfile,string);
00176      1  3      writeline (out,string);
00177      1  2      END;
00178      1  2   close (textfile);  
00179      1  1   END;
00180      0  0 END;
00181   C  0  0 {-----------------------------------------------------------------------------}
00182      0  0 [ HIDDEN ]
00183      1  0 PROCEDURE viewsource;
00184      1  1 BEGIN
00185      1  1 IF source = 0
00186      1  1  THEN writeline (out,'The source is TERMINAL')
00187      1  1  ELSE writeline (out,'The source is COMMAND FILE of nesting ' 
00188      1  1                                                           + strofi(source,1));
00189      0  0 END;
00190   C  0  0 {=============================================================================}
00191   C  0  0 {-- IMPLEMENT QPLOT COMMANDS -------------------------------------------------}
00192   C  0  0 {=============================================================================}
00193      0  0 [ GLOBAL ]
00194      1  0 PROCEDURE qabort;
00195      1  1 BEGIN
00196      1  1 LIB$SIGNAL (QPL_ABORT);
00197      0  0 END;
00198   C  0  0 {-----------------------------------------------------------------------------}
00199      0  0 [ HIDDEN ]
00200      1  0 PROCEDURE qbug;
00201      1  0 VAR
00202      1  0    arg  : anystring;
00203      1  1 BEGIN
00204      1  1 readargument (arg);
00205      1  1 IF application.maintenanceperson <> ''
00206      1  1  THEN
00207      1  2   BEGIN
00208      1  2   editfile (application.name + '.BUG');
00209      1  2   IF exist (application.name + '.BUG')
00210      1  2    THEN
00211      1  3     BEGIN
00212      1  3     LIB$SPAWN ('MAIL /SUBJECT="Bug in ' + application.name + '" '
00213      1  3                 + application.name + '.BUG ' + application.maintenanceperson);
00214      1  3     delete_file (application.name + '.BUG;*');
00215      1  3     writeline (out,' ');
00216      1  2     END;
00217      1  2   END
00218      1  1  ELSE
00219      1  2   BEGIN
00220      1  2   writeline (out,'No debugger available for this application');

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00221      1  2   pause;
00222      1  1   END;
00223      0  0 END;
00224   C  0  0 {-----------------------------------------------------------------------------}
00225      0  0 [ HIDDEN ]
00226      1  0 PROCEDURE qcolor;
00227      1  0 VAR
00228      1  0    i        : integer;
00229      1  0    hlsa     : hlsa_type;
00230      1  0    c,equ    : color_type;
00231      1  0    modi,sel : command_type;
00232      1  0    arg      : anystring;
00233      1  1 BEGIN
00234      1  1 startcommand ('COLOR modifier',true);
00235      1  1 setcommand ('List');
00236      1  1 setcommand ('Set');
00237      1  1 readcommand (modi,'L',false,'UTILITIES COLOR');
00238      1  2 CASE chofcom(modi) OF
00239      1  3    'L':  BEGIN
00240      1  3          viewcolors;
00241      1  3          pause;
00242      1  2          END;
00243      1  3    'S':  BEGIN
00244      1  3          startgetcolor;
00245      1  3          startcommand ('COLOR selection',false);
00246      1  3          WHILE NOT endofgetcolor DO
00247      1  3             setcommand (getcolor);
00248      1  3          readcommand (sel,ESC,false,'UTILITIES COLOR SET');
00249      1  4          CASE chofcom(sel) OF
00250      1  4             ' ':  ;
00251      1  4             ESC:  ;
00252      1  4             OTHERWISE
00253      1  5                   BEGIN
00254      1  5                   c := sel;
00255      1  5                   writeline (out,'Current color of ' + c + ' is "'
00256      1  5                      + equofcolor (sel) + '"');
00257      1  5                   readvary ('ENTER COLOR DESIRED : ',equ,'');
00258      1  5                   hlsa := hlsaofcolor (equ);
00259      1  5                   IF (hlsa.attribute = 'F') OR (equ = '')
00260      1  5                    THEN writeline (out,'Color of ' + c + ' not changed')
00261      1  5                    ELSE 
00262      1  6                     BEGIN
00263      1  6                     addDEF (c,equ);
00264      1  6                     writeline (out,'New color of ' + c + ' is "'
00265      1  6                        + equofcolor (sel) + '"');
00266      1  5                     END;
00267      1  5                   pause;
00268      1  4                   END;
00269      1  3             END;
00270      1  2          END;
00271      1  2    ESC:  ;
00272      1  1    END;
00273      1  1 readargument (arg);
00274      0  0 END;
00275   C  0  0 {-----------------------------------------------------------------------------}

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00276      0  0 [ HIDDEN ]
00277      1  0 PROCEDURE qedit;
00278      1  0 VAR
00279      1  0    arg  : anystring;
00280      1  1 BEGIN
00281      1  1 readvary ('ENTER FILE NAME : ',arg,'');
00282      1  1 IF arg = '' 
00283      1  1  THEN 
00284      1  1 ELSE IF goodfilename (arg)
00285      1  1  THEN editfile (arg)
00286      1  1  ELSE
00287      1  2   BEGIN
00288      1  2   writeline (out,'Bad file name : "' + arg + '"');
00289      1  2   pause;
00290      1  1   END;
00291      0  0 END;
00292   C  0  0 {-----------------------------------------------------------------------------}
00293      0  0 [ GLOBAL ]
00294      1  0 PROCEDURE qfset;
00295      1  0 VAR
00296      1  0    f    : integer;
00297      1  0    modi : command_type;
00298      1  0    arg  : anystring;
00299   C  1  0 {------------------------------}
00300      2  0 PROCEDURE doqfset (modi : command_type;  arg : anystring);
00301      2  0 VAR
00302      2  0    i    : integer;
00303      2  0    name : anystring;
00304      2  1 BEGIN
00305      2  1 WITH frametemplate.data[f]^ DO 
00306      2  2    BEGIN
00307      2  2    name := strfix (title,20) + modi;
00308      2  3    CASE chofcom(modi) OF
00309      2  3       'A':  setint  (azipct,               name,arg,0,100);
00310      2  3       'B':  setvary (box,                  name,arg);
00311      2  3       'F':  setvary (fill,                 name,arg);
00312      2  3       'H':  setvary (heading,              name,arg);
00313      2  3       'M':  setint  (maxticks,             name,arg,2,100);
00314      2  3       'P':  setvary (pane,                 name,arg);
00315      2  3       'Q':  setflag (squarebox,            name,arg);
00316      2  3       'R':  setint  (radpct,               name,arg,0,100);
00317      2  3       'S':  setint  (subticksize,          name,arg,0,ticksize);
00318      2  3       'T':  setint  (ticksize,             name,arg,subticksize,4000);
00319      2  3       'W':  setvary (window,               name,arg);
00320      2  3       ESC:  ;
00321      2  3       OTHERWISE FOR i := 1 TO commandcount DO doqfset (commandcreate(i),NUL);
00322      2  2       END;
00323      2  1    END;
00324      1  0 END;
00325   C  1  0 {------------------------------}
00326      1  1 BEGIN
00327      1  1 startcommand ('FRAME SET modifier',true);
00328      1  1 setcommand ('Azimuth_Percent');
00329      1  1 setcommand ('Box_Color');
00330      1  1 setcommand ('Fill_Color');

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00331      1  1 setcommand ('Heading_Color');
00332      1  1 setcommand ('MaxTicks');
00333      1  1 setcommand ('Pane_Color');
00334      1  1 setcommand ('sQuarebox');
00335      1  1 setcommand ('Radial_Percent');
00336      1  1 setcommand ('SubTickSize');
00337      1  1 setcommand ('TickSize');
00338      1  1 setcommand ('Window_Color');
00339      1  1 readcommand (modi,NUL,false,'UTILITIES FRAME SET');
00340      1  1 
00341      1  1 IF modi[1] IN ['A'..'Z'] 
00342      1  1  THEN readvary ('ENTER VALUE FOR ALL FRAMES : ',arg,'')
00343      1  1  ELSE readargument (arg);
00344      1  1 
00345      1  1 FOR f := 1 TO frametemplate.count DO doqfset (modi,arg);
00346      1  1 IF modi <> ESC THEN pause;
00347      0  0 END;
00348   C  0  0 {-----------------------------------------------------------------------------}
00349      0  0 [ HIDDEN ]
00350      1  0 PROCEDURE qfxy (axis : char);
00351      1  0 VAR
00352      1  0    f    : integer;
00353      1  0    modi : command_type;
00354      1  0    arg  : anystring;
00355   C  1  0 {------------------------------}
00356      2  0 PROCEDURE doqfxy (modi : command_type;  arg : anystring;
00357      2  0    VAR x : frameaxis_type);
00358      2  0 VAR
00359      2  0    i    : integer;
00360      2  0    name : anystring;
00361      2  1 BEGIN
00362      2  1 WITH x DO 
00363      2  2    BEGIN
00364      2  2    name := strfix (frametemplate.data[f]^.title,20) + axis + ' AXIS ' + modi;
00365      2  3    CASE chofcom(modi) OF
00366      2  3       'B':  setvary (subtick,              name,arg);
00367      2  3       'G':  setvary (grid,                 name,arg);
00368      2  3       'L':  setvary (lable,                name,arg);
00369      2  3       'N':  setvary (number,               name,arg);
00370      2  3       'R':  setflag (round,                name,arg);
00371      2  3       'S':  setvary (subgrid,              name,arg);
00372      2  3       'T':  setvary (tick,                 name,arg);
00373      2  3       ESC:  ;
00374      2  3       OTHERWISE FOR i := 1 TO commandcount DO doqfxy (commandcreate(i),NUL,x);
00375      2  2       END;
00376      2  1    END;
00377      1  0 END;
00378   C  1  0 {------------------------------}
00379      1  1 BEGIN
00380      1  1 startcommand ('FRAME ' + axis + '_AXIS modifier',true);
00381      1  1 setcommand ('suBTick_Color');
00382      1  1 setcommand ('Grid_Color');
00383      1  1 setcommand ('Label_Color');
00384      1  1 setcommand ('Number_Color');
00385      1  1 setcommand ('Rounding');

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    8
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00386      1  1 setcommand ('SubGrid_Color');
00387      1  1 setcommand ('Tick_Color');
00388      1  1 readcommand (modi,NUL,false,'UTILITIES FRAME ' + axis + '_AXIS');
00389      1  1 
00390      1  1 IF modi[1] IN ['A'..'Z'] 
00391      1  1  THEN readvary ('ENTER VALUE FOR ALL FRAMES : ',arg,'')
00392      1  1  ELSE readargument (arg);
00393      1  1 
00394      1  1 FOR f := 1 TO frametemplate.count DO
00395      1  2    CASE axis OF
00396      1  2       'X':  doqfxy (modi,arg,frametemplate.data[f]^.x);
00397      1  2       'Y':  doqfxy (modi,arg,frametemplate.data[f]^.y);
00398      1  1       END;
00399      1  1 IF modi <> ESC THEN pause;
00400      0  0 END;
00401   C  0  0 {-----------------------------------------------------------------------------}
00402      0  0 [ GLOBAL ]
00403      1  0 PROCEDURE qframe;
00404      1  0 VAR
00405      1  0    com : command_type;
00406      1  0    arg : anystring;
00407      1  1 BEGIN
00408      1  1 startcommand ('FRAME',true);
00409      1  1 setcommand ('Set');
00410      1  1 setcommand ('X_Axis_Set');
00411      1  1 setcommand ('Y_Axis_Set');
00412      1  1 readcommand (com,ESC,false,'UTILITIES FRAME');
00413      1  2 CASE chofcom(com) OF
00414      1  2    'S':  qfset;
00415      1  2    'X':  qfxy ('X');
00416      1  2    'Y':  qfxy ('Y');
00417      1  2    ESC:  ;
00418      1  2    OTHERWISE 
00419      1  3          BEGIN
00420      1  3          writeline (out,'FRAME command not found');
00421      1  3          readargument (arg);
00422      1  2          END;
00423      1  1    END;
00424      0  0 END;
00425   C  0  0 {-----------------------------------------------------------------------------}
00426      0  0 [ GLOBAL ]
00427      1  0 PROCEDURE qgeneralhelp;
00428      1  0 VAR
00429      1  0    arg : anystring;
00430      1  1 BEGIN
00431      1  1 readargument (arg);
00432      1  1 IF LBR$OUTPUT_HELP 
00433      1  1       (LIB$PUT_OUTPUT,80,(arg),(application.helplibrary),,LIB$GET_INPUT) <> 1
00434      1  1  THEN 
00435      1  2   BEGIN
00436      1  2   writeline (out,'Unable to find HELP library');
00437      1  2   pause;
00438      1  2   END
00439      1  1  ELSE writeline (out,'End HELP mode');
00440      0  0 END;

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page    9
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00441   C  0  0 {-----------------------------------------------------------------------------}
00442      0  0 [ GLOBAL ]
00443      1  0 PROCEDURE selecthard (VAR sel: command_type;  port : command_type);
00444      1  0 VAR
00445      1  0    i,j      : integer;
00446      1  1 BEGIN
00447      1  1 IF port = ''
00448      1  1  THEN startcommand ('HARDCOPY selection',false)
00449      1  1  ELSE startcommand ('HARDCOPY selection for ' + port,false);
00450      1  1 FOR i := 1 TO HARDIDLIM DO
00451      1  1    FOR j := 1 TO length(hardname (i,0)) DO
00452      1  1       setcommand (hardname (i,j));
00453      1  1 readcommand (sel,'L',false,'UTILITIES HARDCOPY EXTERNAL');
00454      0  0 END;
00455   C  0  0 {-----------------------------------------------------------------------------}
00456      0  0 [ HIDDEN ]
00457      1  0 PROCEDURE qhard;
00458      1  0 VAR
00459      1  0    modi,sel : command_type;
00460      1  0    arg      : anystring;
00461      1  1 BEGIN
00462      1  1 startcommand ('HARDCOPY modifier',true);
00463      1  1 setcommand ('Configure');
00464      1  1 setcommand ('External');
00465      1  1 setcommand ('Local');
00466      1  1 setcommand ('None');
00467      1  1 setcommand ('View');
00468      1  1 readcommand (modi,'S',false,'UTILITIES HARDCOPY');
00469      1  1 readargument (arg);
00470      1  1 
00471      1  2 CASE chofcom(modi) OF
00472      1  3    'C':  BEGIN
00473      1  3          IF terminal.hardname = 'LOCAL   '
00474      1  3           THEN 
00475      1  4            BEGIN
00476      1  4            writeline 
00477      1  4                   (out,'Use UTILITIES TERMINAL CONFIGURE for local hardcopy');
00478      1  4            pause;
00479      1  4            END
00480      1  3           ELSE hardconfig (QUE);
00481      1  2          END;
00482      1  3    'E':  BEGIN
00483      1  3          unread (arg);
00484      1  3          selecthard (sel,'');
00485      1  3          readargument (arg);
00486      1  3          terminal.hardname := strfix (sel,8);
00487      1  3          hardconfig (CON);
00488      1  3          IF terminal.hardname = 'LOCAL   '
00489      1  3           THEN 
00490      1  4            BEGIN
00491      1  4            writeline 
00492      1  4                   (out,'Use UTILITIES TERMINAL CONFIGURE for local hardcopy');
00493      1  4            pause;
00494      1  4            END
00495      1  3           ELSE hardconfig (QUE);

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   10
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00496      1  2          END;
00497      1  2    'L':  terminal.hardname := 'LOCAL   ';
00498      1  2    'N':  terminal.hardname := 'NONE    ';
00499      1  3    'V':  BEGIN
00500      1  3          writeline (out,'Terminal port     is ' + terminal.iounit); 
00501      1  3          writeline (out,'Terminal type     is ' + terminal.name); 
00502      1  3          writeline (out,'Hardcopy name     is ' + terminal.hardname); 
00503      1  3          IF terminal.hardname <> 'LOCAL   '
00504      1  3           THEN hardconfig (REP);
00505      1  3          pause;
00506      1  2          END;
00507      1  2    ESC:  ;
00508      1  1    END;
00509      0  0 END;
00510   C  0  0 {-----------------------------------------------------------------------------}
00511      0  0 [ HIDDEN ]
00512      1  0 PROCEDURE qmenu;
00513      1  1 BEGIN
00514      1  1 config.menu := NOT config.menu;
00515      0  0 END;
00516   C  0  0 {-----------------------------------------------------------------------------}
00517      0  0 [ GLOBAL ]
00518      1  0 PROCEDURE qos;
00519      1  0 VAR
00520      1  0    arg : anystring;
00521      1  1 BEGIN
00522      1  1 readargument (arg);
00523      1  1 IF arg = '' THEN readvary ('ENTER O.S. COMMAND : ',arg,'');
00524      1  1 IF stripblank(arg) <> '' 
00525      1  1  THEN 
00526      1  2   BEGIN
00527      1  2   LIB$SPAWN ((arg));
00528      1  2   pause;
00529      1  2   writeline (out,'');
00530      1  1   END;
00531      0  0 END;
00532   C  0  0 {-----------------------------------------------------------------------------}
00533      0  0 [ HIDDEN ]
00534      1  0 PROCEDURE qjou;
00535      1  0 VAR
00536      1  0    filename : anystring;
00537      1  1 BEGIN
00538      1  1 readvary ('ENTER JOURNAL FILE NAME : ',filename,'JOURNAL_SAVE.SOU');
00539      1  1 closejournal (filename);
00540      1  1 openjournal;
00541      1  1 IF readyes ('DO YOU WISH TO EDIT JOURNAL FILE ? ') THEN editfile (filename);
00542      0  0 END;
00543   C  0  0 {-----------------------------------------------------------------------------}
00544      0  0 [ GLOBAL ]
00545      1  0 PROCEDURE qset;
00546      1  0 VAR
00547      1  0    modi : command_type;
00548      1  0    arg  : anystring;
00549   C  1  0 {------------------------------}
00550      2  0 PROCEDURE doqset (modi : command_type;  arg : anystring);

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   11
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00551      2  0 VAR
00552      2  0    i : integer;
00553      2  1 BEGIN
00554      2  2 CASE chofcom(modi) OF
00555      2  2    'A':  setflag (config.assist,        modi,arg);
00556      2  2    'C':  setint  (config.ch.charspacing,modi,arg,0,config.ch.width);
00557      2  2    'D':  setint  (config.dotsize,       modi,arg,0,256);
00558      2  2    'E':  setvary (config.editor,        modi,arg);
00559      2  2    'F':  setint  (fieldwidth,           modi,arg,10,50);
00560      2  2    'H':  setint  (config.ch.height,     modi,arg,config.ch.linespacing,5000);
00561      2  2    'L':  setint  (config.ch.linespacing,modi,arg,0,config.ch.height);
00562      2  2    'K':  setflag (config.keypress,      modi,arg);
00563      2  2    'M':  setmacro                           (arg);
00564      2  2    'N':  setreal (config.nopresswait,   modi,arg,0,20);
00565      2  2    'O':  setflag (config.overlaykill,   modi,arg);
00566      2  2    'P':  setpath                            (arg);
00567      2  2    'R':  setint  (config.resolution,    modi,arg,1,4096);
00568      2  2    'V':  setflag (config.verify,        modi,arg);
00569      2  2    'W':  setint  (config.ch.width,      modi,arg,config.ch.charspacing,3000);
00570      2  2    ESC:  ;
00571      2  2    OTHERWISE 
00572      2  3          BEGIN
00573      2  3          FOR i := 1 TO commandcount DO doqset (commandcreate(i),NUL);
00574      2  3          pause;
00575      2  2          END;
00576      2  1    END;
00577      1  0 END;
00578   C  1  0 {------------------------------}
00579      1  1 BEGIN
00580      1  1 startcommand ('SET modifier',true);
00581      1  1 setcommand ('Assist');
00582      1  1 setcommand ('Char_Spacing');
00583      1  1 setcommand ('DotSize');
00584      1  1 setcommand ('Editor');
00585      1  1 setcommand ('Field_Width');
00586      1  1 setcommand ('Height');
00587      1  1 setcommand ('KeyPress');
00588      1  1 setcommand ('Line_Spacing');
00589      1  1 setcommand ('Macro');
00590      1  1 setcommand ('NoPress_Wait');
00591      1  1 setcommand ('Overlay_Kill');
00592      1  1 setcommand ('Path');
00593      1  1 setcommand ('Resolution');
00594      1  1 setcommand ('Verify');
00595      1  1 setcommand ('Width');
00596      1  1 readcommand (modi,NUL,false,'UTILITIES SET');
00597      1  1 readargument (arg);
00598      1  1 doqset (modi,arg);
00599      0  0 END;
00600   C  0  0 {-----------------------------------------------------------------------------}
00601      0  0 [ GLOBAL ]
00602      1  0 PROCEDURE selectterm (VAR sel : command_type;  port : command_type);
00603      1  0 VAR
00604      1  0    i,j : integer;
00605      1  1 BEGIN

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   12
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00606      1  1 IF port = ''
00607      1  1  THEN startcommand ('TERMINAL selection',false)
00608      1  1  ELSE startcommand ('TERMINAL selection for ' + port,false);
00609      1  1 setcommand ('AUTO    ');
00610      1  1 setcommand ('QUERY_VT');
00611      1  1 setcommand ('UNKNOWN ');
00612      1  1 FOR i := 1 TO TERMIDLIM DO
00613      1  1    FOR j := 1 TO length(termname (i,0)) DO
00614      1  1       setcommand (termname (i,j));
00615      1  1 readcommand (sel,'A',false,'UTILITIES TERMINAL SELECT');
00616      0  0 END;
00617   C  0  0 {-----------------------------------------------------------------------------}
00618      0  0 [ HIDDEN ]
00619      1  0 PROCEDURE qterm;
00620      1  0 VAR
00621      1  0    modi,sel : command_type;
00622      1  0    arg      : anystring;
00623      1  1 BEGIN
00624      1  1 startcommand ('TERMINAL modifier',true);
00625      1  1 setcommand ('Auto');
00626      1  1 setcommand ('Configure');
00627      1  1 setcommand ('Query_VT');
00628      1  1 setcommand ('Select');
00629      1  1 setcommand ('Unknown');
00630      1  1 setcommand ('View');
00631      1  1 readcommand (modi,'V',false,'UTILITIES TERMINAL');
00632      1  1 readargument (arg);
00633      1  1 
00634      1  2 CASE chofcom(modi) OF
00635      1  2    'A':  setterminal ('AUTO    ');
00636      1  2    'C':  termconfig (QUE);
00637      1  2    'Q':  setterminal ('QUERY_VT');
00638      1  3    'S':  BEGIN
00639      1  3          unread (arg);
00640      1  3          selectterm (sel,'');
00641      1  3          readargument (arg);
00642      1  3          IF sel <> ESC THEN setterminal (sel);
00643      1  2          END;
00644      1  2    'U':  setterminal ('UNKNOWN ');
00645      1  3    'V':  BEGIN
00646      1  3          writeline (out,'Terminal port     is ' + terminal.iounit); 
00647      1  3          writeline (out,'Terminal type     is ' + terminal.name); 
00648      1  3          termconfig (REP);
00649      1  3          pause;
00650      1  2          END;
00651      1  2    ESC:  ;
00652      1  1    END;
00653      0  0 END;
00654   C  0  0 {-----------------------------------------------------------------------------}
00655      0  0 [ GLOBAL ]
00656      1  0 PROCEDURE qview;
00657      1  0 VAR
00658      1  0    modi : command_type;
00659      1  0    arg  : anystring;
00660      1  1 BEGIN

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   13
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00661      1  1 startcommand ('VIEW modifier',true);
00662      1  1 setcommand ('Composite');
00663      1  1 setcommand ('Map_of_Terminals');
00664      1  1 setcommand ('Source');
00665      1  1 setcommand ('Time');
00666      1  1 setcommand ('Version');
00667      1  1 readcommand (modi,'C',false,'UTILITIES VIEW');
00668      1  1 readargument (arg);
00669      1  2 CASE chofcom(modi) OF
00670      1  3    'C':  BEGIN
00671      1  3          viewsource;
00672      1  3          writeline (out,strtime);
00673      1  3          writeline (out,QVERSION);
00674      1  2          END;
00675      1  2    'M':  viewtermmap;
00676      1  2    'S':  viewsource;
00677      1  2    'T':  writeline (out,strtime);
00678      1  2    'V':  writeline (out,QVERSION);
00679      1  2    ESC:  ;
00680      1  1    END;
00681      1  1 IF modi <> ESC THEN pause;
00682      0  0 END;
00683   C  0  0 {-----------------------------------------------------------------------------}
00684      0  0 [ GLOBAL ]
00685      1  0 PROCEDURE qat;
00686      1  0 VAR
00687      1  0    arg : anystring;
00688      1  1 BEGIN
00689      1  1 readargument (arg);
00690      1  1 IF arg = '' THEN readvary ('ENTER SOURCE FILE AND PARAMETERS : ',arg,'');
00691      1  1 opensourcefile (arg,'.SOU');
00692      0  0 END;
00693   C  0  0 {-----------------------------------------------------------------------------}
00694      0  0 [ GLOBAL ]
00695      1  0 PROCEDURE qqplotinput;
00696      1  0 VAR
00697      1  0    sel    : command_type;
00698      1  0    st,arg : anystring;
00699      1  1 BEGIN
00700      1  1 startfilesearch ('QPLOTHOME:*.SOU');
00701      1  1 startcommand ('INPUT FILE SELECTION',false);
00702      1  1 WHILE NOT endoffilesearch DO
00703      1  2    BEGIN
00704      1  2    filesearch (st);
00705      1  2    setcommand (fs.name);
00706      1  1    END;
00707      1  1 readcommand (sel,ESC,false,'UTILITIES QPLOT_INPUT_FILE');
00708      1  1 
00709      1  1 readargument (arg);
00710      1  1 IF sel <> ESC THEN opensourcefile ('QPLOTHOME:' + sel + ' ' + arg,'.SOU');
00711      0  0 END;
00712   C  0  0 {-----------------------------------------------------------------------------}
00713      0  0 [ GLOBAL ]
00714      1  0 PROCEDURE utilities;
00715      1  0 VAR

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   14
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00716      1  0    com : command_type;
00717      1  0    arg : anystring;
00718      1  1 BEGIN
00719      1  1 startcommand ('UTILITIES',true);
00720      1  1 setcommand ('Abort');
00721      1  1 setcommand ('Bug_Report');
00722      1  1 setcommand ('Color');
00723      1  1 setcommand ('Edit_File');
00724      1  1 setcommand ('Frame');
00725      1  1 setcommand ('General_Help');
00726      1  1 setcommand ('Hardcopy');
00727      1  1 setcommand ('Input_Source_File');
00728      1  1 setcommand ('Journal_Keep');
00729      1  1 setcommand ('Menu');
00730      1  1 setcommand ('OS');
00731      1  1 setcommand ('Qplot_Input_File');
00732      1  1 setcommand ('Set');
00733      1  1 setcommand ('Terminal');
00734      1  1 setcommand ('View');
00735      1  1 setcommand ('@ (Source_File)');
00736      1  1 setcommand ('; (Comment)');
00737      1  1 readcommand (com,ESC,false,'UTILITIES');
00738      1  2 CASE chofcom(com) OF
00739      1  2    'A':  qabort;
00740      1  2    'B':  qbug;
00741      1  2    'C':  qcolor;
00742      1  2    'E':  qedit;
00743      1  2    'F':  qframe;
00744      1  2    'G':  qgeneralhelp;
00745      1  2    'H':  qhard;
00746      1  2    'I':  qat;
00747      1  2    'J':  qjou;
00748      1  2    'M':  qmenu;
00749      1  2    'O':  qos;
00750      1  2    'Q':  qqplotinput;
00751      1  2    'S':  qset;
00752      1  2    'T':  qterm;
00753      1  2    'V':  qview;
00754      1  2    '@':  qat;
00755      1  2    ';':  ;
00756      1  2    ESC:  ;
00757      1  2    OTHERWISE 
00758      1  3          BEGIN
00759      1  3          writeline (out,'UTILITIES command not found');
00760      1  3          readargument (arg);
00761      1  2          END;
00762      1  1    END;
00763      0  0 END;
00764   C  0  0 {=============================================================================}
00765   C  0  0 {-- TERMINAL INITIALIZATION --------------------------------------------------}
00766   C  0  0 {=============================================================================}
00767      0  0 [ INITIALIZE ]
00768      1  0 PROCEDURE ioinit;
00769      1  0 VAR
00770      1  0    st   : anystring;

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   15
QPLOT                           Source Listing                  30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

-LINE-IDC-PL-SL-

00771      1  0    p    : parse_type;
00772      1  1 BEGIN
00773   C  1  1 { DETERMINE TERMINAL TYPE }
00774      1  1 systemioinit;
00775      1  1 openjournal;
00776      1  1 getforeign (st);
00777      1  1 IF index (st,'/') <> 1
00778      1  1  THEN 
00779      1  2   BEGIN
00780      1  2   unread ('SELECT AUTO');
00781      1  2   qterm;
00782      1  2   unread (st);
00783      1  2   END
00784      1  1  ELSE 
00785      1  2   BEGIN
00786      1  2   startparse (p,st);
00787      1  2   parse (p,'/');
00788      1  2   unread ('SELECT ' + parse (p,' '));
00789      1  2   qterm;
00790      1  2   unread ('SELECT LOCAL');
00791      1  2   qhard;
00792      1  2   unread (parse (p,''));
00793      1  1   END;
00794      1  1 IF terminal.id = 0 THEN raise ('Terminal type not set');
00795      0  0 END;
00796   C  0  0 {=============================================================================}
00797      0  0 END.

UTILITIES                                                       23-Dec-1988 10:21:55    VAX Pascal V3.7-254                Page   16
QPLOT                           Pascal Compilation Statistics   30-Nov-1988 09:56:54    [QPLOT.QPLOT.SOURCE]UTILITIES.PAS;116 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                               25650  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
LIB$INITIALIZE                          4  NOVEC,NOWRT,  RD,NOEXE,NOSHR,  GBL,  REL,  CON,NOPIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        45        17
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        62        50
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        97        48
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20        18        90
DUA1:[QPLOT.QPLOT.SOURCE]DIRECTORY.PEN;1                  45        44        98
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        47        65
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        24        26
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213       140        66
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101         9         9
DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PEN;1                     98        11        11
DUA1:[QPLOT.QPLOT.SOURCE]HARDIO.PEN;1                     58        11        19
DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PEN;1                    104        18        17



IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:STANDARD',
00005      0  0                'QLIBHOME:GENERAL',
00006      0  0                'QLIBHOME:MATH',
00007      0  0                'QLIBHOME:STRING',
00008      0  0                'QLIBHOME:COLOR',
00009      0  0                'QLIBHOME:FIG',
00010      0  0                'QLIBHOME:TERM_VAX',
00011      0  0                'QLIBHOME:TERMIO',
00012      0  0                'QLIBHOME:IOBASE',
00013      0  0                'QLIBHOME:HANDLER',
00014      0  0                'QLIBHOME:UTILITIES') ]
00015      0  0 MODULE io_imp;
00016      0  0 [ HIDDEN ] VAR
00017      0  0    unreadstring  : anystring := '';
00018   C  0  0 {=============================================================================}
00019   C  0  0 {-- SCREEN OUTPUT PROCEDURES -------------------------------------------------}
00020   C  0  0 {=============================================================================}
00021      0  0 [ GLOBAL ]
00022      1  0 FUNCTION registerqplot (name : logicalname;  helplibrary : anystring;
00023      1  0    equalscommand : logicalname) : anystring;
00024      1  0 VAR
00025      1  0    line,arg : anystring;
00026      1  1 BEGIN
00027      1  1 registerapplication (name,helplibrary,equalscommand);
00028      1  1 setctrlc;
00029      1  1 readargument (arg);
00030      1  1 WHILE source <> 0 DO
00031      1  1    readstring ('',line,true);
00032      1  1 writeline (out,' ');
00033      1  1 clearscreen; 
00034      1  1 registerqplot := arg;
00035      0  0 END;
00036   C  0  0 {-----------------------------------------------------------------------------}
00037      0  0 [ GLOBAL ]
00038      1  0 PROCEDURE clearscreen;
00039      1  1 BEGIN
00040      1  1 screenerase (true);
00041      0  0 END;
00042   C  0  0 {-----------------------------------------------------------------------------}
00043      0  0 [ GLOBAL ]
00044      1  0 PROCEDURE writestring (dest : destination;  string : anystring);
00045   C  1  0 { Purpose -- Write a string (without <CR>) to the given destination. }
00046      1  0 VAR
00047      1  0    i   : integer;
00048      1  0    str : VARYING [135] OF char;
00049      1  1 BEGIN
00050      1  1 str := '';
00051      1  1 FOR i := 1 TO length(string) DO
00052      1  1    IF string[i] IN [' '..'}'] THEN str := str + string[i];
00053      1  2 CASE dest OF
00054      1  2    out  : IF config.verify THEN writeterm (str);
00055      1  2    aud  : IF auditopen THEN write (audit ,str);

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00056      1  3    both : BEGIN
00057      1  3           IF config.verify THEN writeterm (str);
00058      1  3           IF auditopen THEN write (audit ,str);
00059      1  2           END;
00060      1  2    temp : write (tempfile,str);
00061      1  1    END;
00062      0  0 END;
00063   C  0  0 {-----------------------------------------------------------------------------}
00064      0  0 [ GLOBAL ]
00065      1  0 PROCEDURE writeline (dest : destination;  string : anystring);
00066   C  1  0 { Purpose -- Write a string (with <CR>) to the given destination. }
00067      1  1 BEGIN
00068      1  2 CASE dest OF
00069      1  2    out  : IF config.verify THEN writeterm (string + CRLF);
00070      1  2    aud  : IF auditopen THEN writeln (audit ,string);
00071      1  3    both : BEGIN
00072      1  3           IF config.verify THEN writeterm (string + CRLF);
00073      1  3           IF auditopen THEN writeln (audit ,string);
00074      1  2           END;
00075      1  2    temp : writeln (tempfile,string);
00076      1  1    END;
00077      0  0 END;
00078   C  0  0 {-----------------------------------------------------------------------------}
00079      0  0 [ GLOBAL ]
00080      1  0 PROCEDURE pause;
00081   C  1  0 { Purpose -- wait for keypress.  }
00082      1  0 VAR
00083      1  0    line : anystring;
00084      1  1 BEGIN
00085      1  1 IF NOT candomenu
00086      1  1  THEN
00087      1  1 ELSE IF config.keypress 
00088      1  1  THEN 
00089      1  2   BEGIN
00090      1  2   writeline (out,'PRESS ANY KEY TO CONTINUE ...');
00091      1  2   qiowreadnoechopurge (line,1);
00092      1  2   END
00093      1  1  ELSE wait (config.nopresswait);
00094      0  0 END;
00095   C  0  0 {-----------------------------------------------------------------------------}
00096      0  0 [ GLOBAL ]
00097      1  0 PROCEDURE bell;
00098   C  1  0 { Purpose -- ring the terminal bell three times, to signal error.  }
00099      1  1 BEGIN
00100      1  1 qiowwrite (chr(7));
00101      1  1 wait (0.3);
00102      1  1 qiowwrite (chr(7));
00103      1  1 wait (0.1);
00104      1  1 qiowwrite (chr(7));
00105      0  0 END;
00106   C  0  0 {-----------------------------------------------------------------------------}
00107      0  0 [ GLOBAL ]
00108      1  0 PROCEDURE readstring (prompt : VARYING [l1] OF CHAR;  
00109      1  0    VAR str : VARYING [l2] OF CHAR;  onceonly : boolean);
00110   C  1  0 { Purpose -- Read character string from either terminal or     }

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00111   C  1  0 {            sourcefile as directed by variable source.  Also  }
00112   C  1  0 {            and check for Commands 'HELP', 'QPLOT', and       }
00113   C  1  0 {            'ABORT' and comments (';').                       }
00114      1  0 VAR
00115      1  0    i,j     : integer;
00116      1  0    search  : VARYING [4] OF char;
00117      1  0    go      : boolean;
00118   C  1  0 {------------------------------}
00119      2  0 PROCEDURE checksource(VAR sf : text);
00120      2  1 BEGIN
00121      2  1 IF eof (sf)
00122      2  1  THEN
00123      2  2   BEGIN
00124      2  2   close (sf);
00125      2  2   source := source - 1;
00126      2  1   END;
00127      1  0 END;
00128   C  1  0 {------------------------------}
00129      2  0 PROCEDURE readsourceline (VAR sf : text;  VAR lable : VARYING [l2] OF char;
00130      2  0    VAR st : VARYING [l3] OF char);
00131      2  0 VAR
00132      2  0    token1,token2 : anystring;
00133      2  0    p             : parse_type;
00134      2  1 BEGIN
00135      2  1 readline (sf,st);
00136      2  1 FOR i := 1 TO 9 DO
00137      2  1   IF sourcesymbol[source,i] <> ''
00138      2  1    THEN
00139      2  2     BEGIN
00140      2  2     search := '''P' + strofi(i,1) + '''';
00141      2  3     REPEAT
00142      2  3        j := index (st,search);
00143      2  3        IF j <> 0
00144      2  3         THEN st := substr (st,1,j-1) + sourcesymbol[source,i] 
00145      2  3                   + substr (st,j+4,length(st)-j-3);
00146      2  2        UNTIL j = 0;
00147      2  1     END;
00148      2  1 
00149      2  1 lable := '';
00150      2  1 startparse (p,st);
00151      2  1 token1 := parse (p,' >');
00152      2  1 token2 := parse (p,' >');
00153      2  1 IF token2 = '>'
00154      2  1  THEN
00155      2  2   BEGIN
00156      2  2   st := parse (p,'');
00157      2  2   lable := token1;
00158      2  1   END;
00159      1  0 END;
00160   C  1  0 {------------------------------}
00161      2  0 PROCEDURE readsource (VAR sf : text;  VAR st : VARYING [l2] OF char);
00162      2  0 CONST
00163      2  0    EC  = '$';
00164      2  0 VAR
00165      2  0    state         : integer;

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00166      2  0    lable,target  : anystring;
00167      2  0    token1,token2 : anystring;
00168      2  0    p             : parse_type;
00169      2  0    stx           : ARRAY [1..3] OF anystring;
00170   C  2  0 {--------------------}
00171      3  0 FUNCTION usereval (st : anystring) : boolean;
00172      2  0 EXTERN;
00173   C  2  0 {--------------------}
00174      2  1 BEGIN
00175      2  1 readsourceline (sf,lable,st);
00176      2  1 
00177      2  1 WHILE index (st,'$') = 1 DO
00178      2  2    BEGIN
00179      2  2    startparse (p,st);
00180      2  2    token1 := parse (p,' ' + EC);
00181      2  2    token2 := parse (p,' ');
00182      2  2    IF (token1 = EC) AND (token2 <> '')
00183      2  2     THEN
00184      2  3      CASE token2[1] OF
00185      2  4         'I':  BEGIN
00186      2  4               FOR state := 1 TO 3 DO stx[state] := '';
00187      2  4               state := 1;
00188      2  5               REPEAT
00189      2  5                  target := parse (p,' ');
00190      2  5                  IF      target = EC + 'THEN' 
00191      2  5                   THEN state := 2
00192      2  5                  ELSE IF target = EC + 'ELSE'
00193      2  5                   THEN state := 3
00194      2  5                   ELSE stx[state] := stx[state] + target + ' ';
00195      2  4                  UNTIL target = '';
00196      2  4               IF usereval (stx[1])
00197      2  4                THEN st := stx[2]
00198      2  4                ELSE st := stx[3];
00199      2  3               END;
00200      2  4         'G':  BEGIN
00201      2  4               target := parse (p,' ');
00202      2  4               reset (sf);
00203      2  5               REPEAT
00204      2  5                  readsourceline (sf,lable,st);
00205      2  4                  UNTIL eof (sf) OR (lable = target);
00206      2  4               IF lable <> target
00207      2  4                THEN raise ('Label "' + target + '" not found in source file');
00208      2  3               END;
00209      2  2         END;
00210      2  1    END;
00211      2  1 
00212      2  1 IF config.verify THEN writeline (out,prompt + st);  
00213      1  0 END;
00214   C  1  0 {------------------------------}
00215      1  1 BEGIN
00216      1  2 REPEAT
00217      1  3    CASE source OF
00218      1  4       0:  BEGIN
00219      1  4           writestring (out,prompt);
00220      1  4           readterm (str);

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00221      1  3           END;
00222      1  3       1:  readsource (sf1,str);
00223      1  3       2:  readsource (sf2,str);
00224      1  3       3:  readsource (sf3,str);
00225      1  3       4:  readsource (sf4,str);
00226      1  3       5:  readsource (sf5,str);
00227      1  2       END;
00228      1  2    writejournalline (str);
00229      1  2 
00230      1  2    FOR i := 1 TO length(str) DO
00231      1  2       IF (str[i] IN ['a'..'z']) AND convertlower
00232      1  2        THEN str[i] := chr(ord(str[i])-32);
00233      1  2 
00234      1  2    go := false;
00235      1  2    IF      index(str,'ABORT') = 1
00236      1  2     THEN qabort
00237      1  2    ELSE IF index(str,'HELP') = 1
00238      1  2     THEN 
00239      1  3      BEGIN
00240      1  3      unread (substr (str,5,length(str)-4));
00241      1  3      qgeneralhelp;
00242      1  3      END
00243      1  2    ELSE IF index(str,'OS ') = 1
00244      1  2     THEN 
00245      1  3      BEGIN
00246      1  3      unread (substr (str,4,length(str)-3));
00247      1  3      qos;
00248      1  3      END
00249      1  2    ELSE IF (index(str,'UTILITIES ') = 1) AND NOT menu.active 
00250      1  2     THEN 
00251      1  3      BEGIN
00252      1  3      unread (substr (str,11,length(str)-10));
00253      1  3      utilities;
00254      1  3      END
00255      1  2    ELSE IF index(str,';') = 1
00256      1  2     THEN 
00257      1  2    ELSE IF index(str,'@;') = 1
00258      1  2     THEN
00259      1  3      BEGIN
00260      1  3      str := substr (str,2,length(str)-1);
00261      1  3      go := true;
00262      1  3      END
00263      1  2    ELSE IF index(str,'@@') = 1
00264      1  2     THEN
00265      1  3      BEGIN
00266      1  3      str := substr (str,2,length(str)-1);
00267      1  3      go := true;
00268      1  3      END
00269      1  2    ELSE IF index(str,'@') = 1
00270      1  2     THEN 
00271      1  3      BEGIN
00272      1  3      unread (substr (str,2,length(str)-1));
00273      1  3      qat;
00274      1  3      END
00275      1  2     ELSE go := true;

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00276      1  2    IF source = 5 THEN checksource (sf5);
00277      1  2    IF source = 4 THEN checksource (sf4);
00278      1  2    IF source = 3 THEN checksource (sf3);
00279      1  2    IF source = 2 THEN checksource (sf2);
00280      1  2    IF source = 1 THEN checksource (sf1);
00281      1  1    UNTIL go OR onceonly;
00282      0  0 END;
00283   C  0  0 {=============================================================================}
00284   C  0  0 {-- READ PROCEDURES ----------------------------------------------------------}
00285   C  0  0 {=============================================================================}
00286      0  0 [ GLOBAL ]
00287      1  0 PROCEDURE readst ( prompt : VARYING [l1] OF CHAR;  
00288      1  0                    VAR s : VARYING [l2] OF CHAR);
00289      1  1 BEGIN
00290      1  1 IF unreadstring = ''
00291      1  1  THEN readstring (prompt,s,false)
00292      1  1  ELSE s := unreadstring;
00293      1  1 WHILE index (s,' ') = 1 DO
00294      1  1    s := substr (s,2,length(s)-1);
00295      1  1 unreadstring := '';
00296      0  0 END;
00297   C  0  0 {-----------------------------------------------------------------------------}
00298      0  0 [ GLOBAL ]
00299      1  0 FUNCTION candomenu : boolean;
00300      1  1 BEGIN
00301      1  1 candomenu := config.menu AND (env.mode = M_TEXT) AND 
00302      1  1             (terminal.name <> 'NONE    ') AND
00303      1  1             (terminal.name <> 'DUMB    ') AND
00304      1  1             (source = 0) AND (unreadstring = '');
00305      0  0 END;
00306   C  0  0 {-----------------------------------------------------------------------------}
00307      0  0 [ GLOBAL ]
00308      1  0 PROCEDURE unread (m : VARYING [l1] OF CHAR);
00309      1  1 BEGIN
00310      1  1 unreadstring := m;
00311      0  0 END;
00312   C  0  0 {-----------------------------------------------------------------------------}
00313      0  0 [ GLOBAL ]
00314      1  0 PROCEDURE readch ( prompt : VARYING [l1] OF CHAR;  VAR ch : char;  
00315      1  0    charset : anystring;  def : char);
00316      1  0 VAR
00317      1  0    st : anystring;
00318      1  1 BEGIN
00319      1  1 convertlower := true;
00320      1  1 IF config.assist 
00321      1  1  THEN writeline (out,'Character input expected, please use ' + charset 
00322      1  1              + ', default is "' + def + '"');
00323      1  2 REPEAT
00324      1  2    readst (prompt,st);
00325      1  2    IF st = ''
00326      1  2     THEN st := def
00327      1  2    ELSE IF st = 'DEFAULT'
00328      1  2     THEN st := def;  
00329      1  2    ch := st[1];
00330      1  2    IF (index (charset,ch) = 0) AND (charset <> '')

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00331      1  2     THEN writeline (out,'Character not in allowed set : ' + charset);
00332      1  1    UNTIL (index (charset,ch) <> 0) OR (charset = '');
00333      1  1 IF config.assist AND (st <> ch) 
00334      1  1  THEN writeline (out,'Input character is "' + ch + '"');
00335      0  0 END;
00336   C  0  0 {-----------------------------------------------------------------------------}
00337      0  0 [ GLOBAL ]
00338      1  0 FUNCTION readyes (prompt : VARYING [l1] OF CHAR) : boolean;
00339      1  0 VAR
00340      1  0    chyes  : char;
00341      1  0    st     : anystring;
00342      1  1 BEGIN
00343      1  1 convertlower := true;
00344      1  1 IF config.assist 
00345      1  1  THEN writeline (out,'Answer expected, please use "Y" or "N", no default');
00346      1  2 REPEAT
00347      1  2    readst (prompt,st);
00348      1  2    IF st = '' THEN chyes := ' ' ELSE chyes := st[1];
00349      1  2    readyes := chyes IN ['Y','y'];
00350      1  1    UNTIL chyes IN ['Y','y','N','n'];
00351      0  0 END;
00352   C  0  0 {-----------------------------------------------------------------------------}
00353      0  0 [ GLOBAL ]
00354      1  0 PROCEDURE readvary (prompt : VARYING [l1] OF CHAR;  
00355      1  0           VAR st : VARYING [l2] OF CHAR;  def : VARYING [l3] OF CHAR);
00356      1  0 VAR
00357      1  0    temp : anystring;
00358      1  1 BEGIN
00359      1  1 IF config.assist 
00360      1  1  THEN writeline (out,'String input expected, default is "' + def + '"');
00361      1  1 readst (prompt,temp);
00362      1  1 IF temp = ''
00363      1  1  THEN st := strtrunc (def,l2)
00364      1  1 ELSE IF upcasestr(temp) = 'DEFAULT' 
00365      1  1  THEN st := strtrunc (def,l2)
00366      1  1 ELSE IF upcasestr(temp) = 'NULL'
00367      1  1  THEN st := ''
00368      1  1  ELSE st := strtrunc (temp,l2);
00369      1  1 IF config.assist AND (st <> temp) 
00370      1  1  THEN writeline (out,'Input string is "' + st + '"');
00371      0  0 END;
00372   C  0  0 {-----------------------------------------------------------------------------}
00373      0  0 [ GLOBAL ]
00374      1  0 PROCEDURE readlowervary (prompt : VARYING [l1] OF CHAR;  
00375      1  0           VAR st : VARYING [l2] OF CHAR;  def : VARYING [l3] OF CHAR);
00376      1  1 BEGIN
00377      1  1 convertlower := false;
00378      1  1 readvary (prompt,st,def);
00379      1  1 convertlower := true;
00380      0  0 END;
00381   C  0  0 {-----------------------------------------------------------------------------}
00382      0  0 [ GLOBAL ]
00383      1  0 PROCEDURE readlogicalname (prompt : VARYING [l1] OF CHAR;  
00384      1  0           VAR st : logicalname;  def : logicalname);
00385      1  0 VAR

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    8
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00386      1  0    temp : anystring;
00387      1  1 BEGIN
00388      1  1 convertlower := true;
00389      1  1 IF config.assist 
00390      1  1  THEN writeline (out,'Logical name input expected, default is "' + def + '"');
00391      1  2 REPEAT
00392      1  2    readst (prompt,temp);
00393      1  2    namefromstr (st,temp);
00394      1  2    IF (temp = '') OR (temp = 'DEFAULT')
00395      1  2     THEN
00396      1  3      BEGIN
00397      1  3      st := stripblank (def);
00398      1  3      goodconvert := true;
00399      1  3      IF config.assist 
00400      1  3       THEN writeline (out,'Input logical name is "'+st+'"');
00401      1  3      END
00402      1  2    ELSE IF temp = 'NULL'
00403      1  2     THEN 
00404      1  3      BEGIN
00405      1  3      st := '';
00406      1  3      goodconvert := true;
00407      1  3      IF config.assist 
00408      1  3       THEN writeline (out,'Input logical name is "'+st+'"');
00409      1  3      END
00410      1  2    ELSE IF NOT goodconvert
00411      1  2     THEN writeline (out,'Illegal name, must be alphanumeric - Try again')
00412      1  1    UNTIL goodconvert;
00413      0  0 END;
00414   C  0  0 {-----------------------------------------------------------------------------}
00415      0  0 [ GLOBAL ]
00416      1  0 PROCEDURE readboo (prompt : VARYING [l1] OF CHAR; VAR f : boolean;  
00417      1  0    def : boolean);
00418      1  0 VAR
00419      1  0    st : anystring;
00420      1  1 BEGIN
00421      1  1 convertlower := true;
00422      1  1 f := def;
00423      1  1 IF config.assist 
00424      1  1  THEN writeline (out,'Boolean input expected (Y,N,YES,NO,ON,OFF)');
00425      1  2 REPEAT
00426      1  2    goodconvert := true;
00427      1  2    readvary (prompt,st,'');
00428      1  2    IF      (st = 'Y') OR (st = 'YES') OR (st = 'ON')
00429      1  2     THEN f := true
00430      1  2    ELSE IF (st = 'N') OR (st = 'NO') OR (st = 'OFF')
00431      1  2     THEN f := false
00432      1  2    ELSE IF (st = '') OR (st = 'DEFAULT')
00433      1  2     THEN f := def
00434      1  2     ELSE goodconvert := false;
00435      1  1    UNTIL goodconvert;
00436      0  0 END;
00437   C  0  0 {-----------------------------------------------------------------------------}
00438      0  0 [ GLOBAL ]
00439      1  0 PROCEDURE readint (prompt : VARYING [l1] OF CHAR; VAR i : integer;  
00440      1  0    min,max,def : integer);

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page    9
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00441      1  0 VAR
00442      1  0    st   : anystring;
00443      1  1 BEGIN
00444      1  1 convertlower := true;
00445      1  1 IF config.assist 
00446      1  1  THEN writeline (out,'Integer input between' + strofi(min,6) + 
00447      1  1         ' and' + strofi(max,6) + ' Default is' + strofi(def,6));
00448      1  2 REPEAT
00449      1  2    readst (prompt,st);
00450      1  2    i := iofstr (st);
00451      1  2    IF (st = '') OR (st = 'DEFAULT')
00452      1  2     THEN 
00453      1  3      BEGIN 
00454      1  3      i :=  def;  
00455      1  3      goodconvert := true;  
00456      1  3      IF config.assist 
00457      1  3       THEN writeline (out,'Input integer is ' + strofi (i,6));
00458      1  3      END
00459      1  2    ELSE IF index (st,'NEG') = 1
00460      1  2     THEN 
00461      1  3      BEGIN 
00462      1  3      i := -def; 
00463      1  3      goodconvert := true;  
00464      1  3      IF config.assist 
00465      1  3       THEN writeline (out,'Input integer is ' + strofi (i,6));
00466      1  3      END
00467      1  2    ELSE IF index (st,'LIM') = 1
00468      1  2     THEN writeline (out,'Integer input between' + strofi(min,6) + 
00469      1  2         ' and' + strofi(max,6) + ' Default is' + strofi(def,6))
00470      1  2    ELSE IF NOT goodconvert
00471      1  2     THEN writeline (out,'Input conversion error - Try again')
00472      1  2    ELSE IF i < min
00473      1  2     THEN writeline (out,'Input must be >=' + strofi(min,6) + ' - Try again')
00474      1  2    ELSE IF i > max
00475      1  2     THEN writeline (out,'Input must be <=' + strofi(max,6) + ' - Try again');
00476      1  1    UNTIL goodconvert AND (i>=min) AND (i<=max);
00477      0  0 END;
00478   C  0  0 {-----------------------------------------------------------------------------}
00479      0  0 [ GLOBAL ]
00480      1  0 PROCEDURE readreal (prompt : VARYING [l1] OF CHAR; VAR r : real;
00481      1  0    min,max,def : real);
00482      1  0 VAR
00483      1  0    st   : anystring;
00484      1  1 BEGIN
00485      1  1 convertlower := true;
00486      1  1 IF config.assist 
00487      1  1  THEN writeline (out,'Real input between ' + strofr(min,13) + 
00488      1  1     ' and ' + strofr(max,13) + '  Default is' + strofr(def,13));
00489      1  2 REPEAT
00490      1  2    readst (prompt,st);
00491      1  2    r := rofstr (st);
00492      1  2    IF (st = '') OR (st = 'DEFAULT')
00493      1  2     THEN 
00494      1  3      BEGIN 
00495      1  3      r :=  def; 

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   10
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00496      1  3      goodconvert := true;  
00497      1  3      IF config.assist THEN writeline (out,'Input real is ' + strofr (r,0));
00498      1  3      END
00499      1  2    ELSE IF index (st,'NEG') = 1
00500      1  2     THEN 
00501      1  3      BEGIN 
00502      1  3      r := -def; 
00503      1  3      goodconvert := true;  
00504      1  3      IF config.assist THEN writeline (out,'Input real is ' + strofr (r,0));
00505      1  3      END
00506      1  2    ELSE IF index (st,'LIM') = 1
00507      1  2     THEN writeline (out,'Real input between ' + strofr(min,13) + 
00508      1  2        ' and ' + strofr(max,13) + '  Default is' + strofr(def,13))
00509      1  2    ELSE IF NOT goodconvert
00510      1  2     THEN writeline (out,'Input conversion error - Try again')
00511      1  2    ELSE IF r<min
00512      1  2     THEN writeline (out,'Input must be >=' + strofr(min,13) + ' - Try again')
00513      1  2    ELSE IF r>max
00514      1  2     THEN writeline (out,'Input must be <=' + strofr(max,13) + ' - Try again');
00515      1  1    UNTIL goodconvert AND (r>=min) AND (r<=max);
00516      0  0 END;
00517   C  0  0 {-----------------------------------------------------------------------------}
00518      0  0 [ GLOBAL ]
00519      1  0 PROCEDURE editfile (filename : VARYING [l1] OF CHAR);
00520      1  1 BEGIN
00521      1  1 IF config.editor <> ''
00522      1  1  THEN LIB$SPAWN (config.editor + ' ' + filename)
00523      1  1 ELSE IF config.ansi364
00524      1  1  THEN EDT$EDIT ((filename),,,,)
00525      1  1  ELSE EDT$EDIT ((filename),,,,16);
00526      0  0 END;
00527   C  0  0 {=============================================================================}
00528   C  0  0 {-- COMMAND MODULE -----------------------------------------------------------}
00529   C  0  0 {=============================================================================}
00530      0  0 [ GLOBAL ]
00531      1  0 PROCEDURE startcommand (prompt : VARYING [l1] OF CHAR;  lettered : boolean);
00532      1  1 BEGIN
00533      1  1 menu.name     := prompt;
00534      1  1 menu.active   := true;
00535      1  1 menu.lettered := lettered;
00536      1  1 menu.count    := 0;
00537      1  1 menu.scr      := 1;
00538      1  1 menu.pos      := 1;
00539      1  1 setcommand (' ');
00540      0  0 END;
00541   C  0  0 {-----------------------------------------------------------------------------}
00542      0  0 [ GLOBAL ]
00543      1  0 PROCEDURE setcommand (c : command_type);
00544      1  1 BEGIN
00545      1  1 IF menu.count < MENULIM THEN menu.count := menu.count + 1;
00546      1  1 IF menu.lettered
00547      1  1  THEN menu.data[menu.count].ch := chofcom(c)
00548      1  1  ELSE menu.data[menu.count].ch := NUL;
00549      1  1 menu.data[menu.count].it := c;
00550      0  0 END;

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   11
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00551   C  0  0 {-----------------------------------------------------------------------------}
00552      0  0 [ HIDDEN ]
00553      1  0 PROCEDURE calcsrc;
00554      1  0 VAR
00555      1  0    nn,ss,rr,cc,k,cols,rows : integer;
00556      1  1 BEGIN
00557      1  1 menu.screens := (menu.count-1) DIV 45 + 1;
00558      1  1 
00559   C  1  1 { CALCULATE R AND C FOR ALL ITEMS }
00560      1  1 FOR ss := 1 TO menu.screens DO
00561      1  2    BEGIN
00562      1  2    IF ss < menu.screens
00563      1  2     THEN nn := 45
00564      1  2     ELSE nn := menu.count - 45 * (menu.screens-1);
00565      1  2    cols := (nn-1) DIV 15 + 1;
00566      1  2    rows := (nn-1) DIV cols + 1;
00567      1  2    FOR cc := 1 TO cols DO
00568      1  2       FOR rr := 1 TO rows DO
00569      1  3          BEGIN
00570      1  3          k := (ss-1) * 45 + (cc-1) * rows + rr;
00571      1  3          IF k <= menu.count 
00572      1  3           THEN 
00573      1  4            BEGIN
00574      1  4            menu.data[k].s := ss;
00575      1  4            menu.data[k].r := rr;
00576      1  4            menu.data[k].c := cc*30-cols*15+16;
00577      1  3            END;
00578      1  2          END;
00579      1  1    END;
00580      0  0 END;
00581   C  0  0 {-----------------------------------------------------------------------------}
00582      0  0 [ GLOBAL ]
00583      1  0 FUNCTION fullcommand (com : command_type) : command_type;
00584      1  0 VAR
00585      1  0    i,perfect   : integer;
00586      1  0    found,numok : integer;
00587      1  1 BEGIN
00588      1  1 numok   := 0;
00589      1  1 perfect := 0;
00590      1  1 found   := 0;
00591      1  1 FOR i := 1 TO menu.count DO
00592      1  2    BEGIN
00593      1  2    IF com = menu.data[i].ch THEN perfect := i;
00594      1  2    IF com =  upcasestr (menu.data[i].it) THEN perfect := i;
00595      1  2    IF index (upcasestr (menu.data[i].it),com) = 1 
00596      1  2     THEN BEGIN found := i;  numok := numok+1;  END;
00597      1  1    END;
00598      1  1 IF      com = ''       THEN fullcommand := ' '
00599      1  1 ELSE IF com = ESC      THEN fullcommand := ESC
00600      1  1 ELSE IF perfect <> 0   THEN fullcommand := menu.data[perfect].it
00601      1  1 ELSE IF numok = 1      THEN fullcommand := menu.data[found].it
00602      1  1 ELSE                        fullcommand := ' ';
00603      0  0 END;
00604   C  0  0 {-----------------------------------------------------------------------------}
00605      0  0 [ GLOBAL ]

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   12
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00606      1  0 PROCEDURE readcommand (VAR com : command_type;  default : char;
00607      1  0    toplevel : boolean;  helpprefix : anystring);
00608      1  0 VAR
00609      1  0    line,arg    : anystring;
00610      1  0    p           : parse_type;
00611      1  1 BEGIN
00612      1  1 convertlower := true;
00613      1  1 IF candomenu
00614      1  1  THEN
00615      1  2   BEGIN
00616      1  2   calcsrc;
00617      1  2   com := readmenu (default,toplevel,helpprefix);
00618      1  2   IF toplevel THEN writeendofjournalline;
00619      1  2   writejournalstring (com);
00620      1  2   END
00621      1  1  ELSE
00622      1  2   BEGIN
00623      1  2   IF (source <> 0) AND (unreadstring = '') AND NOT toplevel
00624      1  2    THEN line := ''
00625      1  2    ELSE 
00626      1  3     BEGIN
00627      1  3     IF toplevel THEN writeline (out,'===============');
00628      1  3     readst (menu.name + '> ',line);
00629      1  2     END;
00630      1  2   startparse (p,line);
00631      1  2   com := parse (p,'@;/=~ ');
00632      1  2   IF com = '/' THEN com := parse (p,'@;/=~ ');
00633      1  2   IF (com = '') OR (com = '*') THEN com := default;
00634      1  2   IF com = '~' THEN com := ESC;
00635      1  2   com := fullcommand (com);
00636      1  2   IF (com = ' ') AND (index (line,'=') <> 0) AND toplevel
00637      1  2    THEN
00638      1  3     BEGIN
00639      1  3     unread (application.equalscommand + ' ' + line);
00640      1  3     readcommand (com,default,toplevel,helpprefix);
00641      1  3     END
00642      1  2    ELSE 
00643      1  3     BEGIN
00644      1  3     arg := parse (p,'');
00645      1  3     unread (arg);
00646      1  2     END;
00647      1  1   END;
00648      1  1 menu.active  := false;
00649      0  0 END;
00650   C  0  0 {-----------------------------------------------------------------------------}
00651      0  0 [ GLOBAL ]
00652      1  0 PROCEDURE readargument (VAR arg : anystring);
00653      1  1 BEGIN
00654      1  1 arg := unreadstring;
00655      1  1 unreadstring := '';
00656      1  1 writeendofjournalline;
00657      0  0 END;
00658   C  0  0 {-----------------------------------------------------------------------------}
00659      0  0 [ GLOBAL ]
00660      1  0 FUNCTION commandcount : integer;

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   13
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00661      1  1 BEGIN
00662      1  1 commandcount := menu.count - 1;
00663      0  0 END;
00664   C  0  0 {-----------------------------------------------------------------------------}
00665      0  0 [ GLOBAL ]
00666      1  0 FUNCTION commandcreate (i : integer) : command_type;
00667      1  1 BEGIN
00668      1  1 commandcreate := menu.data[i+1].it;
00669      0  0 END;
00670   C  0  0 {=============================================================================}
00671   C  0  0 {-- LOW LEVEL GRAPHICS ROUTINES ----------------------------------------------}
00672   C  0  0 {=============================================================================}
00673      0  0 [ HIDDEN ]
00674      1  0 PROCEDURE insertplotitem (is : ins_type;  x,y : shortunsigned;  s : anystring);
00675      1  1 BEGIN
00676      1  1 plotitem.ins := is;
00677      1  1 plotitem.ix  := x;
00678      1  1 plotitem.iy  := y;
00679      1  1 plotitem.st  := s;
00680      1  1 writeplotitem;
00681      1  1 executecom;
00682      0  0 END;
00683   C  0  0 {-----------------------------------------------------------------------------}
00684      0  0 [ GLOBAL ]
00685      1  0 PROCEDURE setcolor (color : color_type);
00686   C  1  0 { Purpose -- Set color used for drawing lines and graphtext.  }
00687      1  1 BEGIN
00688      1  1 insertplotitem (I_col,0,0,color);
00689      0  0 END;
00690   C  0  0 {-----------------------------------------------------------------------------}
00691      0  0 [ GLOBAL ]
00692      1  0 PROCEDURE openpanel (color,border_color : color_type);
00693   C  1  0 { Purpose -- Open solid color panel.  }
00694      1  1 BEGIN
00695      1  1 insertplotitem (I_col,0,0,border_color);
00696      1  1 insertplotitem (I_pan,0,0,color);
00697      0  0 END;
00698   C  0  0 {-----------------------------------------------------------------------------}
00699      0  0 [ GLOBAL ]
00700      1  0 PROCEDURE closepanel;
00701   C  1  0 { Purpose -- Close solid color panel.  }
00702      1  1 BEGIN
00703      1  1 insertplotitem (I_clo,0,0,'');
00704      0  0 END;
00705   C  0  0 {-----------------------------------------------------------------------------}
00706      0  0 [ GLOBAL ]
00707      1  0 PROCEDURE position (ix,iy : integer);
00708   C  1  0 { Purpose -- Position beam in 64K by 64K array.   }
00709      1  1 BEGIN
00710      1  1 insertplotitem (I_pos,ix,iy,'');
00711      0  0 END;
00712   C  0  0 {-----------------------------------------------------------------------------}
00713      0  0 [ GLOBAL ]
00714      1  0 PROCEDURE moveto (ix,iy : integer);
00715   C  1  0 { Purpose -- Reposition beam in the 64K by 64K array.   }

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   14
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00716      1  1 BEGIN
00717      1  1 insertplotitem (I_pos, env.pos.ix + ix, env.pos.iy + iy, '');
00718      0  0 END;
00719   C  0  0 {-----------------------------------------------------------------------------}
00720      0  0 [ GLOBAL ]
00721      1  0 PROCEDURE draw (ix,iy : integer);
00722   C  1  0 { Purpose -- Draw line to a point p.  }
00723      1  1 BEGIN
00724      1  1 insertplotitem (I_dra,ix,iy,'');
00725      0  0 END;
00726   C  0  0 {-----------------------------------------------------------------------------}
00727      0  0 [ GLOBAL ]
00728      1  0 PROCEDURE drawto (ix,iy : integer);
00729   C  1  0 { Purpose -- Draw line to a nearby point a distance away given by dp.  }
00730      1  1 BEGIN
00731      1  1 insertplotitem (I_dra, env.pos.ix + ix, env.pos.iy + iy, '');
00732      0  0 END;
00733   C  0  0 {-----------------------------------------------------------------------------}
00734      0  0 [ GLOBAL ]
00735      1  0 PROCEDURE setchsize (width,height : integer);
00736      1  1 BEGIN
00737      1  1 insertplotitem (I_siz,width,height,'');
00738      0  0 END;
00739   C  0  0 {-----------------------------------------------------------------------------}
00740      0  0 [ GLOBAL ]
00741      1  0 PROCEDURE setchmargin (charspacing,linespacing : integer);
00742      1  1 BEGIN
00743      1  1 insertplotitem (I_mar,charspacing,linespacing,'');
00744      0  0 END;
00745   C  0  0 {-----------------------------------------------------------------------------}
00746      0  0 [ GLOBAL ]
00747      1  0 PROCEDURE grprint (string : anystring);
00748   C  1  0 { Purpose -- Print characters at beam position.   }
00749      1  1 BEGIN
00750      1  1 insertplotitem (I_pri,0,0,string);
00751      0  0 END;
00752   C  0  0 {-----------------------------------------------------------------------------}
00753      0  0 [ GLOBAL ]
00754      1  0 PROCEDURE centergrprint (string : anystring);
00755      1  1 BEGIN
00756      1  1 position (imax (env.pos.ix-config.ch.width * length(string) DIV 2,0),
00757      1  1           env.pos.iy);
00758      1  1 grprint (string);
00759      0  0 END;
00760   C  0  0 {-----------------------------------------------------------------------------}
00761      0  0 [ GLOBAL ]
00762      1  0 PROCEDURE finplot;
00763   C  1  0 { Purpose -- Make sure plot is complete by purging plotting buffer. }
00764      1  1 BEGIN
00765      1  1 insertplotitem (I_emp,0,0,'');
00766      0  0 END;
00767   C  0  0 {-----------------------------------------------------------------------------}
00768      0  0 [ GLOBAL ]
00769      1  0 PROCEDURE readgin (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00770      1  1 BEGIN

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   15
QPLOT                           Source Listing                  15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

-LINE-IDC-PL-SL-

00771      1  1 gin (key,ipt,color);
00772      0  0 END;
00773   C  0  0 {=============================================================================}
00774      0  0 END.

IO_IMP                                                          23-Dec-1988 10:23:21    VAX Pascal V3.7-254                Page   16
QPLOT                           Pascal Compilation Statistics   15-Nov-1988 10:33:33    [QPLOT.QPLOT.SOURCE]IO_IMP.PAS;124 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                               17439  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                257  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        19         7
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204       204       100
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        71        57
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         2        10
DUA1:[QPLOT.QPLOT.SOURCE]MATH.PEN;1                       59         3         5
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        55        76
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93         0         0
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        90        42
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        41        41
DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PEN;1                     98        38        39
DUA1:[QPLOT.QPLOT.SOURCE]IOBASE.PEN;1                    104        34        33
DUA1:[QPLOT.QPLOT.SOURCE]HANDLER.PEN;1                    39         1         3
DUA1:[QPLOT.QPLOT.SOURCE]UTILITIES.PEN;1                 105         5         5



