TERM_VAX                                                        23-Dec-1988 09:55:01    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  22-Oct-1987 16:11:15    [QPLOT.QPLOT.SOURCE]TERM_VAX.PAS;48 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('SYS$LIBRARY:STARLET',
00003      0  0                'QLIBHOME:STARLETQ',
00004      0  0                'QLIBHOME:STANDARD',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG'),
00007      0  0   ENVIRONMENT ('QLIBHOME:TERM_VAX')]
00008      0  0 MODULE term_vax;
00009   C  0  0 {=============================================================================}
00010   C  0  0 {-- TERMINAL I/O DEFINITIONS -------------------------------------------------}
00011   C  0  0 {=============================================================================}
00012      0  0 [ HIDDEN ] VAR
00013      0  0    ichan         : $UWORD  := 0;
00014   C  0  0 {=============================================================================}
00015      0  0 [ HIDDEN, ASYNCHRONOUS ]
00016      1  0 PROCEDURE ctrlc;
00017      1  1 BEGIN
00018      1  1 LIB$SIGNAL (QPL_CTRLC);
00019      0  0 END;
00020   C  0  0 {=============================================================================}
00021   C  0  0 {-- TERMINAL INITIALIZATION ROUTINE ------------------------------------------}
00022   C  0  0 {=============================================================================}
00023      0  0 [ GLOBAL ]
00024      1  0 PROCEDURE systemioinit;
00025   C  1  0 { Purpose -- This routine establishes a channel to the user terminal.  }
00026   C  1  0 {            It will be called automatyically at the beginning of the  }
00027   C  1  0 {            user's program by another QPLOT routine.                  }
00028      1  0 VAR
00029      1  0    lognam       : PACKED ARRAY [1..10]  OF char;
00030      1  0    devdes       : PACKED ARRAY [1..63] OF char;
00031      1  0    devlen       : $UWORD;
00032      1  0    i,offset     : integer;
00033      1  0    iostring     : VARYING [6] OF char;
00034      1  1 BEGIN
00035      1  1 $assign ('SYS$OUTPUT',ichan,,);
00036      1  1 
00037      1  1 lognam := 'SYS$OUTPUT';
00038      1  1 $trnlog (lognam,devlen,devdes,,,);
00039      1  1 IF devdes[1] = ESC THEN offset := 4 ELSE offset := 0;
00040      1  1 iostring := '';
00041      1  1 FOR i := 1 TO 6 DO 
00042      1  1    IF devdes[i+offset] IN ['A'..'Z','0'..'9'] 
00043      1  1     THEN iostring := iostring + devdes[i+offset];
00044      1  1 FOR i := 1 TO 6 DO 
00045      1  1    IF i <= length (iostring)
00046      1  1     THEN terminal.iounit[i] := iostring[i]
00047      1  1     ELSE terminal.iounit[i] := ' ';
00048      0  0 END;
00049   C  0  0 {=============================================================================}
00050   C  0  0 {-- VAX QIOW PROCEDURES ------------------------------------------------------}
00051   C  0  0 {=============================================================================}
00052      0  0 [ GLOBAL ]
00053      1  0 PROCEDURE qiowwrite (st : VARYING [LEN] OF char);
00054      1  1 BEGIN
00055      1  1 $qiow (1,ichan,IO$_WRITEVBLK+IO$M_NOFORMAT,,,,st.body,length(st),,,,);

TERM_VAX                                                        23-Dec-1988 09:55:01    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  22-Oct-1987 16:11:15    [QPLOT.QPLOT.SOURCE]TERM_VAX.PAS;48 (1)

-LINE-IDC-PL-SL-

00056      0  0 END;
00057   C  0  0 {-----------------------------------------------------------------------------}
00058      0  0 [ GLOBAL ]
00059      1  0 PROCEDURE qiowwritevirtual (st : VARYING [LEN] OF char);
00060      1  1 BEGIN
00061      1  1 $qiow (2,ichan,IO$_WRITEVBLK,,,,st.body,length(st),,,,);
00062      0  0 END;
00063   C  0  0 {-----------------------------------------------------------------------------}
00064      0  0 [ GLOBAL ]
00065      1  0 PROCEDURE qiowread (VAR st : VARYING [LEN] OF char);
00066      1  1 BEGIN
00067      1  1 $qiow (3,ichan,IO$_READVBLK,,,,st.body,LEN,,,,);
00068      0  0 END;
00069   C  0  0 {-----------------------------------------------------------------------------}
00070      0  0 [ GLOBAL ]
00071      1  0 PROCEDURE qiowreadpurge (VAR st : VARYING [LEN] OF char);
00072      1  1 BEGIN
00073      1  1 $qiow (4,ichan,IO$_READVBLK+IO$M_PURGE,,,,st.body,LEN,,,,);
00074      0  0 END;
00075   C  0  0 {-----------------------------------------------------------------------------}
00076      0  0 [ GLOBAL ]
00077      1  0 PROCEDURE qiowreadnoecho (VAR st : VARYING [LEN] OF char;  l : integer);
00078      1  1 BEGIN
00079      1  1 $qiow (5,ichan,IO$_TTYREADALL+IO$M_NOECHO,,,,st.body,l,,,,);
00080      0  0 END;
00081   C  0  0 {-----------------------------------------------------------------------------}
00082      0  0 [ GLOBAL ]
00083      1  0 PROCEDURE qiowreadnoechopurge (VAR st : VARYING [LEN] OF char;  l : integer);
00084      1  1 BEGIN
00085      1  1 $qiow (6,ichan,IO$_TTYREADALL+IO$M_NOECHO+IO$M_PURGE,,,,st.body,l,,,,);
00086      0  0 END;
00087   C  0  0 {-----------------------------------------------------------------------------}
00088      0  0 [ GLOBAL ]
00089      1  0 PROCEDURE qiowreadprompttimednoechopurge (prompt : VARYING [L1] OF char;  
00090      1  0    VAR st : VARYING [L2] OF char;  l : integer);
00091      1  1 BEGIN
00092      1  1 $qiow (7,ichan,IO$_READPROMPT+IO$M_TIMED+IO$M_PURGE+IO$M_NOECHO+IO$M_ESCAPE,
00093      1  1                    ,,,st.body,l,5,,%REF(prompt.body),length(prompt));
00094      0  0 END;
00095   C  0  0 {-----------------------------------------------------------------------------}
00096      0  0 [ GLOBAL ]
00097      1  0 PROCEDURE qiowctrlc;
00098      1  1 BEGIN
00099      1  1 $qiow (8,ichan,IO$_SETMODE+IO$M_CTRLCAST,,,,%IMMED ctrlc,,,,,);
00100      0  0 END;
00101   C  0  0 {=============================================================================}
00102   C  0  0 {-- TERMINAL BOOKKEEPING VARIABLES -------------------------------------------}
00103   C  0  0 {=============================================================================}
00104      0  0 CONST
00105      0  0    BUFFERSIZE    = 132;
00106      0  0 VAR
00107      0  0    env           : RECORD   
00108      0  0                    pos           : ipoint;
00109      0  0                    curch         : ch_type;
00110      0  0                    mode          : (M_TEXT,M_PLOT,M_DUAL);

TERM_VAX                                                        23-Dec-1988 09:55:01    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  22-Oct-1987 16:11:15    [QPLOT.QPLOT.SOURCE]TERM_VAX.PAS;48 (1)

-LINE-IDC-PL-SL-

00111      0  0                    termclear     : boolean;
00112      0  0                    visible       : boolean;
00113      0  0                    ginflag       : boolean;
00114      0  0                    buffer        : VARYING [BUFFERSIZE] OF char;
00115      0  0                    END
00116      0  0                  := ((0,0),(0,0,0,0),M_TEXT,false,true,false,'');
00117   C  0  0 {=============================================================================}
00118   C  0  0 {-- MISCELANEOUS PROCEDURES --------------------------------------------------}
00119   C  0  0 {=============================================================================}
00120      0  0 [ GLOBAL ]
00121      1  0 PROCEDURE readterm_vax (VAR outstr : VARYING [l2] OF char);
00122      1  0 VAR
00123      1  0    i       : integer;
00124      1  0    ch500   : VARYING [500] OF char;
00125      1  0    foundcr : boolean;
00126      1  1 BEGIN
00127      1  1 ch500.length := 500;
00128      1  1 IF env.ginflag 
00129      1  1  THEN qiowreadpurge (ch500)
00130      1  1  ELSE qiowread (ch500);
00131      1  1 env.ginflag := false;
00132      1  1 foundcr := false;
00133      1  1 outstr := '';
00134      1  1 FOR i := 1 TO l2 DO 
00135      1  2    BEGIN
00136      1  2    IF ch500[i] IN [chr(0)..chr(31)] THEN foundcr := true;
00137      1  2    IF NOT foundcr THEN outstr := outstr + ch500[i];
00138      1  1    END;
00139      0  0 END;
00140   C  0  0 {=============================================================================}
00141      0  0 END.

TERM_VAX                                                        23-Dec-1988 09:55:01    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   22-Oct-1987 16:11:15    [QPLOT.QPLOT.SOURCE]TERM_VAX.PAS;48 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                1271  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                166  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

SYS$SYSROOT:[SYSLIB]STARLET.PEN;5                      20386        77         0
DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         4         2
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        28        23
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93         0         0
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        18         8



TERM_CHAR                                                       23-Dec-1988 09:55:29    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   2-Oct-1987 14:46:01    [QPLOT.QPLOT.SOURCE]TERM_CHAR.PAS;4 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:COLOR'),
00004      0  0   ENVIRONMENT ('QLIBHOME:TERM_CHAR')]
00005      0  0 MODULE term_char;
00006   C  0  0 {=============================================================================}
00007   C  0  0 {-- MISCELANEOUS PROCEDURES --------------------------------------------------}
00008   C  0  0 {=============================================================================}
00009      0  0 [ GLOBAL ]
00010      1  0 FUNCTION chofcolor (color : color_type) : char;
00011      1  0 VAR
00012      1  0    hlsa : hlsa_type;
00013      1  1 BEGIN
00014      1  1 hlsa := hlsaofcolor (color);
00015      1  1 WITH hlsa DO
00016      1  2    BEGIN
00017      1  2    IF      attribute = 'C' 
00018      1  2     THEN chofcolor := '?'
00019      1  2    ELSE IF saturation  < 50 
00020      1  2     THEN
00021      1  3      BEGIN
00022      1  3      IF      lightness <  0 THEN chofcolor := '?'
00023      1  3      ELSE IF lightness < 13 THEN chofcolor := ' '
00024      1  3      ELSE IF lightness < 38 THEN chofcolor := '.'
00025      1  3      ELSE IF lightness < 63 THEN chofcolor := '-'
00026      1  3      ELSE IF lightness < 88 THEN chofcolor := '+'
00027      1  3      ELSE                        chofcolor := '#';
00028      1  3      END
00029      1  2    ELSE IF lightness > 75  THEN chofcolor := '#'
00030      1  2    ELSE IF lightness < 25  THEN chofcolor := ' '
00031      1  2    ELSE IF hue       < 30  THEN chofcolor := 'b'
00032      1  2    ELSE IF hue       < 90  THEN chofcolor := 'm'
00033      1  2    ELSE IF hue       < 150 THEN chofcolor := 'r'
00034      1  2    ELSE IF hue       < 210 THEN chofcolor := 'y'
00035      1  2    ELSE IF hue       < 270 THEN chofcolor := 'g'
00036      1  2    ELSE IF hue       < 330 THEN chofcolor := 'c'
00037      1  2    ELSE                         chofcolor := 'b';
00038      1  1    END;
00039      0  0 END;
00040   C  0  0 {=============================================================================}
00041      0  0 END.

TERM_CHAR                                                       23-Dec-1988 09:55:29    VAX Pascal V3.7-254                Page    2
QPLOT                           Pascal Compilation Statistics    2-Oct-1987 14:46:01    [QPLOT.QPLOT.SOURCE]TERM_CHAR.PAS;4 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                 305  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124         5         4
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        13        14



TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:IO',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX'), 
00008      0  0   ENVIRONMENT ('QLIBHOME:TERM_ANSI')]
00009      0  0 MODULE term_ansi;
00010   C  0  0 {=============================================================================}
00011   C  0  0 {-- MENU PROCEDURES ----------------------------------------------------------}
00012   C  0  0 {=============================================================================}
00013      0  0 [ GLOBAL ]
00014      1  0 PROCEDURE screenerase_ansi;
00015      1  1 BEGIN
00016      1  1 qiowwrite (SI + ESC + '[f' + ESC + '[2J');
00017      0  0 END;
00018   C  0  0 {-----------------------------------------------------------------------------}
00019      0  0 [ HIDDEN ]
00020      1  0 PROCEDURE wrc_ansi (r,c : integer;  s : VARYING [l] OF CHAR);
00021      1  0 VAR
00022      1  0    rl,cl : integer;
00023      1  1 BEGIN
00024      1  1 IF r < 10 THEN rl := 1 ELSE rl := 2;
00025      1  1 IF c < 10 THEN cl := 1 ELSE cl := 2;
00026      1  1 qiowwrite (ESC + '[' + strofi(r,rl) + ';' + strofi(c,cl) + 'f');
00027      1  1 qiowwrite (ESC + '[0m');
00028      1  1 qiowwrite (s);
00029      0  0 END;
00030   C  0  0 {-----------------------------------------------------------------------------}
00031      0  0 [ HIDDEN ]
00032      1  0 PROCEDURE revwrc_ansi (r,c : integer;  s : VARYING [l] OF CHAR);
00033      1  0 VAR
00034      1  0    rl,cl : integer;
00035      1  1 BEGIN
00036      1  1 IF r < 10 THEN rl := 1 ELSE rl := 2;
00037      1  1 IF c < 10 THEN cl := 1 ELSE cl := 2;
00038      1  1 qiowwrite (ESC + '[' + strofi(r,rl) + ';' + strofi(c,cl) + 'f');
00039      1  1 qiowwrite (ESC + '[7m');
00040      1  1 qiowwrite (s);
00041      1  1 qiowwrite (ESC + '[0m');
00042      0  0 END;
00043   C  0  0 {-----------------------------------------------------------------------------}
00044      0  0 [ HIDDEN ]
00045      1  0 PROCEDURE bigwrc_ansi (r,c : integer;  s : VARYING [l] OF CHAR);
00046      1  0 VAR
00047      1  0    rl,cl : integer;
00048      1  1 BEGIN
00049      1  1 c := c DIV 2;
00050      1  1 IF r < 10 THEN rl := 1 ELSE rl := 2;
00051      1  1 IF c < 10 THEN cl := 1 ELSE cl := 2;
00052      1  1 qiowwrite (ESC + '[' + strofi(r,rl) + ';' + strofi(c,cl) + 'f');
00053      1  1 qiowwrite (ESC + '#6' + ESC + '#3' + s);
00054      1  1 r := r + 1;
00055      1  1 IF r < 10 THEN rl := 1 ELSE rl := 2;

TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

-LINE-IDC-PL-SL-

00056      1  1 IF c < 10 THEN cl := 1 ELSE cl := 2;
00057      1  1 qiowwrite (ESC + '[' + strofi(r,rl) + ';' + strofi(c,cl) + 'f');
00058      1  1 qiowwrite (ESC + '#6' + ESC + '#4' + s);
00059      0  0 END;
00060   C  0  0 {-----------------------------------------------------------------------------}
00061      0  0 [ GLOBAL ]
00062      1  0 FUNCTION readmenu_ansi (default : char;  toplevel : boolean;
00063      1  0    helpprefix : anystring;  dobig : boolean) : command_type;
00064      1  0 VAR
00065      1  0    i,j : integer;
00066      1  0    buf : VARYING [8] OF char;
00067      1  0    p   : parse_type;
00068      1  0    st  : command_type;
00069      1  0    arg : anystring;
00070   C  1  0 {------------------------------}
00071      2  0 FUNCTION posofsrc (s,r,c : integer) : integer;
00072      2  0 VAR
00073      2  0    i,j : integer;
00074      2  1 BEGIN
00075      2  1 j := 0;
00076      2  1 FOR i := 1 TO menu.count DO
00077      2  1    IF (s = menu.data[i].s) AND (r = menu.data[i].r) AND (c = menu.data[i].c)
00078      2  1     THEN j := i;
00079      2  1 posofsrc := j;
00080      1  0 END;
00081   C  1  0 {------------------------------}
00082      2  0 PROCEDURE showmenu;
00083      2  0 VAR
00084      2  0    i     : integer;
00085      2  0    line  : anystring;
00086      2  1 BEGIN
00087      2  1 IF NOT env.termclear THEN screenerase_ansi;
00088      2  1 line := menu.name + ' Menu';
00089      2  1 IF dobig
00090      2  1  THEN bigwrc_ansi (1,40-length(line),line)
00091      2  1  ELSE wrc_ansi (1,(80-length(line)) DIV 2,line);
00092      2  1 wrc_ansi (20,24,'Use Arrows or Space to change selection');
00093      2  1 IF menu.lettered
00094      2  1  THEN wrc_ansi (21,24,'Press Letter or Return to make selection')
00095      2  1  ELSE wrc_ansi (21,24,'Type selection and Press Return');
00096      2  1 wrc_ansi (22,24,'Press ESC twice or BackSpace to cancel');
00097      2  1 IF menu.screens > 1 
00098      2  1  THEN wrc_ansi (23,24,'Press TAB for next screen');
00099      2  1 wrc_ansi (24,24,'Press "?" for help on selected item.');
00100      2  1 
00101      2  1 FOR i := 1 TO menu.count DO 
00102      2  1    WITH menu.data[i] DO
00103      2  1       IF menu.scr <> s
00104      2  1        THEN
00105      2  1       ELSE IF menu.lettered
00106      2  1        THEN wrc_ansi (r+4,c,ch + ' -- ' + it)
00107      2  1        ELSE wrc_ansi (r+4,c,it);
00108      2  1 env.termclear := false;
00109      1  0 END;
00110   C  1  0 {------------------------------}

TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

-LINE-IDC-PL-SL-

00111      1  1 BEGIN
00112      1  1 menu.pos := 1;
00113      1  1 buf.length := 1;
00114      1  1 showmenu;
00115      1  2 REPEAT
00116      1  2    wrc_ansi (menu.data[menu.pos].r+4,menu.data[menu.pos].c,'');
00117      1  2    j := 0;
00118      1  2    IF env.ginflag 
00119      1  2     THEN qiowreadnoechopurge (buf,1)
00120      1  2     ELSE qiowreadnoecho (buf,1);
00121      1  2    env.ginflag := false;
00122      1  3    CASE buf[1] OF
00123      1  4       ESC:  BEGIN
00124      1  4             qiowreadnoecho (buf,1);
00125      1  5             CASE buf[1] OF
00126      1  6                '[':  BEGIN
00127      1  6                      qiowreadnoecho (buf,1);
00128      1  7                      CASE buf[1] OF
00129      1  7                         'A':  IF menu.pos = 1 
00130      1  7                                THEN qiowwrite (BEL)
00131      1  7                               ELSE IF menu.data[menu.pos-1].s <> menu.scr
00132      1  7                                THEN qiowwrite (BEL)
00133      1  7                                ELSE menu.pos := menu.pos - 1;
00134      1  7                         'B':  IF menu.pos = menu.count
00135      1  7                                THEN qiowwrite (BEL)
00136      1  7                               ELSE IF menu.data[menu.pos+1].s <> menu.scr
00137      1  7                                THEN qiowwrite (BEL)
00138      1  7                                ELSE menu.pos := menu.pos + 1;
00139      1  8                         'D':  BEGIN
00140      1  8                               j := posofsrc (menu.data[menu.pos].s,
00141      1  8                                              menu.data[menu.pos].r,
00142      1  8                                              menu.data[menu.pos].c-30);
00143      1  8                               IF j = 0 
00144      1  8                                THEN qiowwrite (BEL) 
00145      1  8                                ELSE menu.pos := j;
00146      1  7                               END;
00147      1  8                         'C':  BEGIN
00148      1  8                               j := posofsrc (menu.data[menu.pos].s,
00149      1  8                                              menu.data[menu.pos].r,
00150      1  8                                              menu.data[menu.pos].c+30);
00151      1  8                               IF j = 0 
00152      1  8                                THEN qiowwrite (BEL) 
00153      1  8                                ELSE menu.pos := j;
00154      1  7                               END;
00155      1  7                         OTHERWISE qiowwrite (BEL);
00156      1  6                         END;
00157      1  6                      j := 0;
00158      1  5                      END;
00159      1  5                ESC:  j := -1;
00160      1  5                OTHERWISE qiowwrite (BEL);
00161      1  4                END;
00162      1  3             END;
00163      1  3       BS :  j := -1;
00164      1  3       DEL:  j := -1;
00165      1  3       CTC:  j := -1;

TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

-LINE-IDC-PL-SL-

00166      1  3       CTY:  j := -1;
00167      1  3       CTZ:  j := -1;
00168      1  4       ' ':  BEGIN
00169      1  4             menu.pos := menu.pos MOD menu.count + 1;
00170      1  4             IF menu.data[menu.pos].s <> menu.scr
00171      1  4              THEN
00172      1  5               BEGIN
00173      1  5               menu.scr := menu.data[menu.pos].s;
00174      1  5               showmenu;
00175      1  4               END;
00176      1  3             END;
00177      1  3       '?',
00178      1  4       '/':  BEGIN
00179      1  4             screenerase_ansi;
00180      1  4             IF LBR$OUTPUT_HELP (LIB$PUT_OUTPUT,80,
00181      1  4                  helpprefix + ' ' + menu.data[menu.pos].it,
00182      1  4                  (application.helplibrary),,LIB$GET_INPUT) <> 1
00183      1  4              THEN 
00184      1  5               BEGIN  
00185      1  5               writeline (out,'Unable to find HELP Library');  
00186      1  5               pause;  
00187      1  4               END;
00188      1  4             showmenu;
00189      1  3             END;
00190      1  4       TAB:  BEGIN
00191      1  4             menu.pos := (((menu.pos-1) DIV 45 + 1) MOD menu.screens) * 45 + 1;
00192      1  4             menu.scr := menu.data[menu.pos].s;
00193      1  4             showmenu;
00194      1  3             END;
00195      1  4       CR :  BEGIN
00196      1  4             j := menu.pos;
00197      1  4             IF menu.data[menu.pos].ch = ' '
00198      1  4              THEN
00199      1  4               FOR i := 1 TO menu.count DO
00200      1  4                  IF menu.data[i].ch = default
00201      1  4                   THEN j := i;
00202      1  3             END;
00203      1  3       OTHERWISE 
00204      1  3             IF menu.lettered
00205      1  3              THEN
00206      1  4               BEGIN
00207      1  4               buf[1] := upcase(buf[1]);
00208      1  4               IF toplevel AND (buf[1] IN [MACROMIN..MACROMAX])
00209      1  4                THEN
00210      1  4                 IF macro[buf[1]] <> ''
00211      1  4                  THEN
00212      1  5                   BEGIN
00213      1  5                   startparse (p,macro[buf[1]]);
00214      1  5                   arg := parse (p,' ');
00215      1  5                   buf[1] := upcase(arg[1]);
00216      1  5                   arg := parse (p,'');
00217      1  5                   unread (arg);
00218      1  4                   END;
00219      1  4               FOR i := 1 TO menu.count DO
00220      1  4                  IF buf[1] = menu.data[i].ch THEN j := i;

TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

-LINE-IDC-PL-SL-

00221      1  4               IF j = 0 THEN qiowwrite (BEL);
00222      1  4               END
00223      1  3              ELSE
00224      1  4               BEGIN
00225      1  4               wrc_ansi (19,24,'ENTER SELECTION : ' + buf[1]);
00226      1  4               readterm_vax (st);
00227      1  4               st := fullcommand (upcasestr(buf[1] + st));
00228      1  4               FOR i := 1 TO menu.count DO
00229      1  4                  IF st = upcasestr(menu.data[i].it) THEN j := i;
00230      1  4               IF j = 0 THEN qiowwrite (BEL);
00231      1  3               END;
00232      1  2       END;
00233      1  1    UNTIL j <> 0;
00234      1  1 IF j < 0
00235      1  1  THEN readmenu_ansi := ESC
00236      1  1  ELSE readmenu_ansi := menu.data[j].it;
00237      1  1 
00238      1  1 screenerase_ansi;
00239      1  1 env.mode := M_TEXT;
00240      1  1 env.termclear := true;
00241      0  0 END;
00242   C  0  0 {=============================================================================}
00243      0  0 END.

TERM_ANSI                                                       23-Dec-1988 09:55:41    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics   14-Dec-1987 16:26:40    [QPLOT.QPLOT.SOURCE]TERM_ANSI.PAS;92 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                6209  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        39        15
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        58        47
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        29        40
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        31        15
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        33        15
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        52        51



TERM_REGIS                                                      23-Dec-1988 09:56:25    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  19-Jan-1988 13:06:37    [QPLOT.QPLOT.SOURCE]TERM_REGIS.PAS;25 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:FIG',
00005      0  0                'QLIBHOME:STRING',
00006      0  0                'QLIBHOME:COLOR',
00007      0  0                'QLIBHOME:TERM_VAX'),
00008      0  0   ENVIRONMENT ('QLIBHOME:TERM_REGIS') ]
00009      0  0 MODULE term_REGIS;
00010      0  0 VAR
00011      0  0    REGIS_control : RECORD
00012      0  0                    xsize       : integer;
00013      0  0                    ysize       : integer;
00014      0  0                    xresolution : integer;
00015      0  0                    yresolution : integer;
00016      0  0                    ginpos      : anystring;
00017      0  0                    END;
00018   C  0  0 {=============================================================================}
00019   C  0  0 {-- COLORMAP PROCEDURES ------------------------------------------------------}
00020   C  0  0 {=============================================================================}
00021      1  0 FUNCTION strofi_REGIS (i : integer) : anystring;
00022      1  1 BEGIN
00023      1  1 strofi_REGIS := stripblank (strofi (i,9));
00024      0  0 END;
00025   C  0  0 {-----------------------------------------------------------------------------}
00026      0  0 [ GLOBAL ]
00027      1  0 FUNCTION strofpos_REGIS : anystring;
00028      1  1 BEGIN
00029      1  1 strofpos_REGIS := '[' + strofi_REGIS
00030      1  1                         (env.pos.ix DIV REGIS_control.xresolution)
00031      1  1                 + ',' + strofi_REGIS
00032      1  1                         (env.pos.iy DIV REGIS_control.yresolution - 3) + ']';
00033      0  0 END;
00034   C  0  0 {-----------------------------------------------------------------------------}
00035      0  0 [ GLOBAL ]
00036      1  0 PROCEDURE bufferempty_REGIS;
00037      1  1 BEGIN
00038      1  1 IF env.buffer <> ''
00039      1  1  THEN
00040      1  2   BEGIN
00041      1  2   IF env.mode IN [M_TEXT,M_DUAL]
00042      1  2    THEN qiowwrite (ESC + 'Pp');
00043      1  2   env.mode := M_PLOT;
00044      1  2   qiowwrite (env.buffer + ';');
00045      1  2   env.buffer := '';
00046      1  1   END;
00047      0  0 END;
00048   C  0  0 {-----------------------------------------------------------------------------}
00049      0  0 [ GLOBAL ]
00050      1  0 FUNCTION strofhlsa_REGIS (hlsa : hlsa_type) : anystring;
00051      1  1 BEGIN
00052      1  1 IF hlsa.attribute= 'C'
00053      1  1  THEN strofhlsa_REGIS := 'H0L0S0'
00054      1  1  ELSE strofhlsa_REGIS := 'H' + strofi_REGIS (hlsa.hue) 
00055      1  1                        + 'L' + strofi_REGIS (hlsa.lightness) 

TERM_REGIS                                                      23-Dec-1988 09:56:25    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  19-Jan-1988 13:06:37    [QPLOT.QPLOT.SOURCE]TERM_REGIS.PAS;25 (1)

-LINE-IDC-PL-SL-

00056      1  1                        + 'S' + strofi_REGIS (hlsa.saturation);
00057      0  0 END;
00058   C  0  0 {-----------------------------------------------------------------------------}
00059      0  0 [ GLOBAL ]
00060      1  0 FUNCTION strofcolor_REGIS (c : color_type) : anystring;
00061      1  1 BEGIN
00062      1  1 strofcolor_REGIS := strofhlsa_REGIS (hlsaofcolor (c));
00063      0  0 END;
00064   C  0  0 {-----------------------------------------------------------------------------}
00065      0  0 [ GLOBAL ]
00066      1  0 FUNCTION strofindex_REGIS (VAR p : palette_type;  ix : integer) : anystring;
00067      1  0 VAR
00068      1  0    rgba : rgba_type;
00069      1  1 BEGIN
00070      1  1 rgba.r := p.data[ix].ir / (p.intensities-1);
00071      1  1 rgba.g := p.data[ix].ig / (p.intensities-1);
00072      1  1 rgba.b := p.data[ix].ib / (p.intensities-1);
00073      1  1 rgba.a := p.data[ix].ia;
00074      1  1 strofindex_REGIS := strofhlsa_REGIS (hlsaofrgba (rgba));
00075      0  0 END;
00076   C  0  0 {-----------------------------------------------------------------------------}
00077      0  0 [ GLOBAL ]
00078      1  0 FUNCTION getcolorindex_REGIS (VAR p : palette_type;  c : color_type;
00079      1  0    PROCEDURE bufferempty) : integer;
00080      1  0 VAR
00081      1  0    ix  : integer;
00082      1  0    new : boolean;
00083      1  1 BEGIN
00084      1  1 getcolorindex (ix,new,p,c);
00085      1  1 IF new
00086      1  1  THEN
00087      1  2   BEGIN
00088      1  2   env.buffer := 'S(M' + strofi_REGIS (ix-1) + '(' 
00089      1  2                      + strofindex_REGIS (p,ix) + '))';
00090      1  2   bufferempty;
00091      1  1   END;
00092      1  1 writeline (aud,'REGIS COLOR INDEX ' + strofi (ix,2) + '  "' + c + '"');
00093      1  1 getcolorindex_REGIS := ix;
00094      0  0 END;
00095   C  0  0 {=============================================================================}
00096   C  0  0 {-- PROCEDURES FOR REGIS TYPE TERMINALS --------------------------------------}
00097   C  0  0 {=============================================================================}
00098      0  0 [ GLOBAL ]
00099      1  0 PROCEDURE draw_REGIS (ix,iy : integer;  PROCEDURE bufferempty);
00100      1  1 BEGIN
00101      1  1 IF NOT env.visible
00102      1  1  THEN 
00103      1  2   BEGIN
00104      1  2   bufferempty;
00105      1  2   env.pos.ix := ix;
00106      1  2   env.pos.iy := iy;
00107      1  2   END
00108      1  1  ELSE 
00109      1  2   BEGIN
00110      1  2   IF length (env.buffer) > BUFFERSIZE-16 THEN bufferempty;

TERM_REGIS                                                      23-Dec-1988 09:56:25    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  19-Jan-1988 13:06:37    [QPLOT.QPLOT.SOURCE]TERM_REGIS.PAS;25 (1)

-LINE-IDC-PL-SL-

00111      1  2   IF length (env.buffer) = 0 THEN env.buffer := 'P' + strofpos_REGIS;
00112      1  2   env.pos.ix := ix;
00113      1  2   env.pos.iy := iy;
00114      1  2   env.buffer := env.buffer + 'V' + strofpos_REGIS;
00115      1  1   END;
00116      0  0 END;
00117   C  0  0 {-----------------------------------------------------------------------------}
00118      0  0 [ GLOBAL ]
00119      1  0 FUNCTION posofstr_REGIS (st : anystring) : ipoint;
00120      1  0 VAR
00121      1  0    s  : anystring;
00122      1  0    ip : ipoint;
00123      1  0    p  : parse_type;
00124      1  1 BEGIN
00125      1  1 startparse (p,st);
00126      1  1 s := parse (p,'[,]');
00127      1  1 ip.ix := round (rofstr (parse (p,'[,]')) * REGIS_control.xresolution);
00128      1  1 s := parse (p,'[,]');
00129      1  1 ip.iy := round (rofstr (parse (p,'[,]')) * REGIS_control.yresolution);
00130      1  1 posofstr_REGIS := ip;
00131      0  0 END;
00132   C  0  0 {-----------------------------------------------------------------------------}
00133      0  0 [ GLOBAL ]
00134      1  0 PROCEDURE screenerase_REGIS;
00135      1  1 BEGIN
00136      1  1 IF env.mode IN [M_DUAL,M_TEXT] THEN qiowwrite (ESC + 'Pp');
00137      1  1 qiowwrite ('S(A[0,' + stripblank (strofi (REGIS_control.ysize-1,4))
00138      1  1              + '][' + stripblank (strofi (REGIS_control.xsize-1,4))
00139      1  1              + ',0]);');
00140      1  1 qiowwrite ('S(E)' + ESC + '\' + ESC + '[H' + ESC + '[1;24r' + ESC + '[?8h');
00141      0  0 END;
00142   C  0  0 {-----------------------------------------------------------------------------}
00143      0  0 [ GLOBAL ]
00144      1  0 PROCEDURE screencopy_REGIS;
00145      1  1 BEGIN
00146      1  1 IF env.mode = M_PLOT 
00147      1  1  THEN qiowwrite ('S(H)')
00148      1  1  ELSE qiowwrite (ESC + 'PpS(H)' + ESC + '\');
00149      0  0 END;
00150   C  0  0 {-----------------------------------------------------------------------------}
00151      0  0 [ GLOBAL ]
00152      1  0 PROCEDURE config_REGIS (xs,ys : integer);
00153      1  1 BEGIN
00154      1  1 WITH REGIS_control DO
00155      1  2    BEGIN
00156      1  2    xsize       := xs;
00157      1  2    ysize       := ys;
00158      1  2    xresolution := 65535 DIV xs + 1;
00159      1  2    yresolution := 49151 DIV ys + 1;
00160      1  2    env.pos.ix  := 32767;
00161      1  2    env.pos.iy  := 24575;
00162      1  2    ginpos      := strofpos_REGIS;
00163      1  1    END;
00164      0  0 END;
00165   C  0  0 {=============================================================================}

TERM_REGIS                                                      23-Dec-1988 09:56:25    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  19-Jan-1988 13:06:37    [QPLOT.QPLOT.SOURCE]TERM_REGIS.PAS;25 (1)

-LINE-IDC-PL-SL-

00166      0  0 END.

TERM_REGIS                                                      23-Dec-1988 09:56:25    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics   19-Jan-1988 13:06:37    [QPLOT.QPLOT.SOURCE]TERM_REGIS.PAS;25 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3527  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                273  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        36        29
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        17         8
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213         0         0
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        29        40
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        41        44
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        37        37



TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

-LINE-IDC-PL-SL-

00001      0  0 
00002      0  0 [ IDENT       ('QPLOT'),
00003      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00004      0  0                'QLIBHOME:STANDARD',
00005      0  0                'QLIBHOME:GENERAL',
00006      0  0                'QLIBHOME:COLOR',
00007      0  0                'QLIBHOME:STRING',
00008      0  0                'QLIBHOME:IO',
00009      0  0                'QLIBHOME:FIG',
00010      0  0                'QLIBHOME:TERM_VAX'), 
00011      0  0   ENVIRONMENT ('QLIBHOME:TERM_4010')]
00012      0  0 MODULE term_4010;
00013      0  0 [ HIDDEN ] VAR
00014      0  0    dualcount : integer := 0;
00015   C  0  0 {=============================================================================}
00016   C  0  0 {-- MENU PROCEDURES ----------------------------------------------------------}
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION strofpos_4010 (ip : ipoint) : anystring;
00020      1  1 BEGIN
00021      1  1 strofpos_4010 := chr (ip.iy MOD 65536 DIV 2048 + 32) + 
00022      1  1                  chr (ip.iy MOD 2048  DIV 64   + 96) +
00023      1  1                  chr (ip.ix MOD 65536 DIV 2048 + 32) + 
00024      1  1                  chr (ip.ix MOD 2048  DIV 64   + 64);
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 FUNCTION chofcolor_4010 (c : color_type) : char;
00029      1  0 VAR
00030      1  0    hlsa : hlsa_type;
00031      1  1 BEGIN
00032      1  1 hlsa := hlsaofcolor (c);
00033      1  1 IF      hlsa.lightness  >  70   THEN chofcolor_4010 := '`'
00034      1  1 ELSE IF hlsa.saturation <  50   THEN chofcolor_4010 := 'a'
00035      1  1 ELSE IF hlsa.hue        <  30   THEN chofcolor_4010 := 'b'
00036      1  1 ELSE IF hlsa.hue        <  90   THEN chofcolor_4010 := 'c'
00037      1  1 ELSE IF hlsa.hue        < 150   THEN chofcolor_4010 := 'd'
00038      1  1 ELSE IF hlsa.hue        < 210   THEN chofcolor_4010 := 'h'
00039      1  1 ELSE IF hlsa.hue        < 270   THEN chofcolor_4010 := 'e'
00040      1  1 ELSE IF hlsa.hue        < 330   THEN chofcolor_4010 := 'f'
00041      1  1 ELSE                                 chofcolor_4010 := 'b';
00042      0  0 END;
00043   C  0  0 {-----------------------------------------------------------------------------}
00044      0  0 [ GLOBAL ]
00045      1  0 PROCEDURE screenerase_4010;
00046      1  1 BEGIN
00047      1  1 dualcount := 0;
00048      1  1 qiowwrite (ESC + FF);
00049      1  1 wait (1.0);
00050      0  0 END;
00051   C  0  0 {-----------------------------------------------------------------------------}
00052      0  0 [ GLOBAL ]
00053      1  0 PROCEDURE screencopy_4010;
00054      1  1 BEGIN
00055      1  1 qiowwrite (ESC + chr(23));

TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

-LINE-IDC-PL-SL-

00056      0  0 END;
00057   C  0  0 {-----------------------------------------------------------------------------}
00058      0  0 [ GLOBAL ]
00059      1  0 PROCEDURE gin_4010 (VAR key : char;  VAR ipt : ipoint);
00060      1  0 VAR
00061      1  0    str : VARYING [8] OF char;
00062      1  1 BEGIN
00063      1  1 IF env.mode = M_DUAL THEN env.mode := M_PLOT;
00064      1  1 qiowwrite (ESC + chr(26));
00065      1  1 str := '     ';
00066      1  1 qiowreadnoechopurge (str,5);
00067      1  1 key := str[1];
00068      1  1 ipt.ix  := (ord(str[2]) MOD 32) * 2048 + (ord(str[3]) MOD 32) * 64;
00069      1  1 ipt.iy  := (ord(str[4]) MOD 32) * 2048 + (ord(str[5]) MOD 32) * 64;
00070      0  0 END;
00071   C  0  0 {-----------------------------------------------------------------------------}
00072      0  0 [ GLOBAL ]
00073      1  0 PROCEDURE draw_4010 (ix,iy : integer;  set_wait : boolean;  
00074      1  0    PROCEDURE bufferempty);
00075      1  0 VAR
00076      1  0    oldstr,newstr : VARYING [80] OF char;
00077      1  1 BEGIN
00078      1  1 IF NOT env.visible
00079      1  1  THEN
00080      1  2   BEGIN
00081      1  2   bufferempty;
00082      1  2   env.pos.ix := ix;
00083      1  2   env.pos.iy := iy;
00084      1  2   END
00085      1  1  ELSE
00086      1  2   BEGIN
00087      1  2   IF length (env.buffer) > BUFFERSIZE-10 THEN bufferempty;
00088      1  2   oldstr := strofpos_4010 (env.pos);
00089      1  2   IF env.buffer = '' THEN env.buffer := chr(29) + oldstr;
00090      1  2   env.pos.ix := ix;
00091      1  2   env.pos.iy := iy;
00092      1  2   newstr := strofpos_4010 (env.pos);
00093      1  2   IF (newstr[1] <> oldstr[1]) OR (length(env.buffer)=5)
00094      1  2    THEN env.buffer := env.buffer + newstr[1];
00095      1  2   IF (newstr[3] <> oldstr[3]) OR (newstr[2] <> oldstr[2]) OR 
00096      1  2                                  (length(env.buffer)=6)
00097      1  2    THEN env.buffer := env.buffer + newstr[2];
00098      1  2   IF (newstr[3] <> oldstr[3]) OR (length(env.buffer)=7)
00099      1  2    THEN env.buffer := env.buffer + newstr[3];
00100      1  2   IF (newstr <> oldstr) OR (length(env.buffer)=8)
00101      1  2    THEN env.buffer := env.buffer + newstr[4];
00102      1  2   IF (abs(ord(newstr[1])-ord(oldstr[1])) +
00103      1  2       abs(ord(newstr[3])-ord(oldstr[3])) > 16) AND set_wait
00104      1  2    THEN BEGIN  bufferempty;  wait(0.1);  END;
00105      1  1   END;
00106      0  0 END;
00107   C  0  0 {-----------------------------------------------------------------------------}
00108      0  0 [ GLOBAL ]
00109      1  0 PROCEDURE writeterm_4010 (str : VARYING [l2] OF char);
00110      1  0 VAR

TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

-LINE-IDC-PL-SL-

00111      1  0    ipt : ipoint;
00112      1  1 BEGIN
00113      1  1 IF env.mode = M_PLOT
00114      1  1  THEN
00115      1  2   BEGIN
00116      1  2   ipt.ix := 0;
00117      1  2   ipt.iy := 1000 + dualcount * config.ch.height;
00118      1  2   IF ipt.iy < 0 THEN ipt.iy := 48000;
00119      1  2   env.mode := M_DUAL;
00120      1  2   qiowwrite (chr(29) + strofpos_4010 (ipt) + chr(31) + CRLF);
00121      1  2   dualcount := dualcount + 1;
00122      1  1   END;
00123      1  1 qiowwritevirtual (str);
00124      0  0 END;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      0  0 [ GLOBAL ]
00127      1  0 PROCEDURE menuprep_4010;
00128      1  1 BEGIN
00129      0  0 END;
00130   C  0  0 {-----------------------------------------------------------------------------}
00131      0  0 [ GLOBAL ]
00132      1  0 FUNCTION readmenu_4010 (default : char;  toplevel : boolean;
00133      1  0    helpprefix : anystring;  PROCEDURE menuprep) : command_type;
00134      1  0 VAR
00135      1  0    i,j    : integer;
00136      1  0    r,c    : integer;
00137      1  0    ip     : ipoint;
00138      1  0    key    : char;
00139      1  0    arg,st : anystring;
00140      1  0    p      : parse_type;
00141   C  1  0 {------------------------------}
00142      2  0 PROCEDURE wrc_4010 (r,c : integer;  s : VARYING [l] OF CHAR);
00143      2  0 VAR
00144      2  0    ip : ipoint;
00145      2  1 BEGIN
00146      2  1 ip.ix := c * (65536 DIV 76);
00147      2  1 ip.iy := (25 - r) * 49152 DIV 24;
00148      2  1 qiowwrite (chr(29) + strofpos_4010 (ip) + chr(31) + s);
00149      1  0 END;
00150   C  1  0 {------------------------------}
00151      2  0 PROCEDURE showmenu;
00152      2  0 VAR
00153      2  0    i     : integer;
00154      2  0    line  : anystring;
00155      2  1 BEGIN
00156      2  1 clearscreen;
00157      2  1 menuprep;
00158      2  1 qiowwrite (ESC + '8' + CRLF);
00159      2  1 line := menu.name + ' Menu';
00160      2  1 wrc_4010 (2,(76-length(line)) DIV 2,line);
00161      2  1 wrc_4010 (20,24,'Press Selection');
00162      2  1 wrc_4010 (22,24,'Press ESC to cancel');
00163      2  1 IF menu.screens > 1 THEN 
00164      2  1 wrc_4010 (23,24,'Press TAB for next screen');
00165      2  1 wrc_4010 (24,24,'Press "?" for help on selected item.');

TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

-LINE-IDC-PL-SL-

00166      2  1 
00167      2  1 FOR i := 1 TO menu.count DO 
00168      2  1    WITH menu.data[i] DO
00169      2  1       IF menu.scr <> s
00170      2  1        THEN
00171      2  1       ELSE IF menu.lettered
00172      2  1        THEN wrc_4010 (r+4,c,ch + ' -- ' + it)
00173      2  1        ELSE wrc_4010 (r+4,c,it);
00174      2  1 env.termclear := false;
00175      1  0 END;
00176   C  1  0 {------------------------------}
00177      1  1 BEGIN
00178      1  1 showmenu;
00179      1  2 REPEAT
00180      1  2    j := 0;
00181      1  2    readgin (key,ip,'');
00182      1  2    key := upcase(key);
00183      1  3    CASE key OF
00184      1  3       '?',
00185      1  4       '/':  BEGIN
00186      1  4             clearscreen;
00187      1  4             IF LBR$OUTPUT_HELP (LIB$PUT_OUTPUT,80,
00188      1  4                   helpprefix + ' ' + menu.data[menu.pos].it,
00189      1  4                   (application.helplibrary),,LIB$GET_INPUT) <> 1
00190      1  4              THEN 
00191      1  5               BEGIN
00192      1  5               writeline (out,'Unable to find HELP library');
00193      1  5               pause;
00194      1  4               END;
00195      1  4             env.termclear := false;
00196      1  4             showmenu;
00197      1  3             END;
00198      1  4       TAB:  BEGIN
00199      1  4             menu.pos := (((menu.pos-1) DIV 45 + 1) MOD menu.screens) * 45 + 1;
00200      1  4             menu.scr := menu.data[menu.pos].s;
00201      1  4             showmenu;
00202      1  3             END;
00203      1  4       CR :  BEGIN
00204      1  4             j := 1;
00205      1  4             r := 25 - ip.iy DIV (49152 DIV 24);
00206      1  4             c := ip.ix DIV (65536 DIV 80);
00207      1  4             FOR i := 1 TO menu.count DO
00208      1  4                IF (r = menu.data[i].r) AND 
00209      1  4                   (c >= menu.data[i].c) AND 
00210      1  4                   (c <= menu.data[i].c+10) THEN j := i;
00211      1  4             IF menu.data[j].ch = ' '
00212      1  4              THEN
00213      1  4               FOR i := 1 TO menu.count DO
00214      1  4                  IF menu.data[i].ch = default
00215      1  4                   THEN j := i;
00216      1  3             END;
00217      1  3       CTC:  j := -1;
00218      1  3       CTY:  j := -1;
00219      1  3       CTZ:  j := -1;
00220      1  3       ESC:  j := -1;

TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

-LINE-IDC-PL-SL-

00221      1  3       OTHERWISE
00222      1  3             IF menu.lettered
00223      1  3              THEN
00224      1  4               BEGIN
00225      1  4               key := upcase (key);
00226      1  4               IF toplevel AND (key IN [MACROMIN..MACROMAX])
00227      1  4                THEN
00228      1  4                 IF macro[key] <> ''
00229      1  4                  THEN
00230      1  5                   BEGIN
00231      1  5                   startparse (p,macro[key]);
00232      1  5                   arg := parse (p,' ');
00233      1  5                   key := upcase(arg[1]);
00234      1  5                   arg := parse (p,'');
00235      1  5                   unread (arg);
00236      1  4                   END;
00237      1  4               FOR i := 1 TO menu.count DO
00238      1  4                  IF key = menu.data[i].ch THEN j := i;
00239      1  4               IF j = 0 THEN qiowwrite (BEL);
00240      1  4               END
00241      1  3             ELSE IF key = ' '
00242      1  3              THEN
00243      1  4               BEGIN
00244      1  4               wrc_4010 (19,24,'ENTER SELECTION : ');
00245      1  4               readterm_vax (st);
00246      1  4               st := fullcommand (upcasestr (st));
00247      1  4               FOR i := 1 TO menu.count DO
00248      1  4                  IF st = upcasestr (menu.data[i].it) THEN j := i;
00249      1  4               IF j = 0 THEN qiowwrite (BEL);
00250      1  4               END
00251      1  3              ELSE
00252      1  4               BEGIN
00253      1  4               wrc_4010 (19,24,'ENTER SELECTION : ' + key);
00254      1  4               readterm_vax (st);
00255      1  4               st := fullcommand (upcasestr (key + st));
00256      1  4               FOR i := 1 TO menu.count DO
00257      1  4                  IF st = upcasestr (menu.data[i].it) THEN j := i;
00258      1  4               IF j = 0 THEN qiowwrite (BEL);
00259      1  3               END;
00260      1  2       END;
00261      1  1    UNTIL j <> 0;
00262      1  1 IF j < 0
00263      1  1  THEN readmenu_4010 := ESC
00264      1  1  ELSE readmenu_4010 := menu.data[j].it;
00265      1  1 
00266      1  1 env.termclear := false;
00267      1  1 clearscreen;
00268      1  1 env.mode := M_TEXT;
00269      1  1 env.ginflag := true;
00270      0  0 END;
00271   C  0  0 {=============================================================================}
00272      0  0 END.

TERM_4010                                                       23-Dec-1988 09:56:51    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics   20-Jan-1988 10:54:16    [QPLOT.QPLOT.SOURCE]TERM_4010.PAS;96 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                5573  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  4  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260        39        15
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        67        54
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         2        10
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        23        25
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        25        35
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        33        16
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        53        25
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        53        52



TERM_4100                                                       23-Dec-1988 09:57:30    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:48:32    [QPLOT.QPLOT.SOURCE]TERM_4100.PAS;57 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:COLOR',
00005      0  0                'QLIBHOME:STRING',
00006      0  0                'QLIBHOME:IO',
00007      0  0                'QLIBHOME:FIG',
00008      0  0                'QLIBHOME:TERM_VAX'), 
00009      0  0   ENVIRONMENT ('QLIBHOME:TERM_4100')]
00010      0  0 MODULE term_4100;
00011   C  0  0 {=============================================================================}
00012   C  0  0 {-- COLORMAP PROCEDURES ------------------------------------------------------}
00013   C  0  0 {=============================================================================}
00014      1  0 FUNCTION strofi_4100 (i : integer) : anystring;
00015      1  0 VAR
00016      1  0    str : VARYING [20] OF char;
00017      1  1 BEGIN
00018      1  1 str := '';
00019      1  1 IF abs(i) >= 65536 THEN i := 0;
00020      1  1 IF abs(i) >= 1024 
00021      1  1  THEN str := str + chr (abs(i) DIV 1024 + 64);
00022      1  1 IF abs(i) >=   16 
00023      1  1  THEN str := str + chr (abs(i) MOD 1024 DIV 16 + 64);
00024      1  1 IF i >= 0 
00025      1  1  THEN str := str + chr (abs(i) MOD 16   + 48)
00026      1  1  ELSE str := str + chr (abs(i) MOD 16   + 32);
00027      1  1 strofi_4100 := str;
00028      0  0 END;
00029   C  0  0 {-----------------------------------------------------------------------------}
00030      0  0 [ GLOBAL ]
00031      1  0 FUNCTION strofpos_4100 (ip : ipoint) : anystring;
00032      1  1 BEGIN
00033      1  1 strofpos_4100 := chr (ip.iy MOD 65536 DIV 2048 + 32) + 
00034      1  1                  chr (ip.iy MOD 64    DIV 16   * 4   +
00035      1  1                       ip.ix MOD 64    DIV 16   + 96) +
00036      1  1                  chr (ip.iy MOD 2048  DIV 64   + 96) +
00037      1  1                  chr (ip.ix MOD 65536 DIV 2048 + 32) + 
00038      1  1                  chr (ip.ix MOD 2048  DIV 64   + 64);
00039      0  0 END;
00040   C  0  0 {-----------------------------------------------------------------------------}
00041      0  0 [ GLOBAL ]
00042      1  0 FUNCTION strofhlsa_4100 (hlsa : hlsa_type;  candoblink : boolean) : anystring;
00043      1  1 BEGIN
00044      1  1 IF hlsa.attribute= 'C'
00045      1  1  THEN strofhlsa_4100 := '000'
00046      1  1 ELSE IF (hlsa.attribute = 'B') AND candoblink
00047      1  1  THEN strofhlsa_4100 := strofi_4100 (hlsa.hue) 
00048      1  1                       + strofi_4100 (hlsa.lightness) 
00049      1  1                       + strofi_4100 (hlsa.saturation+1000)
00050      1  1  ELSE strofhlsa_4100 := strofi_4100 (hlsa.hue) 
00051      1  1                       + strofi_4100 (hlsa.lightness) 
00052      1  1                       + strofi_4100 (hlsa.saturation);
00053      0  0 END;
00054   C  0  0 {-----------------------------------------------------------------------------}
00055      0  0 [ GLOBAL ]

TERM_4100                                                       23-Dec-1988 09:57:30    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:48:32    [QPLOT.QPLOT.SOURCE]TERM_4100.PAS;57 (1)

-LINE-IDC-PL-SL-

00056      1  0 FUNCTION strofcolor_4100 (c : color_type;  candoblink : boolean) : anystring;
00057      1  1 BEGIN
00058      1  1 strofcolor_4100 := strofhlsa_4100 (hlsaofcolor (c),candoblink);
00059      0  0 END;
00060   C  0  0 {-----------------------------------------------------------------------------}
00061      0  0 [ GLOBAL ]
00062      1  0 FUNCTION strofindex_4100 (VAR p : palette_type;  ix : integer) : anystring;
00063      1  0 VAR
00064      1  0    rgba : rgba_type;
00065      1  1 BEGIN
00066      1  1 rgba.r := p.data[ix].ir / (p.intensities-1);
00067      1  1 rgba.g := p.data[ix].ig / (p.intensities-1);
00068      1  1 rgba.b := p.data[ix].ib / (p.intensities-1);
00069      1  1 rgba.a := p.data[ix].ia;
00070      1  1 strofindex_4100 := strofhlsa_4100 (hlsaofrgba (rgba),p.candoblink);
00071      0  0 END;
00072   C  0  0 {-----------------------------------------------------------------------------}
00073      0  0 [ GLOBAL ]
00074      1  0 FUNCTION getcolorindex_4100 (VAR p : palette_type;  c : color_type;
00075      1  0    PROCEDURE bufferempty) : integer;
00076      1  0 VAR
00077      1  0    ix  : integer;
00078      1  0    new : boolean;
00079      1  1 BEGIN
00080      1  1 getcolorindex (ix,new,p,c);
00081      1  1 IF new
00082      1  1  THEN
00083      1  2   BEGIN
00084      1  2   env.buffer := CRLF;
00085      1  2   bufferempty;
00086      1  2   env.buffer := ESC + 'TG14' + strofi_4100 (ix-1) + strofindex_4100 (p,ix);
00087      1  2   bufferempty;
00088      1  1   END;
00089      1  1 getcolorindex_4100 := ix;
00090      0  0 END;
00091   C  0  0 {-----------------------------------------------------------------------------}
00092      0  0 [ GLOBAL ]
00093      1  0 PROCEDURE colorsetup_4100 (colors,intensities : integer;  candoblink : boolean);
00094   C  1  0 {------------------------------}
00095      2  0 PROCEDURE bufferempty;
00096      2  1 BEGIN
00097      2  1 qiowwrite (env.buffer + CRLF);
00098      2  1 env.buffer := '';
00099      1  0 END;
00100   C  1  0 {------------------------------}
00101      1  1 BEGIN
00102      1  1 initpalette (termpalette,colors,intensities,candoblink);
00103      1  1 IF env.mode = M_TEXT
00104      1  1  THEN
00105      1  2   BEGIN
00106      1  2   getcolorindex_4100 (termpalette,'TEXTBACK',bufferempty);
00107      1  2   qiowwrite (ESC + 'TFA0' + '0' + strofcolor_4100 ('TEXTBACK',false)
00108      1  2                           + '1' + strofcolor_4100 ('TEXTBOX',false)
00109      1  2                           + '2' + strofcolor_4100 ('TEXTCHAR',false)
00110      1  2                           + '3' + strofcolor_4100 ('CURSOR_1',false));

TERM_4100                                                       23-Dec-1988 09:57:30    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 09:48:32    [QPLOT.QPLOT.SOURCE]TERM_4100.PAS;57 (1)

-LINE-IDC-PL-SL-

00111      1  2   qiowwrite (ESC + 'TF4'  + '4' + strofcolor_4100 ('CURSOR_2',false));
00112      1  2   qiowwrite (ESC + 'LI210');
00113      1  2   qiowwrite (ESC + 'TD34');
00114      1  2   END
00115      1  1  ELSE
00116      1  2   BEGIN
00117      1  2   getcolorindex_4100 (termpalette,'PLOTBACK',bufferempty);
00118      1  2   qiowwrite (ESC + 'TFA0' + '0' + strofcolor_4100 ('BLACK',false)
00119      1  2                           + '1' + strofcolor_4100 ('OVERBOX',false)
00120      1  2                           + '2' + strofcolor_4100 ('OVERCHAR',false)
00121      1  2                           + '3' + strofcolor_4100 ('CURSOR_1',false));
00122      1  2   qiowwrite (ESC + 'TF4'  + '4' + strofcolor_4100 ('CURSOR_2',false));
00123      1  2   IF clearcolor ('OVERBOX') 
00124      1  2    THEN qiowwrite (ESC + 'LI200')
00125      1  2    ELSE qiowwrite (ESC + 'LI210');
00126      1  1   END;
00127      0  0 END;
00128   C  0  0 {=============================================================================}
00129   C  0  0 {-- WRITING PROCEDURES -------------------------------------------------------}
00130   C  0  0 {=============================================================================}
00131      0  0 [ GLOBAL ]
00132      1  0 PROCEDURE draw_4100 (ix,iy : integer;  VAR panelopen : boolean;
00133      1  0    PROCEDURE bufferempty);
00134      1  0 VAR
00135      1  0    oldstr,newstr : VARYING [80] OF char;
00136      1  1 BEGIN
00137      1  1 IF NOT env.visible
00138      1  1  THEN
00139      1  2   BEGIN
00140      1  2   bufferempty;
00141      1  2   env.pos.ix := ix;
00142      1  2   env.pos.iy := iy;
00143      1  2   END
00144      1  1  ELSE
00145      1  2   BEGIN
00146      1  2   IF length (env.buffer) > BUFFERSIZE-12 THEN bufferempty;
00147      1  2   oldstr := strofpos_4100 (env.pos);
00148      1  2   IF length (env.buffer) <> 0
00149      1  2    THEN
00150      1  2   ELSE IF panelopen
00151      1  2    THEN env.buffer := chr(29) + ESC + 'LP' + oldstr + '1'
00152      1  2    ELSE env.buffer := chr(29) + oldstr;
00153      1  2   env.pos.ix := ix;
00154      1  2   env.pos.iy := iy;
00155      1  2   newstr := strofpos_4100 (env.pos);
00156      1  2   env.buffer := env.buffer + newstr;
00157      1  1   END;
00158      1  1 panelopen := false;
00159      0  0 END;
00160   C  0  0 {-----------------------------------------------------------------------------}
00161      0  0 [ GLOBAL ]
00162      1  0 PROCEDURE writeterm_4100 (str : VARYING [l2] OF char;  dialoglines : integer);
00163      1  1 BEGIN
00164      1  1 IF env.mode = M_PLOT
00165      1  1  THEN

TERM_4100                                                       23-Dec-1988 09:57:30    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  12-Nov-1987 09:48:32    [QPLOT.QPLOT.SOURCE]TERM_4100.PAS;57 (1)

-LINE-IDC-PL-SL-

00166      1  2   BEGIN
00167      1  2   env.mode := M_DUAL;
00168      1  2   qiowwrite (chr(31) + ESC + 'KA1'     { DIALOG AREA ENABLE     }
00169      1  2                      + ESC + 'LCE0'    { DIALOG AREA CHARS=80   }
00170      1  2                      + ESC + 'LL' + strofi_4100 (dialoglines)
00171      1  2                      + ESC + 'LBB8'    { DIALOG AREA BUFFER=40  }
00172      1  2                      + ESC + 'LX `w W' { DIALOG AREA POS=(0,0)  }
00173      1  2                      + ESC + 'LV1');   { DIALOG AREA VISIBLE    }
00174      1  1   END;
00175      1  1 qiowwritevirtual (str);
00176      0  0 END;
00177   C  0  0 {-----------------------------------------------------------------------------}
00178      0  0 [ GLOBAL ]
00179      1  0 PROCEDURE gin_4100 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00180      1  0 VAR
00181      1  0    str    : VARYING [20] OF char;
00182      1  1 BEGIN
00183      1  2 CASE env.mode OF
00184      1  2    M_TEXT:  ;
00185      1  2    M_PLOT,
00186      1  3    M_DUAL:  BEGIN
00187      1  3             IF config.overlaykill THEN qiowwrite (ESC + 'LV0');
00188      1  3             env.mode := M_PLOT;
00189      1  2             END;
00190      1  1    END;
00191      1  1 IF color <> '' THEN qiowwrite (ESC + 'TC' + strofcolor_4100 (color,false));
00192      1  1 qiowwrite (ESC + 'ID0'     { GIN DISABLE         }
00193      1  1          + ESC + 'NT1='    { SET EOM = <CR>      }
00194      1  1          + ESC + 'IS000'   { SET SIG-CHARS OFF   }
00195      1  1          + ESC + 'IE01'    { GIN ENABLE          }
00196      1  1          + CRLF);
00197      1  1 str.length := 20;
00198      1  1 qiowreadnoechopurge (str,20);
00199      1  1 key := str[1];
00200      1  1 ipt.ix  := (ord(str[5]) MOD 32) * 2048 + (ord(str[6]) MOD 32) * 64
00201      1  1                                        + (ord(str[3]) MOD  4) * 16;
00202      1  1 ipt.iy  := (ord(str[2]) MOD 32) * 2048 + (ord(str[4]) MOD 32) * 64
00203      1  1                                        + (ord(str[3]) DIV 4 MOD  4) * 16;
00204      1  1 qiowreadnoechopurge (str,20);
00205      1  1 qiowwrite (LF);
00206      0  0 END;
00207   C  0  0 {=============================================================================}
00208      0  0 END.

TERM_4100                                                       23-Dec-1988 09:57:30    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:48:32    [QPLOT.QPLOT.SOURCE]TERM_4100.PAS;57 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                5835  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         0         0
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        42        34
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        60        65
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         0         0
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204         0         0
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        24        11
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        48        48



TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:FIG',
00006      0  0                'QLIBHOME:TERM_VAX',
00007      0  0                'QLIBHOME:TERM_CHAR',
00008      0  0                'QLIBHOME:STRING'),
00009      0  0   ENVIRONMENT ('QLIBHOME:DUMB.TEN') ]
00010      0  0 MODULE term_DUMB;
00011      0  0 [ HIDDEN ] CONST
00012      0  0    MAXROW          = 255;
00013      0  0    MAXCOL          = 255;
00014      0  0 [ HIDDEN ] TYPE
00015      0  0    iposition       = RECORD
00016      0  0                      irow,icol : integer;
00017      0  0                      END;
00018      0  0    memscreen_array = ARRAY [0..MAXROW] OF ARRAY [0..MAXCOL] OF CHAR; 
00019      0  0 [ HIDDEN ] VAR
00020      0  0    memscreen       : ^memscreen_array := NIL;
00021      0  0    colorchar       : char             := '#';
00022      0  0    termfig         : RECORD
00023      0  0                      rowsize : integer;
00024      0  0                      colsize : integer;
00025      0  0                      END 
00026      0  0                   := (60,128);
00027   C  0  0 {=============================================================================}
00028   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE DUMB ----------------------------------------}
00029   C  0  0 {=============================================================================}
00030      0  0 [ GLOBAL ]
00031      1  0 FUNCTION termname_DUMB (i : integer) : devname_type;
00032      1  1 BEGIN
00033      1  2 CASE i OF
00034      1  2    0: termname_DUMB := '1';
00035      1  2    1: termname_DUMB := 'DUMB    ';
00036      1  1    END;
00037      0  0 END;
00038   C  0  0 {-----------------------------------------------------------------------------}
00039      0  0 [ GLOBAL ]
00040      1  0 PROCEDURE colorsetup_DUMB;
00041      1  1 BEGIN
00042      0  0 END;
00043   C  0  0 {-----------------------------------------------------------------------------}
00044      0  0 [ GLOBAL ]
00045      1  0 PROCEDURE executecom_DUMB;
00046      1  0 VAR
00047      1  0    i                 : integer;
00048      1  0    oldpos80,newpos80 : iposition;
00049      1  0    tstr              : anystring;
00050   C  1  0 {----------------------------------}
00051      2  0 FUNCTION vposofqpos : iposition;
00052      2  0 VAR
00053      2  0    tpos : iposition;
00054      2  1 BEGIN
00055      2  1 tpos.irow := termfig.rowsize - env.pos.iy DIV (48000 DIV termfig.rowsize); 

TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

-LINE-IDC-PL-SL-

00056      2  1 tpos.icol := env.pos.ix DIV (65535 DIV termfig.colsize); 
00057      2  1 IF tpos.irow < 0 THEN tpos.irow := 0;
00058      2  1 IF tpos.icol < 0 THEN tpos.icol := 0;
00059      2  1 IF tpos.irow > termfig.rowsize THEN tpos.irow := termfig.rowsize;
00060      2  1 IF tpos.icol > termfig.colsize THEN tpos.icol := termfig.colsize;
00061      2  1 vposofqpos := tpos;
00062      1  0 END;
00063   C  1  0 {----------------------------------}
00064      2  0 PROCEDURE gentheline(pos1,pos2 : iposition;
00065      2  0                 VAR tmemscreen : memscreen_array;
00066      2  0                       plotchar : CHAR);
00067      2  0 VAR
00068      2  0    error,delta_x,delta_y : DOUBLE;
00069      2  0    m,n,tcolsize          : INTEGER;
00070      2  0    temp_pos,temp_pos1    : iposition;
00071      2  1 BEGIN
00072      2  1 tcolsize := termfig.colsize;
00073      2  1 error := 0;
00074      2  1 m := 1;
00075      2  1 n := 1;
00076      2  1 delta_x := pos2.icol - pos1.icol;
00077      2  1 IF delta_x < 0 
00078      2  1  THEN
00079      2  2   BEGIN
00080      2  2   m := -1; {x to left}
00081      2  2   delta_x := - delta_x;
00082      2  2   END
00083      2  1 ELSE IF delta_x = 0 
00084      2  1  THEN error := -1; { assure vertical movement }
00085      2  1 delta_y := pos2.irow - pos1.irow;
00086      2  1 IF delta_y < 0 
00087      2  1  THEN
00088      2  2   BEGIN
00089      2  2   n := -1; { y moves down }
00090      2  2   delta_y := - delta_y;
00091      2  1   END;
00092      2  1 WHILE NOT((pos2.icol = pos1.icol) AND
00093      2  1           (pos2.irow = pos1.irow)) DO
00094      2  2    BEGIN
00095      2  2    temp_pos := pos1;
00096      2  2    IF pos1.irow < 0 THEN temp_pos.irow := 0;
00097      2  2    IF pos1.icol < 0 THEN temp_pos.icol := 0;
00098      2  2    IF pos1.irow > termfig.rowsize THEN temp_pos.irow := termfig.rowsize;
00099      2  2    IF pos1.icol > tcolsize THEN temp_pos.icol := tcolsize;
00100      2  2    tmemscreen[temp_pos.irow,temp_pos.icol] := plotchar; 
00101      2  2    IF error < 0 
00102      2  2     THEN
00103      2  3      BEGIN
00104      2  3      pos1.irow := pos1.irow + n;
00105      2  3      error := error + delta_x;
00106      2  3      END
00107      2  2     ELSE
00108      2  3      BEGIN
00109      2  3      pos1.icol := pos1.icol + m;
00110      2  3      error := error - delta_y;

TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

-LINE-IDC-PL-SL-

00111      2  2      END;
00112      2  1    END;      
00113      1  0 END;
00114   C  1  0 {----------------------------------}
00115      1  1 BEGIN
00116      1  2 WITH plotitem DO CASE ins OF
00117      1  2    I_col:  colorchar := chofcolor (st);
00118      1  2    I_pan:  ;
00119      1  2    I_clo:  ;
00120      1  3    I_pos : BEGIN
00121      1  3            env.pos.ix := ix;
00122      1  3            env.pos.iy := iy;
00123      1  2            END;
00124      1  2    I_dra : IF colorchar = '?'
00125      1  2             THEN
00126      1  3              BEGIN
00127      1  3              env.pos.ix := ix;
00128      1  3              env.pos.iy := iy;
00129      1  3              END
00130      1  2             ELSE
00131      1  3              BEGIN
00132      1  3              oldpos80 := vposofqpos;
00133      1  3              env.pos.ix := ix;
00134      1  3              env.pos.iy := iy;
00135      1  3              newpos80 := vposofqpos;
00136      1  3              gentheline(oldpos80,newpos80,memscreen^,colorchar);
00137      1  2              END;
00138      1  2    I_siz:  ;
00139      1  2    I_mar:  ;
00140      1  2    I_pri:  IF (colorchar <> '?') AND (ix <= iy) 
00141      1  2             THEN 
00142      1  3              BEGIN
00143      1  3              tstr := st;
00144      1  3              newpos80 := vposofqpos;
00145      1  3              FOR i := 1 TO length (tstr) DO
00146      1  4                 BEGIN
00147      1  4                 IF (newpos80.icol + 1 < termfig.colsize) 
00148      1  4                  THEN newpos80.icol := newpos80.icol + 1; 
00149      1  4                 memscreen^[newpos80.irow,newpos80.icol] := tstr[i];
00150      1  3                 END;
00151      1  2              END;
00152      1  2    I_emp:  ;
00153      1  1    END;
00154      0  0 END;
00155   C  0  0 {-----------------------------------------------------------------------------}
00156      0  0 [ GLOBAL ]
00157      1  0 PROCEDURE writeterm_DUMB (str : VARYING [l2] OF char);
00158      1  1 BEGIN
00159      1  1 qiowwrite (str);
00160      0  0 END;
00161   C  0  0 {-----------------------------------------------------------------------------}
00162      0  0 [GLOBAL]
00163      1  0 PROCEDURE readterm_DUMB (VAR outstr : VARYING [l2] OF char);
00164      1  1 BEGIN
00165      1  1 readterm_vax (outstr);

TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

-LINE-IDC-PL-SL-

00166      0  0 END;
00167   C  0  0 {-----------------------------------------------------------------------------}
00168      0  0 [ GLOBAL ]
00169      1  0 PROCEDURE screenerase_DUMB;
00170      1  0 VAR
00171      1  0   a,b : INTEGER;
00172      1  1 BEGIN
00173      1  1 FOR a := 1 TO termfig.rowsize DO 
00174      1  1    FOR b := 1 TO termfig.colsize DO 
00175      1  1       memscreen^[a,b] := ' ';
00176      0  0 END;
00177   C  0  0 {-----------------------------------------------------------------------------}
00178      0  0 [ GLOBAL ]
00179      1  0 PROCEDURE screencopy_DUMB;
00180      1  0 VAR
00181      1  0   tempstr : VARYING [255] OF char;
00182      1  0   i,j     : integer;
00183      1  1 BEGIN
00184      1  1 FOR j := 1 TO 3 DO
00185      1  2    BEGIN
00186      1  2    tempstr := '    ';
00187      1  2    FOR i := 1 TO termfig.colsize DO 
00188      1  2       tempstr := tempstr + substr (strofi (i,3),j,1);
00189      1  2    qiowwrite (tempstr + CRLF);
00190      1  1    END;
00191      1  1 qiowwrite (CRLF);
00192      1  1 FOR j := 1 TO termfig.rowsize DO
00193      1  2    BEGIN
00194      1  2    tempstr := strofi(j,3) + ' ';
00195      1  2    FOR i := 1 TO termfig.colsize DO
00196      1  2       tempstr := tempstr + memscreen^[j,i];
00197      1  2    qiowwrite (tempstr + CRLF);
00198      1  1    END;
00199      0  0 END;
00200   C  0  0 {-----------------------------------------------------------------------------}
00201      0  0 [ GLOBAL ]
00202      1  0 PROCEDURE gin_DUMB (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00203      1  0 VAR
00204      1  0   ch50,str1,str2,str3 : VARYING [50] OF char;
00205      1  0   curpos              : iposition;  
00206      1  0   p                   : parse_type;
00207      1  1 BEGIN
00208      1  1 qiowwrite ('ENTER KEY, ROW, COLUMN : ');
00209      1  1 readterm_vax (ch50);
00210      1  1 
00211      1  1 startparse (p,ch50);
00212      1  1 str1 := parse (p,' ');
00213      1  1 str2 := parse (p,' ');
00214      1  1 str3 := parse (p,' ');
00215      1  1 
00216      1  1 key := ' ';
00217      1  1 curpos.irow := 1;
00218      1  1 curpos.icol := 1;
00219      1  1 IF str1 <> '' THEN key := str1[1];
00220      1  1 IF str2 <> '' THEN curpos.irow := iofstr (str2);

TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

-LINE-IDC-PL-SL-

00221      1  1 IF str3 <> '' THEN curpos.icol := iofstr (str3);
00222      1  1 curpos.irow := (curpos.irow-1) MOD termfig.rowsize + 1;
00223      1  1 curpos.icol := (curpos.icol-1) MOD termfig.colsize + 1;
00224      1  1 ipt.ix := curpos.icol * (65535 DIV termfig.colsize); 
00225      1  1 ipt.iy := 48000 - curpos.irow * (48000 DIV termfig.rowsize); 
00226      0  0 END;
00227   C  0  0 {-----------------------------------------------------------------------------}
00228      0  0 [GLOBAL]
00229      1  0 FUNCTION readmenu_DUMB (default : char;  toplevel : boolean;
00230      1  0    helpprefix : anystring) : command_type;
00231      1  1 BEGIN
00232      1  1 raise ('Attempted menu read from dumb terminal');
00233      1  1 readmenu_DUMB := '';
00234      0  0 END;
00235   C  0  0 {-----------------------------------------------------------------------------}
00236      0  0 [ GLOBAL ]
00237      1  0 PROCEDURE termconfig_DUMB (configcontrol : configcontrol_type);
00238      1  0 TYPE 
00239      1  0    shortinteger = [WORD] 0..65535;
00240      1  0 VAR
00241      1  0    flags : integer;
00242      1  0    w,p   : shortinteger;
00243      1  0    ch    : char;
00244      1  1 BEGIN
00245      1  2 WITH termfig DO CASE configcontrol OF
00246      1  3    CON:  BEGIN
00247      1  3          config.menu := false;
00248      1  3          IF memscreen = NIL THEN new (memscreen);
00249      1  3          LIB$SCREEN_INFO (flags,ch,w,p);
00250      1  3          IF w > 255 THEN w := 255;
00251      1  3          IF p > 255 THEN p := 255;
00252      1  3          colsize := w-4;
00253      1  3          rowsize := p-4;
00254      1  3          config.ch.width       := 65536 DIV termfig.colsize;
00255      1  3          config.ch.height      := 48000 DIV termfig.rowsize;
00256      1  3          config.ch.linespacing := 65536 DIV (termfig.colsize*4);
00257      1  3          config.ch.charspacing := 48000 DIV (termfig.rowsize*3);
00258      1  3          config.resolution := 2000;
00259      1  3          config.dotsize    := 0;
00260      1  3          config.starsize   := 64;
00261      1  3          config.ansi364    := false;
00262      1  3          config.drawblack  := false;
00263      1  2          END;
00264      1  3    QUE:  BEGIN
00265      1  3          readint ('ENTER NUMBER OF COLUMNS : ',colsize,1,251,colsize);
00266      1  3          readint ('ENTER NUMBER OF ROWS    : ',rowsize,1,251,rowsize);
00267      1  2          END;
00268      1  3    REP:  BEGIN
00269      1  3          writeline (out,'Number of columns is ' + strofi(colsize,3));
00270      1  3          writeline (out,'Number of rows    is ' + strofi(rowsize,3));
00271      1  2          END;
00272      1  1    END;
00273      0  0 END;
00274   C  0  0 {-----------------------------------------------------------------------------}
00275      0  0 END.

TERM_DUMB                                                       23-Dec-1988 10:02:33    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics   20-Jan-1988 10:43:05    DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TERM;11 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3578  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 16  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         6         2
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        49        40
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        27        13
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        49        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        40        40
DUA1:[QPLOT.QPLOT.SOURCE]TERM_CHAR.PEN;1                   7         7       100
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        26        36



TERM_ERGO301                                                    23-Dec-1988 10:03:59    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:35:20    [QPLOT.QPLOT.SOURCE]ERGO301.TERM;11 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:FIG',
00004      0  0                'QLIBHOME:TERM_VAX',
00005      0  0                'QLIBHOME:TERM_ANSI',
00006      0  0                'QLIBHOME:TERM_4010'),
00007      0  0   ENVIRONMENT ('QLIBHOME:ERGO301.TEN') ]
00008      0  0 MODULE term_ERGO301;
00009   C  0  0 {=============================================================================}
00010   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE ERGO301 -------------------------------------}
00011   C  0  0 {=============================================================================}
00012      0  0 [ GLOBAL ]
00013      1  0 FUNCTION termname_ERGO301 (i : integer) : devname_type;
00014      1  1 BEGIN
00015      1  2 CASE i OF
00016      1  2    0: termname_ERGO301 := '1';
00017      1  2    1: termname_ERGO301 := 'ERGO301 ';
00018      1  1    END;
00019      0  0 END;
00020   C  0  0 {-----------------------------------------------------------------------------}
00021      0  0 [ GLOBAL ]
00022      1  0 PROCEDURE colorsetup_ERGO301;
00023      1  1 BEGIN
00024      0  0 END;
00025   C  0  0 {-----------------------------------------------------------------------------}
00026      0  0 [ GLOBAL ]
00027      1  0 PROCEDURE executecom_ERGO301;
00028      1  0 VAR
00029      1  0    oldpos        : ipoint;
00030   C  1  0 {------------------------------}
00031      2  0 PROCEDURE bufferempty;
00032      2  1 BEGIN
00033      2  1 IF length(env.buffer) <> 0 
00034      2  1  THEN 
00035      2  2   BEGIN
00036      2  3   CASE env.mode OF
00037      2  3      M_TEXT,
00038      2  4      M_DUAL:  BEGIN
00039      2  4               qiowwrite (ESC + '[H' + ESC + '[J' + CRLF);
00040      2  4               qiowwrite (ESC + '1' + ESC + '*' + CRLF);
00041      2  3               END;
00042      2  2      END;
00043      2  2   env.mode := M_PLOT;
00044      2  2   qiowwrite (env.buffer + CRLF);
00045      2  2   env.buffer := '';
00046      2  1   END;
00047      1  0 END;
00048   C  1  0 {------------------------------}
00049      1  1 BEGIN
00050      1  2 WITH plotitem DO CASE ins OF
00051      1  2    I_col:  bufferempty;
00052      1  2    I_pan:  ;
00053      1  2    I_clo:  ;
00054      1  3    I_pos:  BEGIN
00055      1  3            bufferempty;

TERM_ERGO301                                                    23-Dec-1988 10:03:59    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:35:20    [QPLOT.QPLOT.SOURCE]ERGO301.TERM;11 (1)

-LINE-IDC-PL-SL-

00056      1  3            env.pos.ix := ix;
00057      1  3            env.pos.iy := iy;
00058      1  2            END;
00059      1  2    I_dra:  draw_4010(ix,iy,false,bufferempty); 
00060      1  2    I_siz:  ;
00061      1  2    I_mar:  ;
00062      1  2    I_pri:  IF env.visible AND (st <> '') 
00063      1  2             THEN 
00064      1  3              BEGIN
00065      1  3              bufferempty;
00066      1  3              env.buffer := chr(29) + strofpos_4010 (env.pos) 
00067      1  3                          + chr(31) + st;
00068      1  3              bufferempty;
00069      1  2              END;
00070      1  2    I_emp:  bufferempty;
00071      1  1    END;
00072      0  0 END;
00073   C  0  0 {-----------------------------------------------------------------------------}
00074      0  0 [ GLOBAL ]
00075      1  0 PROCEDURE writeterm_ERGO301 (str : VARYING [l2] OF char);
00076      1  1 BEGIN
00077      1  1 IF env.mode = M_PLOT
00078      1  1  THEN
00079      1  2   BEGIN
00080      1  2   env.mode := M_DUAL;
00081      1  2   qiowwrite (ESC + 'O' +  ESC + '2' + CRLF);
00082      1  1   END;
00083      1  1 qiowwritevirtual (str);
00084      0  0 END;
00085   C  0  0 {-----------------------------------------------------------------------------}
00086      0  0 [ GLOBAL ]
00087      1  0 PROCEDURE readterm_ERGO301 (VAR outstr : VARYING [l2] OF char);  
00088      1  1 BEGIN
00089      1  1 readterm_vax (outstr);
00090      0  0 END;
00091   C  0  0 {-----------------------------------------------------------------------------}
00092      0  0 [ GLOBAL ]
00093      1  0 PROCEDURE screenerase_ERGO301;
00094      1  1 BEGIN
00095      1  1 qiowwrite (ESC + '1' + ESC + '*' + CRLF);
00096      1  1 qiowwrite (ESC + chr(12));
00097      1  1 qiowwrite (ESC + chr(12) + ESC + 'O' + ESC + '2');
00098      1  1 qiowwrite (ESC + '[?3l');
00099      0  0 END;
00100   C  0  0 {-----------------------------------------------------------------------------}
00101      0  0 [ GLOBAL ]
00102      1  0 PROCEDURE screencopy_ERGO301;
00103      1  1 BEGIN
00104      1  1 screencopy_4010;
00105      0  0 END;
00106   C  0  0 {-----------------------------------------------------------------------------}
00107      0  0 [ GLOBAL ]
00108      1  0 PROCEDURE gin_ERGO301 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00109      1  0 VAR
00110      1  0    ip  : ipoint;

TERM_ERGO301                                                    23-Dec-1988 10:03:59    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 09:35:20    [QPLOT.QPLOT.SOURCE]ERGO301.TERM;11 (1)

-LINE-IDC-PL-SL-

00111      1  0    str : VARYING [20] OF char;
00112      1  1 BEGIN
00113      1  1 IF env.mode = M_DUAL 
00114      1  1  THEN
00115      1  2   BEGIN
00116      1  2   qiowwrite (ESC + '[H' + ESC + '[J' + CRLF);
00117      1  2   qiowwrite (ESC + '1' + ESC + '*' + CRLF);
00118      1  1   END;
00119      1  1 
00120      1  1 gin_4010 (key,ipt);
00121      1  1 
00122      1  1 qiowwrite (chr(31));
00123      1  1 IF key = ESC THEN qiowread (str);
00124      0  0 END;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      0  0 [GLOBAL]
00127      1  0 FUNCTION readmenu_ERGO301 (default : char;  toplevel : boolean;
00128      1  0    helpprefix : anystring) : command_type;
00129      1  1 BEGIN
00130      1  1 readmenu_ERGO301 := readmenu_ansi (default,toplevel,helpprefix,true);
00131      0  0 END;
00132   C  0  0 {-----------------------------------------------------------------------------}
00133      0  0 [ GLOBAL ]
00134      1  0 PROCEDURE termconfig_ERGO301 (configcontrol : configcontrol_type);
00135      1  1 BEGIN
00136      1  2 CASE configcontrol OF
00137      1  3    CON:  BEGIN
00138      1  3          config.ch := ch_type (878,1428,283,204);
00139      1  3          config.resolution := 204;
00140      1  3          config.dotsize    := 204;
00141      1  3          config.starsize   := 612;
00142      1  3          config.ansi364    := true;
00143      1  3          config.drawblack  := false;
00144      1  2          END;
00145      1  2    QUE:  ;
00146      1  2    REP:  ;
00147      1  1    END;
00148      0  0 END;
00149   C  0  0 {-----------------------------------------------------------------------------}
00150      0  0 END.

TERM_ERGO301                                                    23-Dec-1988 10:03:59    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:35:20    [QPLOT.QPLOT.SOURCE]ERGO301.TERM;11 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                4197  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        50        50
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        24        45
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        20        24



TERM_NONE                                                       23-Dec-1988 10:04:44    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:35:25    DUA1:[QPLOT.QPLOT.SOURCE]NONE.TERM;16 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STARLETQ',
00003      0  0                'QLIBHOME:STANDARD',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:STRING',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX'),
00008      0  0   ENVIRONMENT ('QLIBHOME:NONE.TEN') ]
00009      0  0 MODULE term_NONE (nonefile);
00010      0  0 [ HIDDEN ] VAR
00011      0  0    nonefile : text;
00012   C  0  0 {=============================================================================}
00013   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE NONE ----------------------------------------}
00014   C  0  0 {=============================================================================}
00015      0  0 [ GLOBAL ]
00016      1  0 FUNCTION termname_NONE (i : integer) : devname_type;
00017      1  1 BEGIN
00018      1  2 CASE i OF
00019      1  2    0: termname_NONE := '1';
00020      1  2    1: termname_NONE := 'NONE    ';
00021      1  1    END;
00022      0  0 END;
00023   C  0  0 {-----------------------------------------------------------------------------}
00024      0  0 [ GLOBAL ]
00025      1  0 PROCEDURE colorsetup_NONE;
00026      1  1 BEGIN
00027      0  0 END;
00028   C  0  0 {-----------------------------------------------------------------------------}
00029      0  0 [ GLOBAL ]
00030      1  0 PROCEDURE executecom_NONE;
00031      1  1 BEGIN
00032      0  0 END;
00033   C  0  0 {-----------------------------------------------------------------------------}
00034      0  0 [ GLOBAL ]
00035      1  0 PROCEDURE writeterm_NONE (str : VARYING [l2] OF char);
00036      1  1 BEGIN
00037      0  0 END;
00038   C  0  0 {-----------------------------------------------------------------------------}
00039      0  0 [ GLOBAL ]
00040      1  0 PROCEDURE readterm_NONE (VAR outstr : VARYING [l2] OF char);  
00041      1  1 BEGIN
00042      1  1 readln (nonefile,outstr);
00043      0  0 END;
00044   C  0  0 {-----------------------------------------------------------------------------}
00045      0  0 [ GLOBAL ]
00046      1  0 PROCEDURE screenerase_NONE;
00047      1  1 BEGIN
00048      0  0 END;
00049   C  0  0 {-----------------------------------------------------------------------------}
00050      0  0 [ GLOBAL ]
00051      1  0 PROCEDURE screencopy_NONE;
00052      1  1 BEGIN
00053      0  0 END;
00054   C  0  0 {-----------------------------------------------------------------------------}
00055      0  0 [ GLOBAL ]

TERM_NONE                                                       23-Dec-1988 10:04:44    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:35:25    DUA1:[QPLOT.QPLOT.SOURCE]NONE.TERM;16 (1)

-LINE-IDC-PL-SL-

00056      1  0 PROCEDURE gin_NONE (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00057      1  0 VAR
00058      1  0    line,s : anystring;
00059      1  0    p      : parse_type;
00060      1  1 BEGIN
00061      1  1 readln (nonefile,line);
00062      1  1 startparse (p,line);
00063      1  1 s := parse (p,' ');
00064      1  1 IF s <> '' THEN key := s[1] ELSE key := ' ';
00065      1  1 s := parse (p,' ');
00066      1  1 ipt.ix := iofstr (s);
00067      1  1 s := parse (p,' ');
00068      1  1 ipt.iy := iofstr (s);
00069      0  0 END;
00070   C  0  0 {-----------------------------------------------------------------------------}
00071      0  0 [ GLOBAL ]
00072      1  0 FUNCTION readmenu_NONE (default : char;  toplevel : boolean;
00073      1  0    helpprefix : anystring) : command_type;
00074      1  0 VAR
00075      1  0    st : anystring;
00076      1  1 BEGIN
00077      1  1 readln (nonefile,st);
00078      1  1 readmenu_NONE := st;
00079      0  0 END;
00080   C  0  0 {-----------------------------------------------------------------------------}
00081      0  0 [ GLOBAL ]
00082      1  0 PROCEDURE termconfig_NONE (configcontrol : configcontrol_type);
00083      1  1 BEGIN
00084      1  2 CASE configcontrol OF
00085      1  3    CON:  BEGIN
00086      1  3          open (nonefile,'SYS$INPUT');
00087      1  3          reset (nonefile);
00088      1  2          END;
00089      1  2    QUE:  ;
00090      1  2    REP:  ;
00091      1  1    END;
00092      0  0 END;
00093   C  0  0 {-----------------------------------------------------------------------------}
00094      0  0 END.

TERM_NONE                                                       23-Dec-1988 10:04:44    VAX Pascal V3.7-254                Page    3
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:35:25    DUA1:[QPLOT.QPLOT.SOURCE]NONE.TERM;16 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                 787  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 17  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STARLETQ.PEN;1                  260         0         0
DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        39        31
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204         0         0
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        22        31
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        14         7
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101         0         0



TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:GENERAL',
00004      0  0                'QLIBHOME:IO',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_ANSI',
00009      0  0                'QLIBHOME:TERM_4010'),
00010      0  0   ENVIRONMENT ('QLIBHOME:PCPLOT.TEN') ]
00011      0  0 MODULE term_PCPLOT;
00012   C  0  0 {=============================================================================}
00013   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE PCPLOT --------------------------------------}
00014   C  0  0 {=============================================================================}
00015      0  0 [ GLOBAL ]
00016      1  0 FUNCTION termname_PCPLOT (i : integer) : devname_type;
00017      1  1 BEGIN
00018      1  2 CASE i OF
00019      1  2    0: termname_PCPLOT := '1';
00020      1  2    1: termname_PCPLOT := 'PCPLOT  ';
00021      1  1    END;
00022      0  0 END;
00023   C  0  0 {-----------------------------------------------------------------------------}
00024      1  0 FUNCTION strofpos (ip : ipoint) : anystring;
00025      1  1 BEGIN
00026      1  1 strofpos := chr (ip.iy MOD 65536 DIV 3296 + 32) + 
00027      1  1             chr (ip.iy MOD 3296  DIV 103  + 96) +
00028      1  1             chr (ip.ix MOD 65536 DIV 3296 + 32) + 
00029      1  1             chr (ip.ix MOD 3296  DIV 103  + 64);
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      1  0 FUNCTION RGBIBofcolor (c : color_type) : anystring;
00033      1  0 VAR
00034      1  0    hlsa  : hlsa_type;
00035      1  0    RGBIB : anystring;
00036      1  1 BEGIN
00037      1  1 hlsa := hlsaofcolor (c);
00038      1  1 IF      hlsa.hue <  30 THEN RGBIB := '001'
00039      1  1 ELSE IF hlsa.hue <  90 THEN RGBIB := '011'
00040      1  1 ELSE IF hlsa.hue < 150 THEN RGBIB := '010'
00041      1  1 ELSE IF hlsa.hue < 210 THEN RGBIB := '110'
00042      1  1 ELSE IF hlsa.hue < 270 THEN RGBIB := '100'
00043      1  1 ELSE IF hlsa.hue < 330 THEN RGBIB := '101'
00044      1  1 ELSE                        RGBIB := '001';
00045      1  1 IF      hlsa.lightness > 80 THEN RGBIB := '1111'
00046      1  1 ELSE IF hlsa.lightness > 50 THEN RGBIB := RGBIB + '1'
00047      1  1 ELSE IF hlsa.lightness > 20 THEN RGBIB := RGBIB + '0'
00048      1  1 ELSE                             RGBIB := '0000';
00049      1  1 IF      hlsa.saturation > 50 THEN
00050      1  1 ELSE IF hlsa.lightness > 80 THEN RGBIB := '1111'
00051      1  1 ELSE IF hlsa.lightness > 50 THEN RGBIB := '1110'
00052      1  1 ELSE IF hlsa.lightness > 20 THEN RGBIB := '0001'
00053      1  1 ELSE                             RGBIB := '0000';
00054      1  2 CASE hlsa.attribute OF
00055      1  2    'C':  RGBIB := '00000';

TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

-LINE-IDC-PL-SL-

00056      1  2    'B':  RGBIB := RGBIB + '1';
00057      1  2    ' ':  RGBIB := RGBIB + '0';
00058      1  1    END;
00059      1  1 RGBIBofcolor := RGBIB;
00060      0  0 END;
00061   C  0  0 {-----------------------------------------------------------------------------}
00062      0  0 [ GLOBAL ]
00063      1  0 PROCEDURE colorsetup_PCPLOT;
00064      1  0 VAR
00065      1  0    st,RGBIB : anystring;
00066      1  1 BEGIN
00067      1  1 IF env.mode = M_TEXT
00068      1  1  THEN
00069      1  2   BEGIN
00070      1  2   st := '';
00071      1  2   wait (0.2);
00072      1  2   RGBIB := RGBIBofcolor ('TEXTBACK');
00073      1  2   IF RGBIB[1] = '1' THEN st := st + ';10';
00074      1  2   IF RGBIB[2] = '1' THEN st := st + ';11';
00075      1  2   IF RGBIB[3] = '1' THEN st := st + ';12';
00076      1  2   RGBIB := RGBIBofcolor ('TEXTCHAR');
00077      1  2   IF RGBIB[1] = '1' THEN st := st + ';13';
00078      1  2   IF RGBIB[2] = '1' THEN st := st + ';14';
00079      1  2   IF RGBIB[3] = '1' THEN st := st + ';15';
00080      1  2   IF RGBIB[4] = '1' THEN st := st + ';16';
00081      1  2   IF RGBIB[5] = '1' THEN st := st + ';17';
00082      1  2   qiowwrite (ESC + '[0;1;m');
00083      1  2   wait (0.2);
00084      1  2   qiowwrite (ESC + '[18;' + st + 'm');
00085      1  2   wait (0.2);
00086      1  2   END
00087      1  1  ELSE
00088      1  2   BEGIN
00089      1  1   END;
00090      0  0 END;
00091   C  0  0 {-----------------------------------------------------------------------------}
00092      0  0 [ GLOBAL ]
00093      1  0 PROCEDURE executecom_PCPLOT;
00094      1  0 VAR
00095      1  0    ch   : char;
00096      1  0    rgba : rgba_type;
00097   C  1  0 {------------------------------}
00098      2  0 PROCEDURE bufferempty;
00099      2  0 VAR
00100      2  0    ipt : ipoint;
00101      2  1 BEGIN
00102      2  2 CASE env.mode OF
00103      2  3    M_TEXT:  BEGIN
00104      2  3             wait (0.2);
00105      2  3             qiowwrite (ESC + FF);
00106      2  3             wait (0.2);
00107      2  2             END;
00108      2  3    M_DUAL:  BEGIN
00109      2  3             ipt.ix := 20000;
00110      2  3             ipt.iy := 20000;

TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

-LINE-IDC-PL-SL-

00111      2  3             qiowwrite (chr (29) + chr (31) + '  ' + CRLF);
00112      2  2             END;
00113      2  2    M_PLOT:  ;
00114      2  1    END;
00115      2  1 env.mode := M_PLOT;
00116      2  1 IF length (env.buffer) <> 0 
00117      2  1  THEN 
00118      2  2   BEGIN
00119      2  2   qiowwrite (env.buffer + CRLF);
00120      2  2   env.buffer := '';
00121      2  1   END;
00122      1  0 END;
00123   C  1  0 {------------------------------}
00124      2  0 PROCEDURE draw (ix,iy : integer);
00125      2  0 VAR
00126      2  0    oldstr,newstr : VARYING [80] OF char;
00127      2  1 BEGIN
00128      2  1 IF NOT env.visible
00129      2  1  THEN
00130      2  2   BEGIN
00131      2  2   bufferempty;
00132      2  2   env.pos.ix := ix;
00133      2  2   env.pos.iy := iy;
00134      2  2   END
00135      2  1  ELSE
00136      2  2   BEGIN
00137      2  2   IF length (env.buffer) > BUFFERSIZE-10 THEN bufferempty;
00138      2  2   oldstr := strofpos (env.pos);
00139      2  2   IF env.buffer = '' THEN env.buffer := chr(29) + oldstr;
00140      2  2   env.pos.ix := ix;
00141      2  2   env.pos.iy := iy;
00142      2  2   newstr := strofpos (env.pos);
00143      2  2   IF (newstr[1] <> oldstr[1]) OR (length(env.buffer)=5)
00144      2  2    THEN env.buffer := env.buffer + newstr[1];
00145      2  2   IF (newstr[3] <> oldstr[3]) OR (newstr[2] <> oldstr[2]) OR 
00146      2  2                                  (length(env.buffer)=6)
00147      2  2    THEN env.buffer := env.buffer + newstr[2];
00148      2  2   IF (newstr[3] <> oldstr[3]) OR (length(env.buffer)=7)
00149      2  2    THEN env.buffer := env.buffer + newstr[3];
00150      2  2   IF (newstr <> oldstr) OR (length(env.buffer)=8)
00151      2  2    THEN env.buffer := env.buffer + newstr[4];
00152      2  1   END;
00153      1  0 END;
00154   C  1  0 {------------------------------}
00155      1  1 BEGIN
00156      1  2 WITH plotitem DO CASE ins OF
00157      1  3    I_col:  BEGIN
00158      1  3            bufferempty;
00159      1  3            rgba := rgbaofhlsa (hlsaofcolor (st));
00160      1  4            CASE rgba.r >= 0.5 OF
00161      1  5               true:  CASE rgba.g >= 0.5 OF
00162      1  5                         true:  IF rgba.b >= 0.5 THEN ch := '0' ELSE ch := '4';
00163      1  5                         false: IF rgba.b >= 0.5 THEN ch := '6' ELSE ch := '1';
00164      1  4                         END;
00165      1  5               false: CASE rgba.g >= 0.5 OF

TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

-LINE-IDC-PL-SL-

00166      1  5                         true:  IF rgba.b >= 0.5 THEN ch := '5' ELSE ch := '2';
00167      1  5                         false: IF rgba.b >= 0.5 THEN ch := '3' ELSE ch := '7';
00168      1  4                         END;
00169      1  3               END;
00170      1  3            wait (0.2);
00171      1  3            env.buffer := chr(31) + chr(33) + 'COL C' + ch;
00172      1  3            bufferempty;
00173      1  2            END;
00174      1  2    I_pan:  ;
00175      1  2    I_clo:  ;
00176      1  3    I_pos:  BEGIN
00177      1  3            bufferempty;
00178      1  3            env.pos.ix := ix;
00179      1  3            env.pos.iy := iy;
00180      1  2            END;
00181      1  2    I_dra:  draw (ix,iy);
00182      1  2    I_siz:  ;
00183      1  2    I_mar:  ;
00184      1  2    I_pri:  IF env.visible AND (st <> '') 
00185      1  2             THEN 
00186      1  3              BEGIN
00187      1  3              bufferempty;
00188      1  3              env.buffer := chr(29) + strofpos (env.pos)  
00189      1  3                          + chr(31) + st;
00190      1  3              bufferempty;
00191      1  2              END;
00192      1  2    I_emp:  bufferempty;
00193      1  1    END;
00194      0  0 END;
00195   C  0  0 {-----------------------------------------------------------------------------}
00196      0  0 [ GLOBAL ]
00197      1  0 PROCEDURE writeterm_PCPLOT (str : VARYING [l2] OF char);
00198      1  1 BEGIN
00199      1  1 IF env.mode = M_PLOT
00200      1  1  THEN
00201      1  2   BEGIN
00202      1  2   env.mode := M_DUAL;
00203      1  2   qiowwrite (chr(29) + strofpos (ipoint(10,1000)) + chr(31) + CRLF);
00204      1  1   END;
00205      1  1 qiowwritevirtual (str);
00206      0  0 END;
00207   C  0  0 {-----------------------------------------------------------------------------}
00208      0  0 [ GLOBAL ]
00209      1  0 PROCEDURE readterm_PCPLOT (VAR outstr : VARYING [l2] OF char);  
00210      1  1 BEGIN
00211      1  1 readterm_vax (outstr);
00212      0  0 END;
00213   C  0  0 {-----------------------------------------------------------------------------}
00214      0  0 [ GLOBAL ]
00215      1  0 PROCEDURE screenerase_PCPLOT;
00216      1  1 BEGIN
00217      1  1 IF env.mode IN [M_PLOT,M_DUAL] THEN qiowwrite (ESC + FF);
00218      1  1 wait (0.2);
00219      1  1 screenerase_ansi;
00220      1  1 wait (0.1);

TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

-LINE-IDC-PL-SL-

00221      1  1 env.mode := M_TEXT;
00222      1  1 colorsetup_PCPLOT;
00223      1  1 wait (0.1);
00224      0  0 END;
00225   C  0  0 {-----------------------------------------------------------------------------}
00226      0  0 [ GLOBAL ]
00227      1  0 PROCEDURE screencopy_PCPLOT;
00228      1  1 BEGIN
00229      1  1 screencopy_4010;
00230      0  0 END;
00231   C  0  0 {-----------------------------------------------------------------------------}
00232      0  0 [ GLOBAL ]
00233      1  0 PROCEDURE gin_PCPLOT (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00234      1  0 VAR
00235      1  0    st : VARYING [20] OF char;
00236      1  1 BEGIN
00237      1  1 IF env.mode IN [M_DUAL,M_TEXT] 
00238      1  1  THEN qiowwrite (chr (29) + chr (31) + '  ' + CRLF);
00239      1  1 gin_4010 (key,ipt);
00240      1  1 ipt.ix := ipt.ix DIV 64 * 103;
00241      1  1 ipt.iy := ipt.iy DIV 64 * 103;
00242      0  0 END;
00243   C  0  0 {-----------------------------------------------------------------------------}
00244      0  0 [GLOBAL]
00245      1  0 FUNCTION readmenu_PCPLOT (default : char;  toplevel : boolean;
00246      1  0    helpprefix : anystring) : command_type;
00247      1  1 BEGIN
00248      1  1 readmenu_PCPLOT := readmenu_ansi (default,toplevel,helpprefix,false);
00249      0  0 END;
00250   C  0  0 {-----------------------------------------------------------------------------}
00251      0  0 [ GLOBAL ]
00252      1  0 PROCEDURE termconfig_PCPLOT (configcontrol : configcontrol_type);
00253      1  1 BEGIN
00254      1  2 CASE configcontrol OF
00255      1  3    CON:  BEGIN
00256      1  3          qiowwrite (ESC + FF);      { CODE TEK               }
00257      1  3          qiowwrite (ESC + '[?3l');
00258      1  3          config.ch := ch_type (800,1475,300,300);
00259      1  3          config.resolution := 103;
00260      1  3          config.dotsize    := 103;
00261      1  3          config.starsize   := 515;
00262      1  3          config.ansi364    := false;
00263      1  3          config.drawblack  := false;
00264      1  2          END;
00265      1  2    QUE:  ;
00266      1  2    REP:  ;
00267      1  1    END;
00268      0  0 END;
00269   C  0  0 {-----------------------------------------------------------------------------}
00270      0  0 END.

TERM_PCPLOT                                                     23-Dec-1988 10:05:17    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics   29-Mar-1988 14:44:25    [QPLOT.QPLOT.SOURCE]PCPLOT.TERM;29 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                5225  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        47        38
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         2        10
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        10         5
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        22        24
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        47        47
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84         7         8



TERM_TEK4010                                                    23-Dec-1988 10:06:22    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  20-Jan-1988 15:57:32    [QPLOT.QPLOT.SOURCE]TEK4010.TERM;12 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:FIG',
00004      0  0                'QLIBHOME:TERM_4010',
00005      0  0                'QLIBHOME:TERM_VAX'),
00006      0  0   ENVIRONMENT ('QLIBHOME:TEK4010.TEN') ]
00007      0  0 MODULE term_TEK4010;
00008   C  0  0 {=============================================================================}
00009   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4010 -------------------------------------}
00010   C  0  0 {=============================================================================}
00011      0  0 [ GLOBAL ]
00012      1  0 FUNCTION termname_TEK4010 (i : integer) : devname_type;
00013      1  1 BEGIN
00014      1  2 CASE i OF
00015      1  2    0: termname_TEK4010 := '1';
00016      1  2    1: termname_TEK4010 := 'TEK4010 ';
00017      1  1    END;
00018      0  0 END;
00019   C  0  0 {-----------------------------------------------------------------------------}
00020      0  0 [ GLOBAL ]
00021      1  0 PROCEDURE colorsetup_TEK4010;
00022      1  1 BEGIN
00023      0  0 END;
00024   C  0  0 {-----------------------------------------------------------------------------}
00025      0  0 [ GLOBAL ]
00026      1  0 PROCEDURE executecom_TEK4010;
00027      1  0 VAR
00028      1  0    h,l,s         : integer;
00029      1  0    a             : char;
00030      1  0    oldpos        : ipoint;
00031   C  1  0 {------------------------------}
00032      2  0 PROCEDURE bufferempty;
00033      2  1 BEGIN
00034      2  1 IF length(env.buffer) <> 0 
00035      2  1  THEN 
00036      2  2   BEGIN
00037      2  2   env.mode := M_PLOT;
00038      2  2   qiowwrite (env.buffer);
00039      2  2   env.buffer := '';
00040      2  1   END;
00041      1  0 END;
00042   C  1  0 {------------------------------}
00043      1  1 BEGIN
00044      1  2 WITH plotitem DO CASE ins OF
00045      1  2    I_col:  bufferempty;
00046      1  2    I_pan:  ;
00047      1  2    I_clo:  ;
00048      1  3    I_pos:  BEGIN
00049      1  3            bufferempty;
00050      1  3            env.pos.ix := ix;
00051      1  3            env.pos.iy := iy;
00052      1  2            END;
00053      1  2    I_dra:  draw_4010 (ix,iy,true,bufferempty);
00054      1  2    I_siz:  ;
00055      1  2    I_mar:  ;

TERM_TEK4010                                                    23-Dec-1988 10:06:22    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  20-Jan-1988 15:57:32    [QPLOT.QPLOT.SOURCE]TEK4010.TERM;12 (1)

-LINE-IDC-PL-SL-

00056      1  2    I_pri:  IF env.visible AND (st <> '') 
00057      1  2             THEN 
00058      1  3              BEGIN
00059      1  3              bufferempty;
00060      1  3              env.buffer := chr(29) + strofpos_4010 (env.pos) 
00061      1  3                          + chr(31) + st;
00062      1  3              bufferempty;
00063      1  2              END;
00064      1  2    I_emp:  bufferempty;
00065      1  1    END;
00066      0  0 END;
00067   C  0  0 {-----------------------------------------------------------------------------}
00068      0  0 [ GLOBAL ]
00069      1  0 PROCEDURE writeterm_TEK4010 (str : VARYING [l2] OF char);
00070      1  1 BEGIN
00071      1  1 writeterm_4010 (str);
00072      0  0 END;
00073   C  0  0 {-----------------------------------------------------------------------------}
00074      0  0 [ GLOBAL ]
00075      1  0 PROCEDURE readterm_TEK4010 (VAR outstr : VARYING [l2] OF char);  
00076      1  1 BEGIN
00077      1  1 readterm_vax (outstr);
00078      0  0 END;
00079   C  0  0 {-----------------------------------------------------------------------------}
00080      0  0 [ GLOBAL ]
00081      1  0 PROCEDURE screenerase_TEK4010;
00082      1  1 BEGIN
00083      1  1 screenerase_4010;
00084      0  0 END;
00085   C  0  0 {-----------------------------------------------------------------------------}
00086      0  0 [ GLOBAL ]
00087      1  0 PROCEDURE screencopy_TEK4010;
00088      1  1 BEGIN
00089      1  1 screencopy_4010;
00090      0  0 END;
00091   C  0  0 {-----------------------------------------------------------------------------}
00092      0  0 [ GLOBAL ]
00093      1  0 PROCEDURE gin_TEK4010 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00094      1  1 BEGIN
00095      1  1 gin_4010 (key,ipt);
00096      0  0 END;
00097   C  0  0 {-----------------------------------------------------------------------------}
00098      0  0 [ GLOBAL ]
00099      1  0 FUNCTION readmenu_TEK4010 (default : char;  toplevel : boolean;
00100      1  0    helpprefix : anystring) : command_type;
00101      1  1 BEGIN
00102      1  1 readmenu_TEK4010 := readmenu_4010 (default,toplevel,helpprefix,menuprep_4010);
00103      0  0 END;
00104   C  0  0 {-----------------------------------------------------------------------------}
00105      0  0 [ GLOBAL ]
00106      1  0 PROCEDURE termconfig_TEK4010 (configcontrol : configcontrol_type);
00107      1  1 BEGIN
00108      1  2 CASE configcontrol OF
00109      1  3    CON:  BEGIN
00110      1  3          config.ch := ch_type (800,1475,300,300);

TERM_TEK4010                                                    23-Dec-1988 10:06:22    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  20-Jan-1988 15:57:32    [QPLOT.QPLOT.SOURCE]TEK4010.TERM;12 (1)

-LINE-IDC-PL-SL-

00111      1  3          config.resolution := 64;
00112      1  3          config.dotsize    := 64;
00113      1  3          config.starsize   := 320;
00114      1  3          config.ansi364    := false;
00115      1  3          config.drawblack  := false;
00116      1  2          END;
00117      1  2    QUE:  ;
00118      1  2    REP:  ;
00119      1  1    END;
00120      0  0 END;
00121   C  0  0 {=============================================================================}
00122      0  0 END.

TERM_TEK4010                                                    23-Dec-1988 10:06:22    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   20-Jan-1988 15:57:32    [QPLOT.QPLOT.SOURCE]TEK4010.TERM;12 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                1356  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        39        31
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        47        56
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        32        32



TERM_TEK4014                                                    23-Dec-1988 10:07:14    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  20-Nov-1987 14:38:08    [QPLOT.QPLOT.SOURCE]TEK4014.TERM;13 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:GENERAL',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_4010'),
00009      0  0   ENVIRONMENT ('QLIBHOME:TEK4014.TEN') ]
00010      0  0 MODULE term_TEK4014;
00011      0  0 [ HIDDEN ] VAR
00012      0  0    termfig       : RECORD
00013      0  0                    charsize : char;
00014      0  0                    END := (';');
00015   C  0  0 {=============================================================================}
00016   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4014 -------------------------------------}
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION termname_TEK4014 (i : integer) : devname_type;
00020      1  1 BEGIN
00021      1  2 CASE i OF
00022      1  2    0: termname_TEK4014 := '1';
00023      1  2    1: termname_TEK4014 := 'TEK4014 ';
00024      1  1    END;
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 PROCEDURE colorsetup_TEK4014;
00029      1  1 BEGIN
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      0  0 [ GLOBAL ]
00033      1  0 PROCEDURE executecom_TEK4014;
00034   C  1  0 {------------------------------}
00035      2  0 PROCEDURE bufferempty;
00036      2  1 BEGIN
00037      2  1 IF length (env.buffer) <> 0 
00038      2  1  THEN 
00039      2  2   BEGIN
00040      2  2   env.mode := M_PLOT;
00041      2  2   qiowwrite (env.buffer);
00042      2  2   env.buffer := '';
00043      2  1   END;
00044      1  0 END;
00045   C  1  0 {------------------------------}
00046      1  1 BEGIN
00047      1  2 WITH plotitem DO CASE ins OF
00048      1  3    I_col:  BEGIN
00049      1  3            bufferempty;
00050      1  3            IF env.visible THEN qiowwrite (ESC + chofcolor_4010 (st));
00051      1  2            END;
00052      1  2    I_pan:  ;
00053      1  2    I_clo:  ;
00054      1  3    I_pos:  BEGIN
00055      1  3            bufferempty;

TERM_TEK4014                                                    23-Dec-1988 10:07:14    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  20-Nov-1987 14:38:08    [QPLOT.QPLOT.SOURCE]TEK4014.TERM;13 (1)

-LINE-IDC-PL-SL-

00056      1  3            env.pos.ix := ix;
00057      1  3            env.pos.iy := iy;
00058      1  2            END;
00059      1  2    I_dra:  draw_4010(ix,iy,true,bufferempty);
00060      1  2    I_siz:  ;
00061      1  2    I_mar:  ;
00062      1  2    I_pri:  IF env.visible AND (st <> '') 
00063      1  2             THEN 
00064      1  3              BEGIN
00065      1  3              bufferempty;
00066      1  3              env.buffer := ESC + termfig.charsize 
00067      1  3                          + chr(29) + strofpos_4010 (env.pos) 
00068      1  3                          + chr(31) + st;
00069      1  3              bufferempty;
00070      1  2              END;
00071      1  2    I_emp:  bufferempty;
00072      1  1    END;
00073      0  0 END;
00074   C  0  0 {-----------------------------------------------------------------------------}
00075      0  0 [ GLOBAL ]
00076      1  0 PROCEDURE writeterm_TEK4014 (str : VARYING [l2] OF char);
00077      1  1 BEGIN
00078      1  1 writeterm_4010 (str);
00079      0  0 END;
00080   C  0  0 {-----------------------------------------------------------------------------}
00081      0  0 [ GLOBAL ]
00082      1  0 PROCEDURE readterm_TEK4014 (VAR outstr : VARYING [l2] OF char);  
00083      1  1 BEGIN
00084      1  1 readterm_vax (outstr);
00085      0  0 END;
00086   C  0  0 {-----------------------------------------------------------------------------}
00087      0  0 [ GLOBAL ]
00088      1  0 PROCEDURE screenerase_TEK4014;
00089      1  1 BEGIN
00090      1  1 screenerase_4010;
00091      1  1 qiowwrite (ESC + termfig.charsize);
00092      0  0 END;
00093   C  0  0 {-----------------------------------------------------------------------------}
00094      0  0 [ GLOBAL ]
00095      1  0 PROCEDURE screencopy_TEK4014;
00096      1  1 BEGIN
00097      1  1 screencopy_4010;
00098      0  0 END;
00099   C  0  0 {-----------------------------------------------------------------------------}
00100      0  0 [ GLOBAL ]
00101      1  0 PROCEDURE gin_TEK4014 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00102      1  1 BEGIN
00103      1  1 gin_4010 (key,ipt);
00104      0  0 END;
00105   C  0  0 {-----------------------------------------------------------------------------}
00106      0  0 [ GLOBAL ]
00107      1  0 FUNCTION readmenu_TEK4014 (default : char;  toplevel : boolean;
00108      1  0    helpprefix : anystring) : command_type;
00109      1  1 BEGIN
00110      1  1 readmenu_TEK4014 := readmenu_4010 (default,toplevel,helpprefix,menuprep_4010);

TERM_TEK4014                                                    23-Dec-1988 10:07:14    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  20-Nov-1987 14:38:08    [QPLOT.QPLOT.SOURCE]TEK4014.TERM;13 (1)

-LINE-IDC-PL-SL-

00111      0  0 END;
00112   C  0  0 {-----------------------------------------------------------------------------}
00113      0  0 [ GLOBAL ]
00114      1  0 PROCEDURE termconfig_TEK4014 (configcontrol : configcontrol_type);
00115      1  1 BEGIN
00116      1  2 WITH termfig DO CASE configcontrol OF
00117      1  3    CON:  BEGIN
00118      1  4          CASE termfig.charsize OF
00119      1  4             ';':  config.ch := ch_type (496,768,96,208);
00120      1  4             ':':  config.ch := ch_type (544,848,64,176);
00121      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00122      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00123      1  3             END;
00124      1  3          config.resolution := 64;
00125      1  3          config.dotsize    := 64;
00126      1  3          config.starsize   := 320;
00127      1  3          config.ansi364    := false;
00128      1  3          config.drawblack  := false;
00129      1  2          END;
00130      1  3    QUE:  BEGIN
00131      1  3          readch ('ENTER TEK CHARACTER SIZE CODE : ',charsize,'89:;',charsize);
00132      1  4          CASE termfig.charsize OF
00133      1  4             ';':  config.ch := ch_type (496,768,96,208);
00134      1  4             ':':  config.ch := ch_type (544,848,64,176);
00135      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00136      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00137      1  3             END;
00138      1  2          END;
00139      1  2    REP:  writeline (out,'Character size code is "' + charsize + '"');
00140      1  1    END;
00141      0  0 END;
00142   C  0  0 {-----------------------------------------------------------------------------}
00143      0  0 END.

TERM_TEK4014                                                    23-Dec-1988 10:07:14    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   20-Nov-1987 14:38:08    [QPLOT.QPLOT.SOURCE]TEK4014.TERM;13 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                2101  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  1  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        41        33
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        26        13
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         0         0
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93         0         0
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        40        40
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        46        55



TERM_TEK4016                                                    23-Dec-1988 10:07:53    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:35:42    [QPLOT.QPLOT.SOURCE]TEK4016.TERM;19 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:FIG',
00005      0  0                'QLIBHOME:TERM_VAX',
00006      0  0                'QLIBHOME:TERM_4010',
00007      0  0                'QLIBHOME:TERM_4100'),
00008      0  0   ENVIRONMENT ('QLIBHOME:TEK4016.TEN') ]
00009      0  0 MODULE term_TEK4016;
00010      0  0 [ HIDDEN ] VAR
00011      0  0    termfig       : RECORD
00012      0  0                    charsize : char;
00013      0  0                    END 
00014      0  0                  := (';');
00015   C  0  0 {=============================================================================}
00016   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4016 -------------------------------------}
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION termname_TEK4016 (i : integer) : devname_type;
00020      1  1 BEGIN
00021      1  2 CASE i OF
00022      1  2    0: termname_TEK4016 := '1';
00023      1  2    1: termname_TEK4016 := 'TEK4016 ';
00024      1  1    END;
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 PROCEDURE colorsetup_TEK4016;
00029      1  1 BEGIN
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      0  0 [ GLOBAL ]
00033      1  0 PROCEDURE executecom_TEK4016;
00034      1  0 VAR
00035      1  0    h,l,s         : integer;
00036      1  0    a             : char;
00037      1  0    temp          : boolean;
00038      1  0    oldpos        : ipoint;
00039      1  0    oldstr,newstr : VARYING [80] OF char;
00040   C  1  0 {------------------------------}
00041      2  0 PROCEDURE bufferempty;
00042      2  1 BEGIN
00043      2  1 IF length(env.buffer) <> 0 
00044      2  1  THEN 
00045      2  2   BEGIN
00046      2  2   env.mode := M_PLOT;
00047      2  2   qiowwrite (env.buffer + CRLF);
00048      2  2   env.buffer := '';
00049      2  1   END;
00050      1  0 END;
00051   C  1  0 {------------------------------}
00052      1  1 BEGIN
00053      1  1 temp := false;
00054      1  2 WITH plotitem DO CASE ins OF
00055      1  3    I_col:  BEGIN

TERM_TEK4016                                                    23-Dec-1988 10:07:53    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:35:42    [QPLOT.QPLOT.SOURCE]TEK4016.TERM;19 (1)

-LINE-IDC-PL-SL-

00056      1  3            bufferempty;
00057      1  3            IF env.visible THEN qiowwrite (ESC + chofcolor_4010 (st));
00058      1  2            END;
00059      1  2    I_pan:  ;
00060      1  2    I_clo:  ;
00061      1  3    I_pos:  BEGIN
00062      1  3            bufferempty;
00063      1  3            env.pos.ix := ix;
00064      1  3            env.pos.iy := iy;
00065      1  2            END;
00066      1  2    I_dra:  draw_4100 (ix,iy,temp,bufferempty);
00067      1  2    I_siz:  ;
00068      1  2    I_mar:  ;
00069      1  2    I_pri:  IF env.visible AND (st <> '') 
00070      1  2             THEN 
00071      1  3              BEGIN
00072      1  3              bufferempty;
00073      1  3              env.buffer := ESC + termfig.charsize 
00074      1  3                          + chr(29) + strofpos_4100 (env.pos)
00075      1  3                          + chr(31) + st;
00076      1  3              bufferempty;
00077      1  2              END;
00078      1  2    I_emp:  bufferempty;
00079      1  1    END;
00080      0  0 END;
00081   C  0  0 {-----------------------------------------------------------------------------}
00082      0  0 [ GLOBAL ]
00083      1  0 PROCEDURE writeterm_TEK4016 (str : VARYING [l2] OF char);
00084      1  1 BEGIN
00085      1  1 writeterm_4010 (str);
00086      0  0 END;
00087   C  0  0 {-----------------------------------------------------------------------------}
00088      0  0 [ GLOBAL ]
00089      1  0 PROCEDURE readterm_TEK4016 (VAR outstr : VARYING [l2] OF char);  
00090      1  1 BEGIN
00091      1  1 readterm_vax (outstr);
00092      0  0 END;
00093   C  0  0 {-----------------------------------------------------------------------------}
00094      0  0 [ GLOBAL ]
00095      1  0 PROCEDURE screenerase_TEK4016;
00096      1  1 BEGIN
00097      1  1 screenerase_4010;
00098      0  0 END;
00099   C  0  0 {-----------------------------------------------------------------------------}
00100      0  0 [ GLOBAL ]
00101      1  0 PROCEDURE screencopy_TEK4016;
00102      1  1 BEGIN
00103      1  1 screencopy_4010;
00104      0  0 END;
00105   C  0  0 {-----------------------------------------------------------------------------}
00106      0  0 [ GLOBAL ]
00107      1  0 PROCEDURE gin_TEK4016 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00108      1  1 BEGIN
00109      1  1 gin_4010 (key,ipt);
00110      0  0 END;

TERM_TEK4016                                                    23-Dec-1988 10:07:53    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 09:35:42    [QPLOT.QPLOT.SOURCE]TEK4016.TERM;19 (1)

-LINE-IDC-PL-SL-

00111   C  0  0 {-----------------------------------------------------------------------------}
00112      0  0 [ GLOBAL ]
00113      1  0 FUNCTION readmenu_TEK4016 (default : char;  toplevel : boolean;
00114      1  0    helpprefix : anystring) : command_type;
00115      1  1 BEGIN
00116      1  1 readmenu_TEK4016 := readmenu_4010 (default,toplevel,helpprefix,menuprep_4010);
00117      0  0 END;
00118   C  0  0 {-----------------------------------------------------------------------------}
00119      0  0 [ GLOBAL ]
00120      1  0 PROCEDURE termconfig_TEK4016 (configcontrol : configcontrol_type);
00121      1  1 BEGIN
00122      1  2 WITH termfig DO CASE configcontrol OF
00123      1  3    CON:  BEGIN
00124      1  4          CASE termfig.charsize OF
00125      1  4             ';':  config.ch := ch_type (496,768,96,208);
00126      1  4             ':':  config.ch := ch_type (544,848,64,176);
00127      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00128      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00129      1  3             END;
00130      1  3          config.resolution := 16;
00131      1  3          config.dotsize    := 64;
00132      1  3          config.starsize   := 320;
00133      1  3          config.ansi364    := false;
00134      1  3          config.drawblack  := false;
00135      1  2          END;
00136      1  3    QUE:  BEGIN;
00137      1  3          readch ('ENTER TEK CHARACTER SIZE CODE : ',charsize,'89:;',charsize);
00138      1  4          CASE termfig.charsize OF
00139      1  4             ';':  config.ch := ch_type (496,768,96,208);
00140      1  4             ':':  config.ch := ch_type (544,848,64,176);
00141      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00142      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00143      1  3             END;
00144      1  2          END;
00145      1  2    REP:  writeline (out,'Character size code is "' + charsize + '"');
00146      1  1    END;
00147      0  0 END;
00148   C  0  0 {-----------------------------------------------------------------------------}
00149      0  0 END.

TERM_TEK4016                                                    23-Dec-1988 10:07:53    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:35:42    [QPLOT.QPLOT.SOURCE]TEK4016.TERM;19 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                2204  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  1  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        26        13
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        40        40
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        37        44
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        16        14



TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_ANSI',
00009      0  0                'QLIBHOME:TERM_4010',
00010      0  0                'QLIBHOME:TERM_4100'),
00011      0  0   ENVIRONMENT ('QLIBHOME:TEK4105.TEN') ]
00012      0  0 MODULE term_TEK4105;
00013   C  0  0 {=============================================================================}
00014   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4105 -------------------------------------}
00015   C  0  0 {=============================================================================}
00016      0  0 [ HIDDEN ] VAR
00017      0  0    panelopen     : boolean := false;
00018      0  0    termfig       : RECORD;
00019      0  0                    dialoglines   : integer;
00020      0  0                    END := (30);
00021   C  0  0 {=============================================================================}
00022      0  0 [ GLOBAL ]
00023      1  0 FUNCTION termname_TEK4105 (i : integer) : devname_type;
00024      1  1 BEGIN
00025      1  2 CASE i OF
00026      1  2    0: termname_TEK4105 := '12';
00027      1  2    1: termname_TEK4105 := 'TEK4105 ';
00028      1  2    2: termname_TEK4105 := 'EM4105  ';
00029      1  1    END;
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      1  0 PROCEDURE colorsetup_EM4105 (colors,intensities : integer;  
00033      1  0    candoblink : boolean);
00034   C  1  0 {------------------------------}
00035      2  0 PROCEDURE bufferempty;
00036      2  1 BEGIN
00037      2  1 qiowwrite (env.buffer + CRLF);
00038      2  1 env.buffer := '';
00039      1  0 END;
00040   C  1  0 {------------------------------}
00041      1  1 BEGIN
00042      1  1 initpalette (termpalette,colors,intensities,candoblink);
00043      1  1 IF env.mode = M_TEXT
00044      1  1  THEN
00045      1  2   BEGIN
00046      1  2   getcolorindex_4100 (termpalette,'TEXTBACK',bufferempty);
00047      1  2   qiowwrite (ESC + 'TG4'  + '0' + strofcolor_4100 ('TEXTBACK',false));
00048      1  2   qiowwrite (ESC + 'TG4'  + '1' + strofcolor_4100 ('TEXTBOX',false));
00049      1  2   qiowwrite (ESC + 'TG4'  + '2' + strofcolor_4100 ('TEXTCHAR',false));
00050      1  2   qiowwrite (ESC + 'TG4'  + '3' + strofcolor_4100 ('CURSOR_1',false));
00051      1  2   qiowwrite (ESC + 'TG4'  + '4' + strofcolor_4100 ('CURSOR_2',false));
00052      1  2   qiowwrite (ESC + 'LI210');
00053      1  2   qiowwrite (ESC + 'TD34');
00054      1  2   END
00055      1  1  ELSE

TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

-LINE-IDC-PL-SL-

00056      1  2   BEGIN
00057      1  2   getcolorindex_4100 (termpalette,'PLOTBACK',bufferempty);
00058      1  2   qiowwrite (ESC + 'TG4'  + '0' + strofcolor_4100 ('BLACK',false));
00059      1  2   qiowwrite (ESC + 'TG4'  + '1' + strofcolor_4100 ('OVERBOX',false));
00060      1  2   qiowwrite (ESC + 'TG4'  + '2' + strofcolor_4100 ('OVERCHAR',false));
00061      1  2   qiowwrite (ESC + 'TG4'  + '3' + strofcolor_4100 ('CURSOR_1',false));
00062      1  2   qiowwrite (ESC + 'TG4'  + '4' + strofcolor_4100 ('CURSOR_2',false));
00063      1  2   IF clearcolor ('OVERBOX') 
00064      1  2    THEN qiowwrite (ESC + 'LI200')
00065      1  2    ELSE qiowwrite (ESC + 'LI210');
00066      1  1   END;
00067      0  0 END;
00068   C  0  0 {-----------------------------------------------------------------------------}
00069      0  0 [ GLOBAL ]
00070      1  0 PROCEDURE colorsetup_TEK4105;
00071      1  1 BEGIN
00072      1  1 IF terminal.name = 'EM4105  '
00073      1  1  THEN colorsetup_EM4105 (16,4,false)
00074      1  1  ELSE colorsetup_4100 (8,4,false);
00075      0  0 END;
00076   C  0  0 {-----------------------------------------------------------------------------}
00077      0  0 [ GLOBAL ]
00078      1  0 PROCEDURE executecom_TEK4105;
00079      1  0 VAR
00080      1  0    ii,j          : integer;
00081      1  0    oldpos        : ipoint;
00082   C  1  0 {------------------------------}
00083      2  0 PROCEDURE bufferempty;
00084      2  1 BEGIN
00085      2  2 CASE env.mode OF
00086      2  3    M_TEXT:  BEGIN
00087      2  3             qiowwrite (ESC + '%!0'      { CODE TEK               }
00088      2  3                      + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00089      2  3             env.mode := M_PLOT;
00090      2  3             colorsetup_TEK4105;
00091      2  3             IF config.overlaykill 
00092      2  3              THEN qiowwrite (ESC + 'LV0');     { DIALOG AREA INVISIBLE  }
00093      2  2             END;
00094      2  2    M_DUAL:  IF config.overlaykill
00095      2  2              THEN qiowwrite (ESC + 'LV0');     { DIALOG AREA INVISIBLE  }
00096      2  2    M_PLOT:  ;
00097      2  1    END;
00098      2  1 env.mode := M_PLOT;
00099      2  1 IF length (env.buffer) <> 0 
00100      2  1  THEN 
00101      2  2   BEGIN
00102      2  2   qiowwrite (env.buffer + CRLF);
00103      2  2   env.buffer := '';
00104      2  1   END;
00105      1  0 END;
00106   C  1  0 {------------------------------}
00107      1  1 BEGIN
00108      1  2 WITH plotitem DO CASE ins OF
00109      1  3    I_col:  BEGIN
00110      1  3            bufferempty;

TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

-LINE-IDC-PL-SL-

00111      1  3            IF env.visible
00112      1  3             THEN 
00113      1  4              BEGIN
00114      1  4              j := getcolorindex_4100 (termpalette,st,bufferempty);
00115      1  4              env.buffer := ESC + 'ML' + strofi_4100 (j-1)
00116      1  4                          + ESC + 'MT' + strofi_4100 (j-1);
00117      1  3              END;
00118      1  3            bufferempty;
00119      1  2            END;
00120      1  3    I_pan:  BEGIN
00121      1  3            bufferempty;
00122      1  3            j := getcolorindex_4100 (termpalette,st,bufferempty);
00123      1  3            panelopen := j > 0;
00124      1  3            IF panelopen
00125      1  3             THEN env.buffer := ESC + 'MP' + strofi_4100 (1-j);
00126      1  3            bufferempty;
00127      1  2            END;
00128      1  3    I_clo:  BEGIN
00129      1  3            bufferempty;
00130      1  3            env.buffer := ESC + 'LE';
00131      1  3            bufferempty;
00132      1  2            END;
00133      1  3    I_pos:  BEGIN
00134      1  3            bufferempty;
00135      1  3            env.pos.ix := ix;
00136      1  3            env.pos.iy := iy;
00137      1  2            END;
00138      1  2    I_dra:  draw_4100(ix,iy,panelopen,bufferempty);
00139      1  2    I_siz:  ;
00140      1  2    I_mar:  ;
00141      1  2    I_pri:  IF env.visible AND (st <> '') 
00142      1  2             THEN 
00143      1  3              BEGIN
00144      1  3              bufferempty;
00145      1  3              env.buffer := chr(29) + strofpos_4100 (env.pos) 
00146      1  3                          + ESC + 'LT' + strofi_4100 (length(st)) 
00147      1  3                          + st;
00148      1  3              bufferempty;
00149      1  2              END;
00150      1  2    I_emp:  bufferempty;
00151      1  1    END;
00152      0  0 END;
00153   C  0  0 {-----------------------------------------------------------------------------}
00154      0  0 [ GLOBAL ]
00155      1  0 PROCEDURE writeterm_TEK4105 (str : VARYING [l2] OF char);
00156      1  1 BEGIN
00157      1  1 writeterm_4100 (str,termfig.dialoglines);
00158      0  0 END;
00159   C  0  0 {-----------------------------------------------------------------------------}
00160      0  0 [ GLOBAL ]
00161      1  0 PROCEDURE readterm_TEK4105 (VAR outstr : VARYING [l2] OF char);  
00162      1  1 BEGIN
00163      1  1 readterm_vax (outstr);
00164      0  0 END;
00165   C  0  0 {-----------------------------------------------------------------------------}

TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

-LINE-IDC-PL-SL-

00166      0  0 [ GLOBAL ]
00167      1  0 PROCEDURE screenerase_TEK4105;
00168      1  1 BEGIN
00169      1  1 env.mode := M_TEXT;
00170      1  1 qiowwrite (ESC + '%!0'      { CODE TEK               }
00171      1  1          + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00172      1  1 colorsetup_TEK4105;
00173      1  1 qiowwrite (ESC + 'KA0'      { DIALOG AREA DISABLE    }
00174      1  1          + ESC + 'LZ'       { DIALOG AREA CLEAR      }
00175      1  1          + ESC + chr(12));
00176      1  1 qiowwrite (ESC + '%!2');
00177      1  1 screenerase_ansi;
00178      0  0 END;
00179   C  0  0 {-----------------------------------------------------------------------------}
00180      0  0 [ GLOBAL ]
00181      1  0 PROCEDURE screencopy_TEK4105;
00182      1  1 BEGIN
00183      1  1 qiowwrite (ESC + 'KH1');
00184      0  0 END;
00185   C  0  0 {-----------------------------------------------------------------------------}
00186      0  0 [ GLOBAL ]
00187      1  0 PROCEDURE gin_TEK4105 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00188      1  0 VAR
00189      1  0    str    : VARYING [20] OF char;
00190      1  1 BEGIN
00191      1  2 CASE env.mode OF
00192      1  2    M_TEXT:  qiowwrite (ESC + '%!0');
00193      1  2    M_PLOT,
00194      1  3    M_DUAL:  BEGIN
00195      1  3             IF config.overlaykill THEN qiowwrite (ESC + 'LV0');
00196      1  3             env.mode := M_PLOT;
00197      1  2             END;
00198      1  1    END;
00199      1  1 IF color <> '' THEN qiowwrite (ESC + 'TC' + strofcolor_4100 (color,false));
00200   C  1  1 { THIS IS 4010 METHOD }
00201      1  1 qiowwrite (ESC + chr(26));
00202      1  1 str := '     ';
00203      1  1 qiowreadnoechopurge (str,5);
00204      1  1 key := str[1];
00205      1  1 ipt.ix  := (ord(str[2]) MOD 32) * 2048 + (ord(str[3]) MOD 32) * 64;
00206      1  1 ipt.iy  := (ord(str[4]) MOD 32) * 2048 + (ord(str[5]) MOD 32) * 64;
00207      1  1 qiowwrite (LF);
00208      0  0 END;
00209   C  0  0 {-----------------------------------------------------------------------------}
00210      0  0 [GLOBAL]
00211      1  0 FUNCTION readmenu_TEK4105 (default : char;  toplevel : boolean;
00212      1  0    helpprefix : anystring) : command_type;
00213      1  1 BEGIN
00214      1  1 readmenu_TEK4105 := readmenu_ansi (default,toplevel,helpprefix,
00215      1  1    terminal.name <> 'EM4105  ');
00216      0  0 END;
00217   C  0  0 {-----------------------------------------------------------------------------}
00218      0  0 [ GLOBAL ]
00219      1  0 PROCEDURE termconfig_TEK4105 (configcontrol : configcontrol_type);
00220      1  1 BEGIN

TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

-LINE-IDC-PL-SL-

00221      1  2 WITH termfig DO CASE configcontrol OF
00222      1  3    CON:  BEGIN
00223      1  3          qiowwrite (ESC + '%!0'      { CODE TEK               }
00224      1  3                   + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00225      1  3          colorsetup_TEK4105;
00226      1  3          qiowwrite (ESC + '%!2');     { CODE EDIT              }
00227      1  3          config.ch := ch_type (820,1320,192,192);
00228      1  3          config.resolution := 150;
00229      1  3          config.dotsize    := 0;
00230      1  3          config.starsize   := 512;
00231      1  3          config.ansi364    := true;
00232      1  3          config.drawblack  := true;
00233      1  2          END;
00234      1  2    QUE:  readint ('ENTER NUMBER OF DIALOG AREA LINES : ',
00235      1  2                    dialoglines,3,100,dialoglines);
00236      1  2    REP:  writeline (out,'NUMBER OF DIALOG LINES IS ' + strofi(dialoglines,3));
00237      1  1    END;
00238      0  0 END;
00239   C  0  0 {-----------------------------------------------------------------------------}
00240      0  0 END.

TERM_TEK4105                                                    23-Dec-1988 10:08:39    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 14:22:28    [QPLOT.QPLOT.SOURCE]TEK4105.TERM;32 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                6714  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  8  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        47        38
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        27        13
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        26        28
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        58        27
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        46        46
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84         0         0
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        57        51



TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_ANSI',
00009      0  0                'QLIBHOME:TERM_4100',
00010      0  0                'QLIBHOME:TEK4510.TEN'),
00011      0  0   ENVIRONMENT ('QLIBHOME:TEK4106.TEN') ]
00012      0  0 MODULE term_TEK4106;
00013   C  0  0 {=============================================================================}
00014   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4106 -------------------------------------}
00015   C  0  0 {=============================================================================}
00016      0  0 [ HIDDEN ] VAR
00017      0  0    panelopen     : boolean := false;
00018      0  0    termfig       : RECORD;
00019      0  0                    dialoglines   : integer;
00020      0  0                    harddevice    : char;
00021      0  0                    tek469Xsize   : char;
00022      0  0                    tek4510source : char;
00023      0  0                    tek4510copy   : char;
00024      0  0                    END 
00025      0  0                  := (30,'A','L','V','N');
00026   C  0  0 {=============================================================================}
00027      0  0 [ GLOBAL ]
00028      1  0 FUNCTION termname_TEK4106 (i : integer) : devname_type;
00029      1  1 BEGIN
00030      1  2 CASE i OF
00031      1  2    0: termname_TEK4106 := '1';
00032      1  2    1: termname_TEK4106 := 'TEK4106 ';
00033      1  1    END;
00034      0  0 END;
00035   C  0  0 {-----------------------------------------------------------------------------}
00036      0  0 [ GLOBAL ]
00037      1  0 PROCEDURE colorsetup_TEK4106;
00038      1  1 BEGIN
00039      1  1 colorsetup_4100 (16,4,true);
00040      0  0 END;
00041   C  0  0 {-----------------------------------------------------------------------------}
00042      0  0 [ GLOBAL ]
00043      1  0 PROCEDURE executecom_TEK4106;
00044      1  0 VAR
00045      1  0    ii,j          : integer;
00046      1  0    oldpos        : ipoint;
00047   C  1  0 {------------------------------}
00048      2  0 PROCEDURE bufferempty;
00049   C  2  0 { Purpose -- empty software plotting buffer }
00050      2  1 BEGIN
00051      2  2 CASE env.mode OF
00052      2  3    M_TEXT:  BEGIN
00053      2  3             qiowwrite (ESC + '%!0'      { CODE TEK               }
00054      2  3                      + ESC + 'LV0'      { DIALOG AREA INVISIBLE  }
00055      2  3                      + ESC + 'TM3');    { SET COLOR DEFINE MODE  }

TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

-LINE-IDC-PL-SL-

00056      2  3             env.mode := M_PLOT;
00057      2  3             colorsetup_TEK4106;
00058      2  3             IF config.overlaykill
00059      2  3              THEN qiowwrite (ESC + 'LV0');  { DIALOG AREA INVISIBLE  }
00060      2  2             END;
00061      2  2    M_DUAL:  IF config.overlaykill
00062      2  2              THEN qiowwrite (ESC + 'LV0');  { DIALOG AREA INVISIBLE  }
00063      2  2    M_PLOT:  ;
00064      2  1    END;
00065      2  1 env.mode := M_PLOT;
00066      2  1 IF length (env.buffer) <> 0 
00067      2  1  THEN 
00068      2  2   BEGIN
00069      2  2   qiowwrite (env.buffer + CRLF);
00070      2  2   env.buffer := '';
00071      2  1   END;
00072      1  0 END;
00073   C  1  0 {------------------------------}
00074      1  1 BEGIN
00075      1  2 WITH plotitem DO CASE ins OF
00076      1  3    I_col:  BEGIN
00077      1  3            bufferempty;
00078      1  3            IF env.visible
00079      1  3             THEN 
00080      1  4              BEGIN
00081      1  4              j := getcolorindex_4100 (termpalette,st,bufferempty);
00082      1  4              env.buffer := ESC + 'ML' + strofi_4100 (j-1)
00083      1  4                          + ESC + 'MT' + strofi_4100 (j-1);
00084      1  3              END;
00085      1  3            bufferempty;
00086      1  2            END;
00087      1  3    I_pan:  BEGIN
00088      1  3            bufferempty;
00089      1  3            j := getcolorindex_4100 (termpalette,st,bufferempty);
00090      1  3            panelopen := j > 0;
00091      1  3            IF panelopen 
00092      1  3             THEN env.buffer := ESC + 'MP' + strofi_4100 (1-j);
00093      1  3            bufferempty;
00094      1  2            END;
00095      1  3    I_clo:  BEGIN
00096      1  3            bufferempty;
00097      1  3            env.buffer := ESC + 'LE';
00098      1  3            bufferempty;
00099      1  2            END;
00100      1  3    I_pos:  BEGIN
00101      1  3            bufferempty;
00102      1  3            env.pos.ix := ix;
00103      1  3            env.pos.iy := iy;
00104      1  2            END;
00105      1  2    I_dra:  draw_4100 (ix,iy,panelopen,bufferempty);
00106      1  2    I_siz:  ;
00107      1  2    I_mar:  ;
00108      1  2    I_pri:  IF env.visible AND (st <> '') 
00109      1  2             THEN 
00110      1  3              BEGIN

TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

-LINE-IDC-PL-SL-

00111      1  3              bufferempty;
00112      1  3              env.buffer := ESC + ';' + ESC + 'MC' 
00113      1  3                + strofi_4100((env.curch.width -env.curch.charspacing) DIV 16)
00114      1  3                + strofi_4100((env.curch.height-env.curch.linespacing) DIV 16)
00115      1  3                + strofi_4100 (env.curch.charspacing DIV 16);
00116      1  3              bufferempty;
00117      1  3              env.buffer := chr(29) + strofpos_4100 (env.pos) 
00118      1  3                          + ESC + 'LT' + strofi_4100 (length(st)) 
00119      1  3                          + st;
00120      1  3              bufferempty;
00121      1  2              END;
00122      1  2    I_emp:  bufferempty;
00123      1  1    END;
00124      0  0 END;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      0  0 [ GLOBAL ]
00127      1  0 PROCEDURE writeterm_TEK4106 (str : VARYING [l2] OF char);
00128      1  1 BEGIN
00129      1  1 writeterm_4100 (str,termfig.dialoglines);
00130      0  0 END;
00131   C  0  0 {-----------------------------------------------------------------------------}
00132      0  0 [ GLOBAL ]
00133      1  0 PROCEDURE readterm_TEK4106 (VAR outstr : VARYING [l2] OF char);  
00134      1  1 BEGIN
00135      1  1 readterm_vax (outstr);
00136      0  0 END;
00137   C  0  0 {-----------------------------------------------------------------------------}
00138      0  0 [ GLOBAL ]
00139      1  0 PROCEDURE screenerase_TEK4106;
00140      1  1 BEGIN
00141      1  1 env.mode := M_TEXT;
00142      1  1 qiowwrite (ESC + '%!0'      { CODE TEK               }
00143      1  1          + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00144      1  1 colorsetup_TEK4106;
00145      1  1 qiowwrite (ESC + 'KA0'      { DIALOG AREA DISABLE    }
00146      1  1          + ESC + 'LZ'       { DIALOG AREA CLEAR      }
00147      1  1          + ESC + FF);
00148      1  1 qiowwrite (ESC + '%!2');
00149      1  1 screenerase_ansi;
00150      0  0 END;
00151   C  0  0 {-----------------------------------------------------------------------------}
00152      0  0 [ GLOBAL ]
00153      1  0 PROCEDURE screencopy_TEK4106;
00154      1  0 VAR
00155      1  0    i    : integer;
00156      1  0    line : anystring;
00157      1  1 BEGIN
00158      1  1 env.mode := M_PLOT;
00159      1  2 CASE termfig.harddevice OF
00160      1  3    'A':  BEGIN
00161      1  3          qiowwrite (ESC + 'LV0' + ESC + 'LZ');
00162      1  4          CASE termfig.tek469Xsize OF
00163      1  4             'L':  qiowwrite (ESC + 'QA0' + ESC + 'KH1' + CRLF);
00164      1  4             'S':  qiowwrite (ESC + 'QA1' + ESC + 'KH1' + CRLF);
00165      1  4             'C':  qiowwrite (ESC + 'KH1' + CRLF);

TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

-LINE-IDC-PL-SL-

00166      1  3             END;
00167      1  3          qiowwrite (ESC + 'QA0' + CRLF);
00168      1  2          END;
00169      1  3    'B':  CASE termfig.tek4510source OF
00170      1  4             'S':  BEGIN
00171      1  4                   qiowwrite (ESC + 'PL2TO3P0:');
00172      1  4                   IF termfig.tek4510copy = 'C'
00173      1  4                    THEN qiowwrite (chr(27) + 'KH1');
00174      1  3                   END;
00175      1  4             'V':  BEGIN
00176      1  4                   qiowwrite (ESC + 'JC3HO:2TO3P0:' + CRLF);
00177      1  4                   qiowwrite (chr(27) + chr(12) + CRLF);
00178      1  4                   hardmake_TEK4510;
00179      1  4                   IF termfig.tek4510copy = 'C'
00180      1  4                    THEN qiowwrite (chr(27) + 'KH1');
00181      1  4                   qiowwrite (chr(26) + CRLF);
00182      1  3                   END;
00183      1  2             END;
00184      1  2    'Z':  writeline (out,'Hardcopy device not implemented' + CRLF);
00185      1  1    END;
00186      1  1 IF config.overlaykill 
00187      1  1  THEN qiowwrite (ESC + 'LV0');    { DIALOG AREA INVISIBLE  }
00188      0  0 END;
00189   C  0  0 {-----------------------------------------------------------------------------}
00190      0  0 [ GLOBAL ]
00191      1  0 PROCEDURE gin_TEK4106 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00192      1  1 BEGIN
00193      1  1 IF env.mode = M_TEXT THEN qiowwrite (ESC + '%!0');
00194      1  1 gin_4100 (key,ipt,color);
00195      0  0 END;
00196   C  0  0 {-----------------------------------------------------------------------------}
00197      0  0 [GLOBAL]
00198      1  0 FUNCTION readmenu_TEK4106 (default : char;  toplevel : boolean;
00199      1  0    helpprefix : anystring) : command_type;
00200      1  1 BEGIN
00201      1  1 readmenu_TEK4106 := readmenu_ansi (default,toplevel,helpprefix,true);
00202      0  0 END;
00203   C  0  0 {-----------------------------------------------------------------------------}
00204      0  0 [ GLOBAL ]
00205      1  0 PROCEDURE termconfig_TEK4106 (configcontrol : configcontrol_type);
00206      1  1 BEGIN
00207      1  2 WITH termfig DO CASE configcontrol OF
00208      1  3    CON:  BEGIN
00209      1  3          qiowwrite (ESC + '%!0'      { CODE TEK               }
00210      1  3                   + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00211      1  3          colorsetup_TEK4106;
00212      1  3          qiowwrite (ESC + '%!2');     { CODE EDIT              }
00213      1  3          config.ch := ch_type (614,1024,198,400);
00214      1  3          config.resolution := 104;
00215      1  3          config.dotsize    := 0;
00216      1  3          config.starsize   := 416;
00217      1  3          config.ansi364    := true;
00218      1  3          config.drawblack  := true;
00219      1  3          IF terminal.name = 'TGRAF' 
00220      1  3           THEN dialoglines := 5

TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

-LINE-IDC-PL-SL-

00221      1  3           ELSE dialoglines := 30;
00222      1  2          END;
00223      1  3    QUE:  BEGIN
00224      1  3          readint ('ENTER DIALOG LINES    : ',dialoglines,3,100,dialoglines);
00225      1  3          writeline (out,'A=TEK469x, B=TEK4510, Z=none');
00226      1  3          readch  ('ENTER HARDCOPY DEVICE : ',harddevice,'ABZ',harddevice);
00227      1  4          CASE harddevice OF
00228      1  5             'A':  BEGIN
00229      1  5                   writeline (out,'S=SMALL, L=LARGE, C=CURRENT');
00230      1  5                   readch  ('ENTER TEK469x SIZE    : ',
00231      1  5                             tek469Xsize,'SLC',tek469Xsize);
00232      1  4                   END;
00233      1  5             'B':  BEGIN
00234      1  5                   writeline (out,'S=SEGMENT, V=VAX');
00235      1  5                   readch  ('ENTER TEK4510 SOURCE  : ',
00236      1  5                             tek4510source,'SV',tek4510source);
00237      1  5                   writeline (out,'C=COPY NEEDED, N=NO COPY (PASSIGN P1: 4510)');
00238      1  5                   readch  ('ENTER TEK4510 COPY    : ',
00239      1  5                             tek4510copy,'CN',tek4510copy);
00240      1  5                   hardconfig_TEK4510 (configcontrol);
00241      1  4                   END;
00242      1  3             END;
00243      1  2          END;
00244      1  3    REP:  BEGIN
00245      1  3          writeline (out,'NUMBER OF DIALOG LINES IS ' + strofi(dialoglines,3));
00246      1  4          CASE harddevice OF
00247      1  5             'A':  BEGIN
00248      1  5                   writeline (out,'Local hardcopy device is A=TEK469x');
00249      1  6                   CASE tek469Xsize OF
00250      1  6                      'S':  writeline (out,'Hardcopy size is SMALL');
00251      1  6                      'L':  writeline (out,'Hardcopy size is LARGE');
00252      1  6                      'C':  writeline (out,'Hardcopy size is CURRENT');
00253      1  5                      END;
00254      1  4                   END;
00255      1  5             'B':  BEGIN
00256      1  5                   writeline (out,'Local hardcopy device is B=TEK4510');
00257      1  6                   CASE tek4510source OF
00258      1  6                      'S':  writeline (out,'Hardcopy source is segmant memory');
00259      1  6                      'V':  writeline (out,'Hardcopy source is VAX memory');
00260      1  5                      END;
00261      1  6                   CASE tek4510copy OF
00262      1  6                      'N':  writeline (out,'Hardcopy print command sent by terminal');
00263      1  6                      'C':  writeline (out,'Hardcopy print command sent by VAX');
00264      1  5                      END;
00265      1  5                   hardconfig_TEK4510 (configcontrol);
00266      1  4                   END;
00267      1  4             'Z':  writeline (out,'No local hardcopy device');
00268      1  3             END;
00269      1  2          END;
00270      1  1    END;
00271      0  0 END;
00272   C  0  0 {-----------------------------------------------------------------------------}
00273      0  0 END.

TERM_TEK4106                                                    23-Dec-1988 10:09:20    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 14:23:28    [QPLOT.QPLOT.SOURCE]TEK4106.TERM;23 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                6846  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 12  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        47        38
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        35        17
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        14        15
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        58        27
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        40        40
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        57        51
DUA1:[QPLOT.QPLOT.SOURCE]TEK4510.TEN;1                    56         3         5



TERM_TEK4107                                                    23-Dec-1988 10:10:13    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 14:35:26    [QPLOT.QPLOT.SOURCE]TEK4107.TERM;21 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:FIG',
00004      0  0                'QLIBHOME:COLOR',
00005      0  0                'QLIBHOME:TERM_VAX',
00006      0  0                'QLIBHOME:TERM_ANSI',
00007      0  0                'QLIBHOME:TERM_4100',
00008      0  0                'QLIBHOME:TEK4106.TEN'),
00009      0  0   ENVIRONMENT ('QLIBHOME:TEK4107.TEN') ]
00010      0  0 MODULE term_TEK4107;
00011   C  0  0 {=============================================================================}
00012      0  0 [ HIDDEN ] VAR
00013      0  0    segmentopen   : boolean := false;
00014      0  0    currseg       : integer := 0;
00015      0  0    panelopen     : boolean := false;
00016      0  0    inpanel       : boolean := false;
00017   C  0  0 {=============================================================================}
00018   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4107 -------------------------------------}
00019   C  0  0 {=============================================================================}
00020      0  0 [ GLOBAL ]
00021      1  0 FUNCTION termname_TEK4107 (i : integer) : devname_type;
00022      1  1 BEGIN
00023      1  2 CASE i OF
00024      1  2    0: termname_TEK4107 := '1234';
00025      1  2    1: termname_TEK4107 := 'TEK4107 ';
00026      1  2    2: termname_TEK4107 := 'TEK4109 ';
00027      1  2    3: termname_TEK4107 := 'TEK4207 ';
00028      1  2    4: termname_TEK4107 := 'TGRAF   ';
00029      1  1    END;
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      0  0 [ GLOBAL ]
00033      1  0 PROCEDURE colorsetup_TEK4107;
00034      1  1 BEGIN
00035      1  1 IF (terminal.name = 'TEK4109 ') OR (terminal.name = 'TGRAF   ')
00036      1  1  THEN colorsetup_4100 (16,16,true)
00037      1  1  ELSE colorsetup_4100 (16,4,true);
00038      0  0 END;
00039   C  0  0 {-----------------------------------------------------------------------------}
00040      0  0 [ GLOBAL ]
00041      1  0 PROCEDURE executecom_TEK4107;
00042      1  0 VAR
00043      1  0    ii,j          : integer;
00044      1  0    oldpos        : ipoint;
00045   C  1  0 {------------------------------}
00046      2  0 PROCEDURE bufferempty;
00047   C  2  0 { Purpose -- empty software plotting buffer }
00048      2  1 BEGIN
00049      2  2 CASE env.mode OF
00050      2  3    M_TEXT:  BEGIN
00051      2  3             qiowwrite (ESC + '%!0'      { CODE TEK               }
00052      2  3                      + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00053      2  3             env.mode := M_PLOT;
00054      2  3             colorsetup_TEK4107;
00055      2  3             IF config.overlaykill

TERM_TEK4107                                                    23-Dec-1988 10:10:13    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 14:35:26    [QPLOT.QPLOT.SOURCE]TEK4107.TERM;21 (1)

-LINE-IDC-PL-SL-

00056      2  3              THEN qiowwrite (ESC + 'LV0');     { DIALOG AREA INVISIBLE  }
00057      2  2             END;
00058      2  2    M_DUAL:  IF config.overlaykill
00059      2  2              THEN qiowwrite (ESC + 'LV0');     { DIALOG AREA INVISIBLE  }
00060      2  2    M_PLOT:  ;
00061      2  1    END;
00062      2  1 env.mode := M_PLOT;
00063      2  1 IF length(env.buffer) <> 0 
00064      2  1  THEN 
00065      2  2   BEGIN
00066      2  2   IF NOT segmentopen
00067      2  2    THEN 
00068      2  3     BEGIN
00069      2  3     currseg := currseg + 1;
00070      2  3     qiowwrite (ESC + 'SE' + strofi_4100(currseg));
00071      2  3     segmentopen := true;
00072      2  2     END;
00073      2  2   IF inpanel
00074      2  2    THEN qiowwrite (env.buffer)
00075      2  2    ELSE qiowwrite (env.buffer + CRLF);
00076      2  2   env.buffer := '';
00077      2  1   END;
00078      1  0 END;
00079   C  1  0 {------------------------------}
00080      1  1 BEGIN
00081      1  2 WITH plotitem DO CASE ins OF
00082      1  3    I_col:  BEGIN
00083      1  3            bufferempty;
00084      1  3            IF env.visible
00085      1  3             THEN 
00086      1  4              BEGIN
00087      1  4              j := getcolorindex_4100 (termpalette,st,bufferempty);
00088      1  4              env.buffer := ESC + 'ML' + strofi_4100 (j-1)
00089      1  4                          + ESC + 'MT' + strofi_4100 (j-1);
00090      1  3              END;
00091      1  3            bufferempty;
00092      1  2            END;
00093      1  3    I_pan:  BEGIN
00094      1  3            bufferempty;
00095      1  3            j := getcolorindex_4100 (termpalette,st,bufferempty);
00096      1  3            panelopen := j > 0;
00097      1  3            inpanel := j > 0;
00098      1  3            IF panelopen
00099      1  3             THEN env.buffer := ESC + 'MP' + strofi_4100 (1-j);
00100      1  3            bufferempty;
00101      1  2            END;
00102      1  3    I_clo:  BEGIN
00103      1  3            bufferempty;
00104      1  3            env.buffer := ESC + 'LE';
00105      1  3            bufferempty;
00106      1  3            inpanel := false;
00107      1  2            END;
00108      1  3    I_pos:  BEGIN
00109      1  3            bufferempty;
00110      1  3            env.pos.ix := ix;

TERM_TEK4107                                                    23-Dec-1988 10:10:13    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 14:35:26    [QPLOT.QPLOT.SOURCE]TEK4107.TERM;21 (1)

-LINE-IDC-PL-SL-

00111      1  3            env.pos.iy := iy;
00112      1  2            END;
00113      1  2    I_dra:  draw_4100(ix,iy,panelopen,bufferempty);
00114      1  2    I_siz:  ;
00115      1  2    I_mar:  ;
00116      1  2    I_pri:  IF env.visible AND (st <> '') 
00117      1  2             THEN 
00118      1  3              BEGIN
00119      1  3              bufferempty;
00120      1  3              env.buffer := ESC + ';' + ESC + 'MC' 
00121      1  3                + strofi_4100((env.curch.width -env.curch.charspacing) DIV 16)
00122      1  3                + strofi_4100((env.curch.height-env.curch.linespacing) DIV 16)
00123      1  3                + strofi_4100 (env.curch.charspacing DIV 16);
00124      1  3              bufferempty;
00125      1  3              env.buffer := chr(29) + strofpos_4100 (env.pos) 
00126      1  3                          + ESC + 'LT' + strofi_4100 (length(st)) 
00127      1  3                          + st;
00128      1  3              bufferempty;
00129      1  2              END;
00130      1  2    I_emp:  bufferempty;
00131      1  1    END;
00132      0  0 END;
00133   C  0  0 {-----------------------------------------------------------------------------}
00134      0  0 [ GLOBAL ]
00135      1  0 PROCEDURE writeterm_TEK4107 (str : VARYING [l2] OF char);
00136      1  1 BEGIN
00137      1  1 IF segmentopen 
00138      1  1  THEN BEGIN  qiowwrite (ESC + 'SC');  segmentopen := false;  END;
00139      1  1 writeterm_TEK4106 (str);
00140      0  0 END;
00141   C  0  0 {-----------------------------------------------------------------------------}
00142      0  0 [ GLOBAL ]
00143      1  0 PROCEDURE readterm_TEK4107 (VAR outstr : VARYING [l2] OF char);  
00144      1  1 BEGIN
00145      1  1 readterm_vax (outstr);
00146      0  0 END;
00147   C  0  0 {-----------------------------------------------------------------------------}
00148      0  0 [ GLOBAL ]
00149      1  0 PROCEDURE screenerase_TEK4107;
00150      1  1 BEGIN
00151      1  1 env.mode := M_TEXT;
00152      1  1 qiowwrite (ESC + '%!0'      { CODE TEK               }
00153      1  1          + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00154      1  1 colorsetup_TEK4107;
00155      1  1 qiowwrite (ESC + 'KA0'      { DIALOG AREA DISABLE    }
00156      1  1          + ESC + 'LZ'       { DIALOG AREA CLEAR      }
00157      1  1          + ESC + 'RF0'      { FIXUP OFF              }
00158      1  1          + ESC + 'SK!'      { DELETE ALL SEGMENTS    }
00159      1  1          + ESC + 'RF6'      { FIXUP ON               }
00160      1  1          + ESC + chr(12));
00161      1  1 qiowwrite (ESC + '%!2');
00162      1  1 screenerase_ansi;
00163      1  1 segmentopen := false;
00164      1  1 currseg := 0;
00165      0  0 END;

TERM_TEK4107                                                    23-Dec-1988 10:10:13    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 14:35:26    [QPLOT.QPLOT.SOURCE]TEK4107.TERM;21 (1)

-LINE-IDC-PL-SL-

00166   C  0  0 {-----------------------------------------------------------------------------}
00167      0  0 [ GLOBAL ]
00168      1  0 PROCEDURE screencopy_TEK4107;
00169      1  1 BEGIN
00170      1  1 screencopy_TEK4106;
00171      0  0 END;
00172   C  0  0 {-----------------------------------------------------------------------------}
00173      0  0 [ GLOBAL ]
00174      1  0 PROCEDURE gin_TEK4107 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00175      1  1 BEGIN
00176      1  1 IF segmentopen THEN BEGIN qiowwrite (ESC + 'SC');  segmentopen := false;  END;
00177      1  1 IF env.mode = M_TEXT THEN qiowwrite (ESC + '%!0');
00178      1  1 gin_4100 (key,ipt,color);
00179      0  0 END;
00180   C  0  0 {-----------------------------------------------------------------------------}
00181      0  0 [GLOBAL]
00182      1  0 FUNCTION readmenu_TEK4107 (default : char;  toplevel : boolean;
00183      1  0    helpprefix : anystring) : command_type;
00184      1  1 BEGIN
00185      1  1 readmenu_TEK4107 := readmenu_ansi (default,toplevel,helpprefix,true);
00186      0  0 END;
00187   C  0  0 {-----------------------------------------------------------------------------}
00188      0  0 [ GLOBAL ]
00189      1  0 PROCEDURE termconfig_TEK4107 (configcontrol : configcontrol_type);
00190      1  1 BEGIN
00191      1  1 termconfig_TEK4106 (configcontrol);
00192      0  0 END;
00193   C  0  0 {-----------------------------------------------------------------------------}
00194      0  0 END.

TERM_TEK4107                                                    23-Dec-1988 10:10:13    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 14:35:26    [QPLOT.QPLOT.SOURCE]TEK4107.TERM;21 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3860  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                 10  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        57        27
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        24        26
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        40        40
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        50        45
DUA1:[QPLOT.QPLOT.SOURCE]TEK4106.TEN;1                    94         9        10



TERM_TEK4114                                                    23-Dec-1988 10:10:42    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 11:33:19    [QPLOT.QPLOT.SOURCE]TEK4114.TERM;15 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:GENERAL',
00005      0  0                'QLIBHOME:STRING',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_4010',
00009      0  0                'QLIBHOME:TERM_4100'),
00010      0  0   ENVIRONMENT ('QLIBHOME:TEK4114.TEN') ]
00011      0  0 MODULE term_TEK4114;
00012      0  0 [ HIDDEN ] VAR
00013      0  0    termfig       : RECORD;
00014      0  0                    dialoglines   : integer;
00015      0  0                    END := (30);
00016   C  0  0 {=============================================================================}
00017   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE TEK4114 -------------------------------------}
00018   C  0  0 {=============================================================================}
00019      0  0 [ GLOBAL ]
00020      1  0 FUNCTION termname_TEK4114 (i : integer) : devname_type;
00021      1  1 BEGIN
00022      1  2 CASE i OF
00023      1  2    0: termname_TEK4114 := '1';
00024      1  2    1: termname_TEK4114 := 'TEK4114 ';
00025      1  1    END;
00026      0  0 END;
00027   C  0  0 {-----------------------------------------------------------------------------}
00028      0  0 [ GLOBAL ]
00029      1  0 PROCEDURE colorsetup_TEK4114;
00030      1  1 BEGIN
00031      0  0 END;
00032   C  0  0 {-----------------------------------------------------------------------------}
00033      0  0 [ GLOBAL ]
00034      1  0 PROCEDURE executecom_TEK4114;
00035      1  0 VAR
00036      1  0    h,l,s         : integer;
00037      1  0    a             : char;
00038      1  0    oldpos        : ipoint;
00039      1  0    oldstr,newstr : VARYING [80] OF char;
00040   C  1  0 {------------------------------}
00041      2  0 PROCEDURE bufferempty;
00042   C  2  0 { Purpose -- empty software plotting buffer }
00043      2  1 BEGIN
00044      2  2 CASE env.mode OF
00045      2  2    M_TEXT,
00046      2  2    M_DUAL:  IF config.overlaykill 
00047      2  2              THEN qiowwrite (ESC + 'LV0');     { DIALOG AREA INVISIBLE  }
00048      2  2    M_PLOT:  ;
00049      2  1    END;
00050      2  1 env.mode := M_PLOT;
00051      2  1 IF length(env.buffer) <> 0 
00052      2  1  THEN 
00053      2  2   BEGIN
00054      2  2   qiowwrite (env.buffer + CRLF);
00055      2  2   env.buffer := '';

TERM_TEK4114                                                    23-Dec-1988 10:10:42    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 11:33:19    [QPLOT.QPLOT.SOURCE]TEK4114.TERM;15 (1)

-LINE-IDC-PL-SL-

00056      2  1   END;
00057      1  0 END;
00058   C  1  0 {------------------------------}
00059      1  1 BEGIN
00060      1  2 WITH plotitem DO CASE ins OF
00061      1  2    I_col:  IF env.visible THEN qiowwrite (ESC + chofcolor_4010 (st));
00062      1  2    I_pan:  ;
00063      1  2    I_clo:  ;
00064      1  3    I_pos:  BEGIN
00065      1  3            bufferempty;
00066      1  3            env.pos.ix := ix;
00067      1  3            env.pos.iy := iy;
00068      1  2            END;
00069      1  3    I_dra:  BEGIN
00070      1  3            IF NOT env.visible
00071      1  3             THEN 
00072      1  4              BEGIN
00073      1  4              bufferempty;
00074      1  4              env.pos.ix := ix;
00075      1  4              env.pos.iy := iy;
00076      1  4              END
00077      1  3             ELSE 
00078      1  4              BEGIN
00079      1  4              IF length (env.buffer) > BUFFERSIZE-12 THEN bufferempty;
00080      1  4              oldstr := strofpos_4100 (env.pos);
00081      1  4              IF length (env.buffer) = 0 THEN env.buffer := chr(29) + oldstr;
00082      1  4              env.pos.ix := ix;
00083      1  4              env.pos.iy := iy;
00084      1  4              newstr := strofpos_4100 (env.pos);
00085      1  4              env.buffer := env.buffer + newstr;
00086      1  3              END;
00087      1  2            END;
00088      1  2    I_siz:  ;
00089      1  2    I_mar:  ;
00090      1  2    I_pri:  IF env.visible AND (st <> '') 
00091      1  2             THEN 
00092      1  3              BEGIN
00093      1  3              bufferempty;
00094      1  3              env.buffer := ESC + ';' + ESC + 'MC' 
00095      1  3                 + strofi_4100((env.curch.width -env.curch.charspacing) DIV 16)
00096      1  3                 + strofi_4100((env.curch.height-env.curch.linespacing) DIV 16)
00097      1  3                 + strofi_4100 (env.curch.charspacing DIV 16);
00098      1  3              bufferempty;
00099      1  3              env.buffer := chr(29) + strofpos_4100 (env.pos) 
00100      1  3                 + ESC + 'LT' + strofi_4100 (length(st)) + st;
00101      1  3              bufferempty;
00102      1  2              END;
00103      1  2    I_emp:  bufferempty;
00104      1  1    END;
00105      0  0 END;
00106   C  0  0 {-----------------------------------------------------------------------------}
00107      0  0 [ GLOBAL ]
00108      1  0 PROCEDURE writeterm_TEK4114 (str : VARYING [l2] OF char);
00109      1  1 BEGIN
00110      1  1 writeterm_4100 (str,termfig.dialoglines);

TERM_TEK4114                                                    23-Dec-1988 10:10:42    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 11:33:19    [QPLOT.QPLOT.SOURCE]TEK4114.TERM;15 (1)

-LINE-IDC-PL-SL-

00111      0  0 END;
00112   C  0  0 {-----------------------------------------------------------------------------}
00113      0  0 [ GLOBAL ]
00114      1  0 PROCEDURE readterm_TEK4114 (VAR outstr : VARYING [l2] OF char);  
00115      1  1 BEGIN
00116      1  1 readterm_vax (outstr);
00117      0  0 END;
00118   C  0  0 {-----------------------------------------------------------------------------}
00119      0  0 [ GLOBAL ]
00120      1  0 PROCEDURE screenerase_TEK4114;
00121      1  1 BEGIN
00122      1  1 qiowwrite (ESC + 'KA0'      { DIALOG AREA DISABLE    }
00123      1  1          + ESC + 'LZ'       { DIALOG AREA CLEAR      }
00124      1  1          + ESC + chr(12)
00125      1  1          + ESC + ';');
00126      1  1 wait (1.0);
00127      0  0 END;
00128   C  0  0 {-----------------------------------------------------------------------------}
00129      0  0 [ GLOBAL ]
00130      1  0 PROCEDURE screencopy_TEK4114;
00131      1  1 BEGIN
00132      1  1 qiowwrite (ESC + 'KH1');
00133      0  0 END;
00134   C  0  0 {-----------------------------------------------------------------------------}
00135      0  0 [ GLOBAL ]
00136      1  0 PROCEDURE gin_TEK4114 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00137      1  1 BEGIN
00138      1  1 gin_4100 (key,ipt,'');
00139      0  0 END;
00140   C  0  0 {-----------------------------------------------------------------------------}
00141      0  0 [GLOBAL]
00142      1  0 FUNCTION readmenu_TEK4114 (default : char;  toplevel : boolean;
00143      1  0    helpprefix : anystring) : command_type;
00144      1  1 BEGIN
00145      1  1 readmenu_TEK4114 := readmenu_4010 (default,toplevel,helpprefix,menuprep_4010);
00146      0  0 END;
00147   C  0  0 {-----------------------------------------------------------------------------}
00148      0  0 [ GLOBAL ]
00149      1  0 PROCEDURE termconfig_TEK4114 (configcontrol : configcontrol_type);
00150      1  1 BEGIN
00151      1  2 WITH termfig DO CASE configcontrol OF
00152      1  3    CON:  BEGIN
00153      1  3          config.ch := ch_type (512,768,192,192);
00154      1  3          config.resolution := 16;
00155      1  3          config.dotsize    := 0;
00156      1  3          config.starsize   := 320;
00157      1  3          config.ansi364    := false;
00158      1  3          config.drawblack  := false;
00159      1  2          END;
00160      1  2    QUE:  readint ('ENTER NUMBER OF DIALOG AREA LINES : ',
00161      1  2                    dialoglines,3,100,dialoglines);
00162      1  2    REP:  writeline (out,'NUMBER OF DIALOG LINES IS ' + strofi(dialoglines,3));
00163      1  1    END;
00164      0  0 END;
00165   C  0  0 {-----------------------------------------------------------------------------}

TERM_TEK4114                                                    23-Dec-1988 10:10:42    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  12-Nov-1987 11:33:19    [QPLOT.QPLOT.SOURCE]TEK4114.TERM;15 (1)

-LINE-IDC-PL-SL-

00166      0  0 END.

TERM_TEK4114                                                    23-Dec-1988 10:10:42    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 11:33:19    [QPLOT.QPLOT.SOURCE]TEK4114.TERM;15 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3367  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  4  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        27        13
DUA1:[QPLOT.QPLOT.SOURCE]GENERAL.PEN;1                    20         2        10
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        42        42
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        23        27
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        28        25



TERM_VDITERM                                                    23-Dec-1988 10:11:12    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:36:24    [QPLOT.QPLOT.SOURCE]VDITERM.TERM;23 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:STRING',
00004      0  0                'QLIBHOME:COLOR',
00005      0  0                'QLIBHOME:FIG',
00006      0  0                'QLIBHOME:TERM_VAX',
00007      0  0                'QLIBHOME:TERM_4010',
00008      0  0                'QLIBHOME:TERM_4100'),
00009      0  0   ENVIRONMENT ('QLIBHOME:VDITERM.TEN') ]
00010      0  0 MODULE term_VDITERM;
00011   C  0  0 {=============================================================================}
00012   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VDITERM -------------------------------------}
00013   C  0  0 {=============================================================================}
00014      0  0 [ HIDDEN ] VAR
00015      0  0    panelopen     : boolean := false;
00016      0  0    modedualstring: anystring := '';
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION termname_VDITERM (i : integer) : devname_type;
00020      1  1 BEGIN
00021      1  2 CASE i OF
00022      1  2    0: termname_VDITERM := '1';
00023      1  2    1: termname_VDITERM := 'VDITERM ';
00024      1  1    END;
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 PROCEDURE colorsetup_VDITERM;
00029   C  1  0 {------------------------------}
00030      2  0 PROCEDURE bufferempty;
00031      2  1 BEGIN
00032      2  1 qiowwrite (env.buffer + CRLF);
00033      2  1 env.buffer := '';
00034      1  0 END;
00035   C  1  0 {------------------------------}
00036      1  1 BEGIN
00037      1  1 initpalette (termpalette,8,4,false);
00038      1  1 IF env.mode = M_TEXT
00039      1  1  THEN getcolorindex_4100 (termpalette,'TEXTBACK',bufferempty)
00040      1  1  ELSE getcolorindex_4100 (termpalette,'PLOTBACK',bufferempty);
00041      0  0 END;
00042   C  0  0 {-----------------------------------------------------------------------------}
00043      0  0 [ GLOBAL ]
00044      1  0 PROCEDURE executecom_VDITERM;
00045      1  0 VAR
00046      1  0    ii,j          : integer;
00047      1  0    oldpos        : ipoint;
00048   C  1  0 {------------------------------}
00049      2  0 PROCEDURE bufferempty;
00050      2  1 BEGIN
00051      2  2 CASE env.mode OF
00052      2  3    M_TEXT:  BEGIN
00053      2  3             qiowwrite (ESC + '%!0');    { CODE TEK               }
00054      2  3             env.mode := M_PLOT;
00055      2  3             colorsetup_VDITERM;

TERM_VDITERM                                                    23-Dec-1988 10:11:12    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:36:24    [QPLOT.QPLOT.SOURCE]VDITERM.TERM;23 (1)

-LINE-IDC-PL-SL-

00056      2  2             END;
00057      2  2    M_DUAL:  ;
00058      2  2    M_PLOT:  ;
00059      2  1    END;
00060      2  1 env.mode := M_PLOT;
00061      2  1 IF length(env.buffer) <> 0 
00062      2  1  THEN 
00063      2  2   BEGIN
00064      2  2   qiowwrite (env.buffer + CRLF);
00065      2  2   env.buffer := '';
00066      2  1   END;
00067      1  0 END;
00068   C  1  0 {------------------------------}
00069      1  1 BEGIN
00070      1  2 WITH plotitem DO CASE ins OF
00071      1  3    I_col:  BEGIN
00072      1  3            bufferempty;
00073      1  3            j := getcolorindex_4100 (termpalette,st,bufferempty);
00074      1  3            IF env.visible
00075      1  3             THEN env.buffer := ESC + 'ML' + strofi_4100 (j-1)
00076      1  3                              + ESC + 'MT' + strofi_4100 (j-1);
00077      1  3            bufferempty;
00078      1  2            END;
00079      1  3    I_pan:  BEGIN
00080      1  3            bufferempty;
00081      1  3            j := getcolorindex_4100 (termpalette,st,bufferempty);
00082      1  3            panelopen := j > 0;
00083      1  3            IF panelopen
00084      1  3             THEN env.buffer := ESC + 'MP' + strofi_4100 (1-j);
00085      1  3            bufferempty;
00086      1  2            END;
00087      1  3    I_clo:  BEGIN
00088      1  3            bufferempty;
00089      1  3            env.buffer := ESC + 'LE';
00090      1  3            bufferempty;
00091      1  2            END;
00092      1  3    I_pos:  BEGIN
00093      1  3            bufferempty;
00094      1  3            env.pos.ix := ix;
00095      1  3            env.pos.iy := iy;
00096      1  2            END;
00097      1  2    I_dra:  draw_4100(ix,iy,panelopen,bufferempty);
00098      1  2    I_siz:  ;
00099      1  2    I_mar:  ;
00100      1  2    I_pri:  IF env.visible AND (st <> '') 
00101      1  2             THEN 
00102      1  3              BEGIN
00103      1  3              bufferempty;
00104      1  3              env.buffer := chr(29) + strofpos_4100 (env.pos) 
00105      1  3                          + ESC + 'LT' + strofi_4100 (length(st)) 
00106      1  3                          + st;
00107      1  3              bufferempty;
00108      1  2              END;
00109      1  2    I_emp:  bufferempty;
00110      1  1    END;

TERM_VDITERM                                                    23-Dec-1988 10:11:12    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 09:36:24    [QPLOT.QPLOT.SOURCE]VDITERM.TERM;23 (1)

-LINE-IDC-PL-SL-

00111      0  0 END;
00112   C  0  0 {-----------------------------------------------------------------------------}
00113      0  0 [ GLOBAL ]
00114      1  0 PROCEDURE writeterm_VDITERM (str : VARYING [l2] OF char);
00115      1  1 BEGIN
00116      1  1 IF env.mode = M_PLOT 
00117      1  1  THEN 
00118      1  2   BEGIN
00119      1  2   qiowwrite (chr(29) + strofpos_4010 (ipoint(0,1000)) + chr(31) + CRLF);
00120      1  2   qiowwritevirtual (strfix ('',length(modedualstring)));
00121      1  2   qiowwrite (chr(29) + strofpos_4010 (ipoint(0,1000)) + chr(31) + CRLF);
00122      1  2   qiowwritevirtual (str);
00123      1  2   modedualstring := str;
00124      1  2   env.mode := M_DUAL;
00125      1  2   END
00126      1  1  ELSE qiowwritevirtual (str);
00127      0  0 END;
00128   C  0  0 {-----------------------------------------------------------------------------}
00129      0  0 [ GLOBAL ]
00130      1  0 PROCEDURE readterm_VDITERM (VAR outstr : VARYING [l2] OF char);  
00131      1  1 BEGIN
00132      1  1 readterm_vax (outstr);
00133      1  1 IF env.mode IN [M_PLOT,M_DUAL]
00134      1  1  THEN modedualstring := modedualstring + outstr;
00135      0  0 END;
00136   C  0  0 {-----------------------------------------------------------------------------}
00137      0  0 [ GLOBAL ]
00138      1  0 PROCEDURE screenerase_VDITERM;
00139      1  1 BEGIN
00140      1  1 env.mode := M_TEXT;
00141      1  1 qiowwrite (ESC + '%!0');    { CODE TEK               }
00142      1  1 colorsetup_VDITERM;
00143      1  1 qiowwrite (ESC + FF);
00144      1  1 qiowwrite (ESC + '%!4' + ESC + chr(26));
00145      1  1 modedualstring := '';
00146      0  0 END;
00147   C  0  0 {-----------------------------------------------------------------------------}
00148      0  0 [ GLOBAL ]
00149      1  0 PROCEDURE screencopy_VDITERM;
00150      1  1 BEGIN
00151      1  1 qiowwrite (ESC + 'KH1');
00152      0  0 END;
00153   C  0  0 {-----------------------------------------------------------------------------}
00154      0  0 [ GLOBAL ]
00155      1  0 PROCEDURE gin_VDITERM (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00156      1  1 BEGIN
00157      1  1 IF env.mode = M_TEXT THEN qiowwrite (ESC + '%!0');
00158      1  1 gin_4010 (key,ipt);
00159      0  0 END;
00160   C  0  0 {-----------------------------------------------------------------------------}
00161      0  0 [GLOBAL]
00162      1  0 FUNCTION readmenu_VDITERM (default : char;  toplevel : boolean;
00163      1  0    helpprefix : anystring) : command_type;
00164   C  1  0 {------------------------------}
00165      2  0 PROCEDURE bufferempty;

TERM_VDITERM                                                    23-Dec-1988 10:11:12    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  12-Nov-1987 09:36:24    [QPLOT.QPLOT.SOURCE]VDITERM.TERM;23 (1)

-LINE-IDC-PL-SL-

00166      2  1 BEGIN
00167      2  1 qiowwrite (env.buffer + CRLF);
00168      2  1 env.buffer := '';
00169      1  0 END;
00170   C  1  0 {------------------------------}
00171      2  0 PROCEDURE menuprep;
00172      2  1 BEGIN
00173      2  1 qiowwrite (ESC + '%!0');
00174      2  1 colorsetup_VDITERM;
00175      2  1 getcolorindex_4100 (termpalette,'TEXTCHAR',bufferempty);
00176      2  1 qiowwrite (ESC + 'ML1' + ESC + 'MT1' + CRLF);
00177      1  0 END;
00178   C  1  0 {------------------------------}
00179      1  1 BEGIN
00180      1  1 readmenu_VDITERM := readmenu_4010 (default,toplevel,helpprefix,menuprep);
00181      1  1 env.ginflag := true;
00182      0  0 END;
00183   C  0  0 {-----------------------------------------------------------------------------}
00184      0  0 [ GLOBAL ]
00185      1  0 PROCEDURE termconfig_VDITERM (configcontrol : configcontrol_type);
00186      1  1 BEGIN
00187      1  2 CASE configcontrol OF
00188      1  3    CON:  BEGIN
00189      1  3          qiowwrite (ESC + '%!0'      { CODE TEK               }
00190      1  3                   + ESC + 'TM3');    { SET COLOR DEFINE MODE  }
00191      1  3          colorsetup_VDITERM;
00192      1  3          qiowwrite (ESC + '%!4');    { CODE AMDEK }
00193      1  3          config.ch := ch_type (820,1320,192,192);
00194      1  3          config.resolution := 150;
00195      1  3          config.dotsize    := 0;
00196      1  3          config.starsize   := 512;
00197      1  3          config.ansi364    := false;
00198      1  3          config.drawblack  := true;
00199      1  2          END;
00200      1  2    QUE:  ;
00201      1  2    REP:  ;
00202      1  1    END;
00203      0  0 END;
00204   C  0  0 {-----------------------------------------------------------------------------}
00205      0  0 END.

TERM_VDITERM                                                    23-Dec-1988 10:11:12    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:36:24    [QPLOT.QPLOT.SOURCE]VDITERM.TERM;23 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                4511  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                261  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        47        38
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        29        31
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        45        45
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        24        29
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4100.PEN;1                 112        42        38



TERM_VERSAMAC                                                   23-Dec-1988 10:11:42    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   1-Dec-1987 16:02:02    [QPLOT.QPLOT.SOURCE]VERSAMAC.TERM;41 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:IO',
00004      0  0                'QLIBHOME:FIG',
00005      0  0                'QLIBHOME:TERM_VAX',
00006      0  0                'QLIBHOME:TERM_ANSI',
00007      0  0                'QLIBHOME:TERM_4010'),
00008      0  0   ENVIRONMENT ('QLIBHOME:VERSAMAC.TEN') ]
00009      0  0 MODULE term_VERSAMAC;
00010   C  0  0 {=============================================================================}
00011   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VERSAMAC ------------------------------------}
00012   C  0  0 {=============================================================================}
00013      0  0 [ HIDDEN ] VAR
00014      0  0    termfig       : RECORD;
00015      0  0                    charsize : char;
00016      0  0                    END := (';');
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION termname_VERSAMAC (i : integer) : devname_type;
00020      1  1 BEGIN
00021      1  2 CASE i OF
00022      1  2    0: termname_VERSAMAC := '1';
00023      1  2    1: termname_VERSAMAC := 'VERSAMAC';
00024      1  1    END;
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 PROCEDURE colorsetup_VERSAMAC;
00029      1  1 BEGIN
00030      0  0 END;
00031   C  0  0 {-----------------------------------------------------------------------------}
00032      0  0 [ GLOBAL ]
00033      1  0 PROCEDURE executecom_VERSAMAC;
00034   C  1  0 {------------------------------}
00035      2  0 PROCEDURE bufferempty;
00036      2  0 VAR
00037      2  0    ipt : ipoint;
00038      2  1 BEGIN
00039      2  2 CASE env.mode OF
00040      2  2    M_TEXT:  qiowwrite (ESC + FF);
00041      2  3    M_DUAL:  BEGIN
00042      2  3             ipt.ix := 20000;
00043      2  3             ipt.iy := 20000;
00044      2  3             qiowwrite (chr (29) + chr (31) + '  ' + CRLF);
00045      2  2             END;
00046      2  2    M_PLOT:  ;
00047      2  1    END;
00048      2  1 env.mode := M_PLOT;
00049      2  1 IF length (env.buffer) <> 0 
00050      2  1  THEN 
00051      2  2   BEGIN
00052      2  2   qiowwrite (env.buffer + CRLF);
00053      2  2   env.buffer := '';
00054      2  1   END;
00055      1  0 END;

TERM_VERSAMAC                                                   23-Dec-1988 10:11:42    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   1-Dec-1987 16:02:02    [QPLOT.QPLOT.SOURCE]VERSAMAC.TERM;41 (1)

-LINE-IDC-PL-SL-

00056   C  1  0 {------------------------------}
00057      1  1 BEGIN
00058      1  2 WITH plotitem DO CASE ins OF
00059      1  2    I_col:  bufferempty;
00060      1  2    I_pan:  ;
00061      1  2    I_clo:  ;
00062      1  3    I_pos:  BEGIN
00063      1  3            bufferempty;
00064      1  3            env.pos.ix := ix;
00065      1  3            env.pos.iy := iy;
00066      1  2            END;
00067      1  2    I_dra:  draw_4010 (ix,iy,false,bufferempty);
00068      1  2    I_siz:  ;
00069      1  2    I_mar:  ;
00070      1  2    I_pri:  IF env.visible AND (st <> '') 
00071      1  2             THEN 
00072      1  3              BEGIN
00073      1  3              bufferempty;
00074      1  3              env.buffer := ESC + termfig.charsize 
00075      1  3                          + chr(29) + strofpos_4010 (env.pos)  
00076      1  3                          + chr(31) + st;
00077      1  3              bufferempty;
00078      1  2              END;
00079      1  2    I_emp:  bufferempty;
00080      1  1    END;
00081      0  0 END;
00082   C  0  0 {-----------------------------------------------------------------------------}
00083      0  0 [ GLOBAL ]
00084      1  0 PROCEDURE writeterm_VERSAMAC (str : VARYING [l2] OF char);
00085      1  1 BEGIN
00086      1  1 IF env.mode = M_PLOT 
00087      1  1  THEN 
00088      1  2   BEGIN
00089      1  2   qiowwrite (ESC + '2');
00090      1  2   env.mode := M_DUAL;
00091      1  1   END;
00092      1  1 qiowwritevirtual (str);
00093      0  0 END;
00094   C  0  0 {-----------------------------------------------------------------------------}
00095      0  0 [ GLOBAL ]
00096      1  0 PROCEDURE readterm_VERSAMAC (VAR outstr : VARYING [l2] OF char);  
00097      1  1 BEGIN
00098      1  1 readterm_vax (outstr);
00099      0  0 END;
00100   C  0  0 {-----------------------------------------------------------------------------}
00101      0  0 [ GLOBAL ]
00102      1  0 PROCEDURE screenerase_VERSAMAC;
00103      1  1 BEGIN
00104      1  1 IF env.mode IN [M_PLOT,M_DUAL] THEN qiowwrite (ESC + FF + ESC + '2' + CRLF);
00105      1  1 screenerase_ansi;
00106      0  0 END;
00107   C  0  0 {-----------------------------------------------------------------------------}
00108      0  0 [ GLOBAL ]
00109      1  0 PROCEDURE screencopy_VERSAMAC;
00110      1  1 BEGIN

TERM_VERSAMAC                                                   23-Dec-1988 10:11:42    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   1-Dec-1987 16:02:02    [QPLOT.QPLOT.SOURCE]VERSAMAC.TERM;41 (1)

-LINE-IDC-PL-SL-

00111      1  1 screencopy_4010;
00112      0  0 END;
00113   C  0  0 {-----------------------------------------------------------------------------}
00114      0  0 [ GLOBAL ]
00115      1  0 PROCEDURE gin_VERSAMAC (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00116      1  0 VAR
00117      1  0    st : VARYING [20] OF char;
00118      1  1 BEGIN
00119      1  1 IF env.mode IN [M_DUAL,M_TEXT] 
00120      1  1  THEN qiowwrite (chr (29) + chr (31) + '  ' + CRLF);
00121      1  1 gin_4010 (key,ipt);
00122      0  0 END;
00123   C  0  0 {-----------------------------------------------------------------------------}
00124      0  0 [GLOBAL]
00125      1  0 FUNCTION readmenu_VERSAMAC (default : char;  toplevel : boolean;
00126      1  0    helpprefix : anystring) : command_type;
00127      1  1 BEGIN
00128      1  1 readmenu_VERSAMAC := readmenu_ansi (default,toplevel,helpprefix,false);
00129      0  0 END;
00130   C  0  0 {-----------------------------------------------------------------------------}
00131      0  0 [ GLOBAL ]
00132      1  0 PROCEDURE termconfig_VERSAMAC (configcontrol : configcontrol_type);
00133      1  1 BEGIN
00134      1  2 WITH termfig DO CASE configcontrol OF
00135      1  3    CON:  BEGIN
00136      1  3          qiowwrite (ESC + FF);      { CODE TEK               }
00137      1  3          qiowwrite (ESC + '2' + ESC + '[?3l');
00138      1  4          CASE termfig.charsize OF
00139      1  4             ';':  config.ch := ch_type (496,768,96,208);
00140      1  4             ':':  config.ch := ch_type (544,848,64,176);
00141      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00142      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00143      1  3             END;
00144      1  3          config.resolution := 64;
00145      1  3          config.dotsize    := 64;
00146      1  3          config.starsize   := 320;
00147      1  3          config.ansi364    := false;
00148      1  3          config.drawblack  := false;
00149      1  2          END;
00150      1  3    QUE:  BEGIN
00151      1  3          readch ('ENTER TEK CHARACTER SIZE CODE : ',charsize,'89:;',charsize);
00152      1  4          CASE termfig.charsize OF
00153      1  4             ';':  config.ch := ch_type (496,768,96,208);
00154      1  4             ':':  config.ch := ch_type (544,848,64,176);
00155      1  4             '9':  config.ch := ch_type (816,1312,96,304);
00156      1  4             '8':  config.ch := ch_type (896,1408,96,288);
00157      1  3             END;
00158      1  2          END;
00159      1  2    REP:  writeline (out,'Character size code is "' + charsize + '"');
00160      1  1    END;
00161      0  0 END;
00162   C  0  0 {-----------------------------------------------------------------------------}
00163      0  0 END.

TERM_VERSAMAC                                                   23-Dec-1988 10:11:42    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics    1-Dec-1987 16:02:02    [QPLOT.QPLOT.SOURCE]VERSAMAC.TERM;41 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3976  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  1  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        47        38
DUA1:[QPLOT.QPLOT.SOURCE]IO.PEN;1                        204        26        13
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        50        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        45        45
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28
DUA1:[QPLOT.QPLOT.SOURCE]TERM_4010.PEN;1                  84        20        24



TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:FIG',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:TERM_VAX',
00006      0  0                'QLIBHOME:TERM_CHAR',
00007      0  0                'QLIBHOME:TERM_ANSI'),
00008      0  0   ENVIRONMENT ('VT100.TEN') ]
00009      0  0 MODULE term_VT100;
00010      0  0 [ HIDDEN ] CONST
00011      0  0    rowsize         = 24;
00012      0  0    maxcolsize      = 132;
00013      0  0 [ HIDDEN ] TYPE
00014      0  0    iposition       = RECORD
00015      0  0                      irow,icol : integer;
00016      0  0                      END;
00017      0  0    vary134         = VARYING [134] OF CHAR;  {max 132 columns + CRLF}
00018      0  0    scrmode_type    = (c80,p80,c132,p132);
00019      0  0    memscreen_array = ARRAY [0..rowsize] OF ARRAY [0..maxcolsize] OF CHAR; 
00020      0  0    memscreen_type  = ARRAY [scrmode_type] OF memscreen_array; 
00021      0  0 [ HIDDEN ] VAR
00022      0  0    memscreen       : ^memscreen_type := NIL;
00023      0  0    dialog_area     : ARRAY [1..5] OF vary134 
00024      0  0                    := (5 OF '');
00025      0  0    curpos          : iposition    := (10,40);
00026      0  0    colorchar       : char         := '#';
00027      0  0    scrmode         : scrmode_type := c80;
00028      0  0    dialog_on       : boolean      := false;
00029   C  0  0 {=============================================================================}
00030   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VT100 ---------------------------------------}
00031   C  0  0 {=============================================================================}
00032      1  0 [ HIDDEN ] PROCEDURE clearmemscreen;
00033      1  0 VAR
00034      1  0   a,b : INTEGER;
00035      1  1 BEGIN
00036      1  1 FOR a := 1 TO rowsize DO 
00037      1  1   FOR b := 1 TO maxcolsize DO 
00038      1  2     BEGIN
00039      1  2     memscreen^[c80,a,b] := ' ';
00040      1  2     memscreen^[p80,a,b] := ' ';
00041      1  2     memscreen^[c132,a,b] := ' ';
00042      1  2     memscreen^[p132,a,b] := ' ';
00043      1  1     END;
00044      0  0 END;
00045   C  0  0 {-----------------------------------------------------------------------------}
00046      1  0 [ HIDDEN ] FUNCTION strofpos(tpt : iposition) : vary134;
00047      1  0 VAR
00048      1  0   xstr,ystr : vary134;
00049      1  1 BEGIN
00050      1  1   xstr := strofi(tpt.irow,2);
00051      1  1   IF xstr[1] = ' ' THEN xstr := SUBSTR(xstr,2,1);
00052      1  1   ystr := strofi(tpt.icol,3);
00053      1  1   IF ystr[1] = ' ' THEN ystr := SUBSTR(ystr,2,2);
00054      1  1   IF ystr[1] = ' ' THEN ystr := SUBSTR(ystr,2,1);
00055      1  1   strofpos := ESC + '[' + xstr + ';' + ystr + 'H';

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00056      0  0 END;
00057   C  0  0 {-----------------------------------------------------------------------------}
00058      1  0 [ HIDDEN ] PROCEDURE write_to_dialog_area(str : vary134; new_line : BOOLEAN);
00059      1  0 VAR
00060      1  0   a        : INTEGER;
00061      1  1 BEGIN
00062      1  1   dialog_area[5] := dialog_area[5] + str;
00063      1  1   IF new_line THEN
00064      1  2   BEGIN
00065      1  2     FOR a := 1 TO 4 DO
00066      1  2       dialog_area[a] := dialog_area[a+1];
00067      1  2     dialog_area[5] := '';
00068      1  1   END;
00069      0  0 END;
00070   C  0  0 {-----------------------------------------------------------------------------}
00071      1  0 [ HIDDEN ] PROCEDURE write_dialog_area;
00072      1  0 VAR
00073      1  0   a   : INTEGER;
00074      1  0   tpt : iposition;
00075      1  1 BEGIN
00076      1  1   qiowwrite(ESC + '[18;1H' + pad ('','_',80));
00077      1  1   tpt.icol := 1;
00078      1  1   tpt.irow := 19;
00079      1  1   qiowwrite(ESC + '[19;1H');
00080      1  1   FOR a := 1 TO 5 DO
00081      1  2   BEGIN
00082      1  2     qiowwrite(dialog_area[a]);
00083      1  2     tpt.irow := tpt.irow + 1;
00084      1  2     qiowwrite(strofpos(tpt));
00085      1  1   END;
00086      0  0 END;
00087   C  0  0 {-----------------------------------------------------------------------------}
00088      1  0 [ HIDDEN ] PROCEDURE drawmemscreen(tscrmode : scrmode_type; 
00089      1  0                      full_screen : BOOLEAN := TRUE);
00090      1  0 VAR
00091      1  0   a,b,tcolsize,startrow : INTEGER;
00092      1  0   tstr                  : vary134;
00093      1  0   tpt                   : iposition;
00094      1  1 BEGIN
00095      1  1   dialog_on := FALSE;
00096      1  1   tpt.icol := 0;
00097      1  1   tcolsize := 80;
00098      1  1   IF tscrmode IN [c132,p132] THEN tcolsize := 132;
00099      1  1   IF full_screen THEN startrow := 1 ELSE startrow := 18;
00100      1  1   FOR a := startrow TO rowsize DO 
00101      1  2   BEGIN
00102      1  2     tpt.irow := a;
00103      1  2     qiowwrite(strofpos(tpt)); 
00104      1  2     tstr.length := tcolsize;
00105      1  3     CASE tscrmode OF
00106      1  3       c80 : FOR b := 1 to tcolsize DO tstr[b] := memscreen^[c80,a,b];
00107      1  3       p80 : FOR b := 1 to tcolsize DO tstr[b] := memscreen^[p80,a,b];
00108      1  3       c132 : FOR b := 1 to tcolsize DO tstr[b] := memscreen^[c132,a,b];
00109      1  3       p132 : FOR b := 1 to tcolsize DO tstr[b] := memscreen^[p132,a,b];
00110      1  2     END;

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00111      1  2     qiowwrite(tstr);
00112      1  1   END;
00113      0  0 END;
00114   C  0  0 {-----------------------------------------------------------------------------}
00115      0  0 [ GLOBAL ]
00116      1  0 FUNCTION termname_VT100 (i : integer) : devname_type;
00117      1  1 BEGIN
00118      1  2 CASE i OF
00119      1  2    0: termname_VT100 := '1234567';
00120      1  2    1: termname_VT100 := 'VT100   ';
00121      1  2    2: termname_VT100 := 'VT102   ';
00122      1  2    3: termname_VT100 := 'VT220   ';
00123      1  2    4: termname_VT100 := 'VS100   ';
00124      1  2    5: termname_VT100 := 'TV922   ';
00125      1  2    6: termname_VT100 := 'ANSI364 ';
00126      1  2    7: termname_VT100 := 'VT_EMUL ';
00127      1  1    END;
00128      0  0 END;
00129   C  0  0 {-----------------------------------------------------------------------------}
00130      0  0 [ GLOBAL ]
00131      1  0 PROCEDURE colorsetup_VT100;
00132      1  1 BEGIN
00133      0  0 END;
00134   C  0  0 {-----------------------------------------------------------------------------}
00135      0  0 [ GLOBAL ]
00136      1  0 PROCEDURE executecom_VT100;
00137      1  0 VAR
00138      1  0    j,a,b        : integer;
00139      1  0    oldpos80,oldpos132,newpos80,newpos132 : iposition;
00140      1  0    tstr         : vary134;
00141   C  1  0 {----------------------------------}
00142      2  0 FUNCTION vposofqpos(tcolsize : INTEGER) : iposition;
00143      2  0 VAR
00144      2  0   tpos : iposition;
00145      2  1 BEGIN
00146      2  1   tpos.irow := 24 - env.pos.iy DIV 2000; 
00147      2  1   tpos.icol := env.pos.ix DIV (65535 DIV tcolsize); 
00148      2  1   IF tpos.irow < 0 THEN tpos.irow := 0;
00149      2  1   IF tpos.icol < 0 THEN tpos.icol := 0;
00150      2  1   IF tpos.irow > rowsize THEN tpos.irow := rowsize;
00151      2  1   IF tpos.icol > tcolsize THEN tpos.icol := tcolsize;
00152      2  1   vposofqpos := tpos;
00153      1  0 END;
00154   C  1  0 {----------------------------------}
00155      2  0 PROCEDURE gentheline(tscrmode : scrmode_type; 
00156      2  0                     pos1,pos2 : iposition;
00157      2  0                VAR tmemscreen : memscreen_array;
00158      2  0                      plotchar : CHAR);
00159      2  0 VAR
00160      2  0   error,delta_x,delta_y : DOUBLE;
00161      2  0   m,n,tcolsize          : INTEGER;
00162      2  0   temp_pos,temp_pos1    : iposition;
00163      2  1 BEGIN
00164      2  1 tcolsize := 80;
00165      2  1 IF tscrmode IN [c132,p132] THEN tcolsize := 132;

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00166      2  1 error := 0;
00167      2  1 m := 1;
00168      2  1 n := 1;
00169      2  1 delta_x := pos2.icol - pos1.icol;
00170      2  1 IF delta_x < 0 
00171      2  1  THEN
00172      2  2   BEGIN
00173      2  2   m := -1; {x to left}
00174      2  2   delta_x := - delta_x;
00175      2  2   END
00176      2  1 ELSE IF delta_x = 0 
00177      2  1  THEN error := -1; { assure vertical movement }
00178      2  1 delta_y := pos2.irow - pos1.irow;
00179      2  1 IF delta_y < 0 
00180      2  1  THEN
00181      2  2   BEGIN
00182      2  2   n := -1; { y moves down }
00183      2  2   delta_y := - delta_y;
00184      2  1   END;
00185      2  1 WHILE NOT((pos2.icol = pos1.icol) AND
00186      2  1             (pos2.irow = pos1.irow)) DO
00187      2  2    BEGIN
00188      2  2    temp_pos := pos1;
00189      2  2    IF pos1.irow < 0 THEN temp_pos.irow := 0;
00190      2  2    IF pos1.icol < 0 THEN temp_pos.icol := 0;
00191      2  2    IF pos1.irow > rowsize THEN temp_pos.irow := rowsize;
00192      2  2    IF pos1.icol > tcolsize THEN temp_pos.icol := tcolsize;
00193      2  2    IF tmemscreen[temp_pos.irow,temp_pos.icol] <> plotchar 
00194      2  2     THEN
00195      2  3      BEGIN
00196      2  3      tmemscreen[temp_pos.irow,temp_pos.icol] := plotchar; 
00197      2  3      IF tscrmode = scrmode THEN qiowwrite(strofpos(temp_pos) + plotchar);
00198      2  2      END;
00199      2  2    IF error < 0 
00200      2  2     THEN
00201      2  3      BEGIN
00202      2  3      pos1.irow := pos1.irow + n;
00203      2  3      error := error + delta_x;
00204      2  3      END
00205      2  2     ELSE
00206      2  3      BEGIN
00207      2  3      pos1.icol := pos1.icol + m;
00208      2  3      error := error - delta_y;
00209      2  2      END;
00210      2  1    END;      
00211      1  0 END;
00212   C  1  0 {----------------------------------}
00213      1  1 BEGIN
00214      1  1 IF env.mode = M_DUAL
00215      1  1  THEN
00216      1  2   BEGIN
00217      1  2   qiowwrite (ESC + '[19;1H' + ESC + '[J');
00218      1  2   drawmemscreen(scrmode,FALSE);
00219      1  2   dialog_on := FALSE;
00220      1  2   qiowwrite (ESC + '[1;24r' + strofpos(curpos));

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00221      1  1   END;
00222      1  1 env.mode := M_PLOT;
00223      1  2 WITH plotitem DO CASE ins OF
00224      1  2    I_col:  colorchar := chofcolor (st);
00225      1  2    I_pan:  ;
00226      1  2    I_clo:  ; 
00227      1  3    I_pos : BEGIN
00228      1  3            env.pos.ix := ix;
00229      1  3            env.pos.iy := iy;
00230      1  2            END;
00231      1  2    I_dra : IF NOT env.visible
00232      1  2             THEN
00233      1  3              BEGIN
00234      1  3              env.pos.ix := ix;
00235      1  3              env.pos.iy := iy;
00236      1  3              END
00237      1  2             ELSE
00238      1  3              BEGIN
00239      1  3              oldpos80 := vposofqpos(80);
00240      1  3              oldpos132 := vposofqpos(132);
00241      1  3              env.pos.ix := ix;
00242      1  3              env.pos.iy := iy;
00243      1  3              newpos80 := vposofqpos(80);
00244      1  3              newpos132 := vposofqpos(132);
00245      1  3              gentheline(c80,oldpos80,newpos80,memscreen^[c80],colorchar);
00246      1  3              gentheline(p80,oldpos80,newpos80,memscreen^[p80],'.');
00247      1  3              gentheline(c132,oldpos132,newpos132,memscreen^[c132],colorchar);
00248      1  3              gentheline(p132,oldpos132,newpos132,memscreen^[p132],'.');
00249      1  2              END;
00250      1  2    I_siz:  ;
00251      1  2    I_mar:  ;
00252      1  2    I_pri:  IF env.visible AND (st <> '') 
00253      1  2             THEN 
00254      1  3              BEGIN
00255      1  3              tstr := st;
00256      1  3              newpos80 := vposofqpos(80);
00257      1  3              newpos132 := vposofqpos(132);
00258   C  1  3              { To terminal }
00259      1  4              CASE scrmode OF
00260      1  4                 c80,p80 : qiowwrite(strofpos(newpos80) + tstr);
00261      1  4                 c132,p132 : qiowwrite(strofpos(newpos132) + tstr);
00262      1  3                 END;
00263   C  1  3              { To memscreens }
00264      1  3              b := newpos80.icol;
00265      1  3              FOR a := 1 TO LENGTH(tstr) DO
00266      1  4                 BEGIN
00267      1  4                 IF (newpos80.icol + a < 80) THEN b := b + 1; 
00268      1  4                 memscreen^[c80,newpos80.irow,b] := tstr[a];
00269      1  4                 memscreen^[p80,newpos80.irow,b] := tstr[a];
00270      1  3                 END;
00271      1  3              b := newpos132.icol;
00272      1  3              FOR a := 1 TO LENGTH(tstr) DO
00273      1  4                 BEGIN
00274      1  4                 IF (newpos132.icol + a < 132) THEN b := b + 1; 
00275      1  4                 memscreen^[c132,newpos132.irow,b] := tstr[a];

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00276      1  4                 memscreen^[p132,newpos132.irow,b] := tstr[a];
00277      1  3                 END;
00278      1  2              END;
00279      1  2    I_emp:  ; 
00280      1  1    END;
00281      0  0 END;
00282   C  0  0 {-----------------------------------------------------------------------------}
00283      0  0 [ GLOBAL ]
00284      1  0 PROCEDURE writeterm_VT100 (str : VARYING [l2] OF char);
00285      1  0 CONST
00286      1  0   CR = chr(13);
00287      1  0 VAR
00288      1  0   new_line : BOOLEAN;
00289      1  0   a        : INTEGER;
00290      1  1 BEGIN
00291      1  1 IF env.mode = M_PLOT
00292      1  1  THEN
00293      1  2   BEGIN
00294      1  2   qiowwrite (ESC + '[18;1H' + pad ('','_',80));
00295      1  2   qiowwrite (ESC + '[19;24r' + ESC + '[19;1H' + ESC + '[0J');
00296      1  2   write_dialog_area;
00297      1  2   env.mode := M_DUAL;
00298      1  1   END;
00299      1  1 qiowwritevirtual (str);
00300      1  1 new_line := index (str,CR) <> 0;
00301      1  1 write_to_dialog_area(str,new_line);
00302      0  0 END;
00303   C  0  0 {-----------------------------------------------------------------------------}
00304      0  0 [GLOBAL]
00305      1  0 PROCEDURE readterm_VT100 (VAR outstr : VARYING [l2] OF CHAR);
00306      1  1 BEGIN
00307      1  1 readterm_vax (outstr);
00308      1  1 write_to_dialog_area (outstr + CRLF,TRUE);
00309      0  0 END;
00310   C  0  0 {-----------------------------------------------------------------------------}
00311      0  0 [ GLOBAL ]
00312      1  0 PROCEDURE screenerase_VT100;
00313      1  0 VAR
00314      1  0    i : integer;
00315      1  1 BEGIN
00316      1  1 IF memscreen = NIL THEN new (memscreen);
00317      1  1 screenerase_ansi;
00318      1  1 clearmemscreen;
00319      1  1 FOR i := 1 TO 5 DO dialog_area[i] := '';
00320      0  0 END;
00321   C  0  0 {-----------------------------------------------------------------------------}
00322      0  0 [ GLOBAL ]
00323      1  0 PROCEDURE screencopy_VT100;
00324      1  1 BEGIN
00325      0  0 END;
00326   C  0  0 {-----------------------------------------------------------------------------}
00327      0  0 [ GLOBAL ]
00328      1  0 PROCEDURE gin_VT100 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00329      1  0 VAR
00330      1  0    a,b              : integer;

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    7
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00331      1  0    vpos             : iposition;
00332      1  0    tstr,trash,tbuff : vary134;
00333   C  1  0 {----------------------------------}
00334      2  0 FUNCTION readtoletter : vary134;
00335      2  0 VAR
00336      2  0    tbuff,tstr : VARYING [8] OF CHAR;
00337      2  1 BEGIN
00338      2  1 tbuff := ' ';
00339      2  1 qiowreadnoecho(tbuff,1);
00340      2  1 tstr := tbuff[1];
00341      2  1 IF tstr[1] = ESC 
00342      2  1  THEN 
00343      2  2   REPEAT
00344      2  2      tbuff := ' ';
00345      2  2      qiowreadnoecho(tbuff,1);
00346      2  2      tstr := tstr + tbuff[1];
00347      2  1      UNTIL tbuff[1] IN ['A'..'Z','a'..'z',ESC];
00348      2  1 readtoletter := tstr;
00349      1  0 END;
00350   C  1  0 {----------------------------------}
00351      2  0 FUNCTION qposofvpos (vpos : iposition) : ipoint;
00352      2  0 VAR
00353      2  0    tpos     : ipoint;
00354      2  0    tcolsize : INTEGER;
00355      2  1 BEGIN
00356      2  1 IF scrmode IN [c132,p132] THEN tcolsize := 132 ELSE tcolsize := 80;
00357      2  1 tpos.ix := vpos.icol * (65535 DIV tcolsize); 
00358      2  1 tpos.iy := 48000 - (vpos.irow * 2000); 
00359      2  1 IF tpos.ix < 0 THEN tpos.ix := 0;
00360      2  1 IF tpos.iy < 0 THEN tpos.iy := 0;
00361      2  1 IF tpos.ix > 65535 THEN tpos.ix := 65535;
00362      2  1 IF tpos.iy > 48000 THEN tpos.iy := 48000;
00363      2  1 qposofvpos := tpos;
00364      1  0 END;
00365   C  1  0 {----------------------------------}
00366      2  0 FUNCTION cursorposition : iposition;
00367      2  0 VAR
00368      2  0    tint1,tint2,tint3 : INTEGER;
00369      2  0    vpos              : iposition;
00370      2  0    tstr,rowstr,colstr,trash : vary134;
00371      2  1 BEGIN
00372      2  1 trash := '';
00373      2  1 qiowreadnoechopurge(trash,0);
00374      2  1 qiowwrite(ESC + '[6n');
00375      2  1 tstr := readtoletter;  
00376      2  1 tint1 := INDEX(tstr,'[');
00377      2  1 tint2 := INDEX(tstr,';');
00378      2  1 tint3 := INDEX(tstr,'R');
00379      2  1 IF (tint1 <> 0) AND (tint2 <> 0) AND (tint3 <> 0)
00380      2  1  THEN
00381      2  2   BEGIN
00382      2  2   rowstr := SUBSTR(tstr,tint1+1,tint2-tint1-1);
00383      2  2   colstr := SUBSTR(tstr,tint2+1,tint3-tint2-1);
00384      2  2   vpos.irow := iofstr (rowstr);
00385      2  2   vpos.icol := iofstr (colstr);

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    8
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00386      2  2   END
00387      2  1  ELSE
00388      2  2   BEGIN
00389      2  2   vpos.irow := 1;
00390      2  2   vpos.icol := 1;
00391      2  1   END;
00392      2  1 cursorposition := vpos;
00393      1  0 END;
00394   C  1  0 {----------------------------------}
00395      1  1 BEGIN
00396      1  2 CASE env.mode OF
00397      1  3    M_TEXT:  BEGIN
00398      1  3             qiowwrite (ESC + '[H' + ESC + '[J');
00399      1  3             drawmemscreen(scrmode);
00400      1  2             END;
00401      1  3    M_DUAL:  BEGIN
00402      1  3             qiowwrite (ESC + '[19;1H' + ESC + '[J');
00403      1  3             drawmemscreen(scrmode,FALSE);
00404      1  3             dialog_on := FALSE;
00405      1  3             qiowwrite (ESC + '[1;24r');
00406      1  2             END;
00407      1  1    END;
00408      1  1 env.mode := M_PLOT;
00409      1  1 qiowwrite(strofpos(curpos));
00410      1  1 trash := '';
00411      1  1 qiowreadnoechopurge(trash,0);
00412      1  1 
00413      1  2 REPEAT
00414      1  2    tstr := readtoletter;
00415      1  2    IF tstr[1] = ESC 
00416      1  2     THEN 
00417      1  3      BEGIN
00418      1  3      IF (tstr = ESC+'[A') OR (tstr = ESC+'[B') OR
00419      1  3         (tstr = ESC+'[C') OR (tstr = ESC+'[D')
00420      1  3       THEN qiowwrite(tstr)
00421      1  3      ELSE IF tstr = ESC+'O'
00422      1  3       THEN
00423      1  4        BEGIN
00424      1  4        tbuff := ' ';
00425      1  4        qiowreadnoecho(tbuff,1);
00426      1  5        CASE tbuff[1] OF
00427      1  6           'P':  BEGIN                       { PF1 key = toggles 80/132 }
00428      1  7                 CASE scrmode OF
00429      1  7                    c80  : scrmode := c132;
00430      1  7                    p80  : scrmode := p132;
00431      1  7                    c132 : scrmode := c80;
00432      1  7                    p132 : scrmode := p80;
00433      1  6                    END;
00434      1  7                 CASE scrmode OF
00435      1  7                    c80,p80   : qiowwrite(ESC + '[?3l');
00436      1  7                    c132,p132 : qiowwrite(ESC + '[?3h');
00437      1  6                    END;
00438      1  6                 drawmemscreen(scrmode);
00439      1  6                 qiowwrite(strofpos(curpos));  
00440      1  5                 END;

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page    9
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00441      1  6           'Q':  BEGIN                        { PF2 key = char/period }
00442      1  7                 CASE scrmode OF 
00443      1  7                    c80 : scrmode := p80;
00444      1  7                    p80 : scrmode := c80;
00445      1  7                    c132 : scrmode := p132;
00446      1  7                    p132 : scrmode := c132;
00447      1  6                    END;
00448      1  7                 CASE scrmode OF
00449      1  7                    c80,p80 : qiowwrite(ESC + '[?3l');
00450      1  7                    c132,p132 : qiowwrite(ESC + '[?3h');
00451      1  6                    END;
00452      1  6                 drawmemscreen(scrmode);
00453      1  6                 qiowwrite(strofpos(curpos));  
00454      1  5                 END;
00455      1  6           'R':  BEGIN                        { PF3 key = show dialog area }
00456      1  6                 curpos := cursorposition;
00457      1  6                 IF dialog_on 
00458      1  6                  THEN
00459      1  7                   BEGIN
00460      1  7                   qiowwrite (ESC + '[19;1H' + ESC + '[J');
00461      1  7                   drawmemscreen(scrmode,FALSE);
00462      1  7                   dialog_on := FALSE;
00463      1  7                   qiowwrite (ESC + '[1;24r' + strofpos(curpos));
00464      1  7                   END
00465      1  6                  ELSE
00466      1  7                   BEGIN
00467      1  7                   qiowwrite (ESC + '[19;1H' + ESC + '[J');
00468      1  7                   write_dialog_area;
00469      1  7                   dialog_on := TRUE;
00470      1  7                   qiowwrite(strofpos(curpos));
00471      1  6                   END;            
00472      1  5                 END;
00473      1  5           'S':  ;                            { PF4 key = future }
00474      1  5           OTHERWISE;
00475      1  4           END;
00476      1  3        END;
00477      1  2      END;       
00478      1  1    UNTIL tstr[1] <> ESC;
00479      1  1 
00480      1  1 key := tstr[1];
00481      1  1 curpos := cursorposition;
00482      1  1 ipt := qposofvpos(curpos);
00483      0  0 END;
00484   C  0  0 {-----------------------------------------------------------------------------}
00485      0  0 [GLOBAL]
00486      1  0 FUNCTION readmenu_VT100 (default : char;  toplevel : boolean;  
00487      1  0    helpprefix : anystring) : command_type;
00488      1  1 BEGIN
00489      1  1 readmenu_VT100 := readmenu_ansi (default,toplevel,helpprefix,
00490      1  1    terminal.name <> 'VT_EMUL ');
00491      0  0 END;
00492   C  0  0 {-----------------------------------------------------------------------------}
00493      0  0 [ GLOBAL ]
00494      1  0 PROCEDURE termconfig_VT100 (configcontrol : configcontrol_type);
00495      1  1 BEGIN

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page   10
QPLOT                           Source Listing                   7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

-LINE-IDC-PL-SL-

00496      1  2 CASE configcontrol OF
00497      1  3    CON:  BEGIN
00498      1  3          config.ch := ch_type (65536 DIV 80,2000,65536 DIV 320,600);
00499      1  3          config.resolution := 2000;
00500      1  3          config.dotsize    := 0;
00501      1  3          config.starsize   := 64;
00502      1  3          config.ansi364    := true;
00503      1  3          config.drawblack  := false;
00504      1  2          END;
00505      1  2    QUE:  ;
00506      1  2    REP:  ;
00507      1  1    END;
00508      0  0 END;
00509   C  0  0 {-----------------------------------------------------------------------------}
00510      0  0 END.

TERM_VT100                                                      23-Dec-1988 10:12:11    VAX Pascal V3.7-254                Page   11
QPLOT                           Pascal Compilation Statistics    7-Oct-1988 13:32:23    DUA1:[QPLOT.QPLOT.SOURCE]VT100.TERM;16 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                9055  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                695  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        58        27
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72        11        15
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        57        56
DUA1:[QPLOT.QPLOT.SOURCE]TERM_CHAR.PEN;1                   7         7       100
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        15        28



TERM_VT125                                                      23-Dec-1988 10:12:59    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  12-Nov-1987 09:36:44    DUA1:[QPLOT.QPLOT.SOURCE]VT125.TERM;1 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:MATH',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:FIG',
00006      0  0                'QLIBHOME:TERM_VAX',
00007      0  0                'QLIBHOME:TERM_ANSI',
00008      0  0                'QLIBHOME:TERM_REGIS'),
00009      0  0   ENVIRONMENT ('QLIBHOME:VT125.TEN') ]
00010      0  0 MODULE term_VT125;
00011      0  0 [ HIDDEN ] VAR
00012      0  0    quan          : integer   := 12;
00013   C  0  0 {=============================================================================}
00014   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VT125 ---------------------------------------}
00015   C  0  0 {=============================================================================}
00016      0  0 [ GLOBAL ]
00017      1  0 FUNCTION termname_VT125 (i : integer) : devname_type;
00018      1  1 BEGIN
00019      1  2 CASE i OF
00020      1  2    0: termname_VT125 := '1';
00021      1  2    1: termname_VT125 := 'VT125   ';
00022      1  1    END;
00023      0  0 END;
00024   C  0  0 {-----------------------------------------------------------------------------}
00025      0  0 [ GLOBAL ]
00026      1  0 PROCEDURE colorsetup_VT125;
00027      1  1 BEGIN
00028      0  0 END;
00029   C  0  0 {-----------------------------------------------------------------------------}
00030      0  0 [ GLOBAL ]
00031      1  0 PROCEDURE executecom_VT125;
00032      1  1 BEGIN
00033      1  2 WITH plotitem DO CASE ins OF
00034      1  2    I_col:  bufferempty_REGIS;
00035      1  2    I_pan:  ;
00036      1  2    I_clo:  ;
00037      1  3    I_pos:  BEGIN
00038      1  3            bufferempty_REGIS;
00039      1  3            env.pos.ix := ix;
00040      1  3            env.pos.iy := iy;
00041      1  2            END;
00042      1  2    I_dra:  draw_REGIS (ix,iy,bufferempty_REGIS);
00043      1  2    I_siz:  ;
00044      1  2    I_mar:  ;
00045      1  2    I_pri:  IF env.visible AND (st <> '') 
00046      1  2             THEN 
00047      1  3              BEGIN
00048      1  3              bufferempty_REGIS;
00049      1  3              env.buffer := 'P' + strofpos_REGIS + 'T"' + st + '"';
00050      1  3              bufferempty_REGIS;
00051      1  2              END;
00052      1  2    I_emp:  bufferempty_REGIS;
00053      1  1    END;
00054      0  0 END;
00055   C  0  0 {-----------------------------------------------------------------------------}

TERM_VT125                                                      23-Dec-1988 10:12:59    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  12-Nov-1987 09:36:44    DUA1:[QPLOT.QPLOT.SOURCE]VT125.TERM;1 (1)

-LINE-IDC-PL-SL-

00056      0  0 [ GLOBAL ]
00057      1  0 PROCEDURE writeterm_VT125 (str : VARYING [l2] OF char);
00058      1  1 BEGIN
00059      1  1 IF env.mode = M_PLOT
00060      1  1  THEN
00061      1  2   BEGIN
00062      1  2   env.mode := M_DUAL;
00063      1  2   qiowwrite (ESC + '\');
00064      1  1   END;
00065      1  1 qiowwritevirtual (str);
00066      0  0 END;
00067   C  0  0 {-----------------------------------------------------------------------------}
00068      0  0 [ GLOBAL ]
00069      1  0 PROCEDURE readterm_VT125 (VAR outstr : VARYING [l2] OF char);  
00070      1  1 BEGIN
00071      1  1 readterm_vax (outstr);
00072      0  0 END;
00073   C  0  0 {-----------------------------------------------------------------------------}
00074      0  0 [ GLOBAL ]
00075      1  0 PROCEDURE screenerase_VT125;
00076      1  1 BEGIN
00077      1  1 screenerase_REGIS;
00078      0  0 END;
00079   C  0  0 {-----------------------------------------------------------------------------}
00080      0  0 [ GLOBAL ]
00081      1  0 PROCEDURE screencopy_VT125;
00082      1  1 BEGIN
00083      1  1 screencopy_REGIS;
00084      0  0 END;
00085   C  0  0 {-----------------------------------------------------------------------------}
00086      0  0 [ GLOBAL ]
00087      1  0 PROCEDURE gin_VT125 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00088      1  0 VAR
00089      1  0    tbuffer,posstr,funcstr : VARYING [80] OF char;
00090   C  1  0 {----------------------------------}
00091      2  0 FUNCTION readtoletter : anystring;
00092      2  0 VAR
00093      2  0   tbuff,tstr : VARYING [8] OF CHAR;
00094      2  1 BEGIN
00095      2  1 tbuff := ' ';
00096      2  1 qiowreadnoecho(tbuff,1);
00097      2  1 tstr := tbuff;
00098      2  1 IF tstr[1] = ESC 
00099      2  1  THEN 
00100      2  2   REPEAT
00101      2  2     tbuff := ' ';
00102      2  2     qiowreadnoecho(tbuff,1);
00103      2  2     tstr := tstr + tbuff[1];
00104      2  1   UNTIL ((tbuff[1] IN ['A'..'Z','a'..'z',ESC]) OR (length(tstr) > 10));
00105      2  1 readtoletter := tstr;
00106      1  0 END;
00107   C  1  0 {----------------------------------}
00108      1  1 BEGIN
00109      1  1 IF env.mode IN [M_TEXT,M_DUAL]
00110      1  1  THEN qiowwrite (ESC + 'Pp');

TERM_VT125                                                      23-Dec-1988 10:12:59    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  12-Nov-1987 09:36:44    DUA1:[QPLOT.QPLOT.SOURCE]VT125.TERM;1 (1)

-LINE-IDC-PL-SL-

00111      1  1 env.mode := M_PLOT;
00112      1  1 
00113   C  1  1 { PUT CURSOR IN SAVED POSITION; AUTO-REPEAT DISABLED }
00114      1  1 qiowwrite('P' + REGIS_control.ginpos + ESC + '\' + ESC + '[?8l' + ESC + 'Pp'); 
00115      1  2 REPEAT
00116      1  2    tbuffer := '';
00117      1  2    qiowreadnoechopurge(tbuffer,0);
00118      1  2    tbuffer := readtoletter;
00119      1  2    key := tbuffer[1];
00120      1  2    IF key = ESC 
00121      1  2     THEN
00122      1  3      BEGIN
00123      1  3      IF (tbuffer = ESC+'[A') THEN qiowwrite ('P[,+' + strofi(quan,2) + ']');
00124      1  3      IF (tbuffer = ESC+'[B') THEN qiowwrite ('P[,-' + strofi(quan,2) + ']');
00125      1  3      IF (tbuffer = ESC+'[D') THEN qiowwrite ('P[-' + strofi(quan,2) + ']');
00126      1  3      IF (tbuffer = ESC+'[C') THEN qiowwrite ('P[+' + strofi(quan,2) + ']');
00127      1  3      IF (tbuffer = ESC+'O') 
00128      1  3       THEN
00129      1  4        BEGIN  
00130      1  4        funcstr := ' ';
00131      1  4        qiowreadnoecho(funcstr,1);
00132      1  5        CASE funcstr[1] OF
00133      1  5           'P' : qiowwrite (ESC + '\' + ESC + '[2J' + ESC + 'Pp');
00134      1  5           'Q' : quan := 13 - quan;
00135      1  4           END;
00136      1  3        END;
00137      1  2      END;
00138      1  1    UNTIL (key <> ESC);
00139      1  1 
00140   C  1  1 { LOCK KEYBOARD }
00141      1  1 qiowwrite (ESC + '\' + ESC + '[2h' + ESC + 'Pp'); 
00142      1  1 
00143      1  1 tbuffer := '';
00144      1  1 qiowreadnoechopurge(tbuffer,0);
00145      1  1 posstr := '';
00146      1  1 qiowwrite('R(P(I))');
00147   C  1  1 {Report graphics cursor position}
00148      1  2 REPEAT
00149      1  2    tbuffer := ' ';
00150      1  2    qiowreadnoecho (tbuffer,1);
00151      1  2    posstr := posstr + tbuffer;
00152      1  1    UNTIL (tbuffer[1] = ']') OR (length(posstr) > 10);
00153   C  1  1 { UNLOCK KEYBOARD }
00154      1  1 qiowwrite (ESC + '\' + ESC + '[2l' + ESC + 'Pp');
00155      1  1 
00156      1  1 REGIS_control.ginpos := posstr;
00157      1  1 ipt := posofstr_REGIS (REGIS_control.ginpos);
00158      0  0 END;
00159   C  0  0 {-----------------------------------------------------------------------------}
00160      0  0 [GLOBAL]
00161      1  0 FUNCTION readmenu_VT125 (default : char;  toplevel : boolean;
00162      1  0    helpprefix : anystring) : command_type;
00163      1  1 BEGIN
00164      1  1 readmenu_VT125 := readmenu_ansi (default,toplevel,helpprefix,true);
00165      0  0 END;

TERM_VT125                                                      23-Dec-1988 10:12:59    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  12-Nov-1987 09:36:44    DUA1:[QPLOT.QPLOT.SOURCE]VT125.TERM;1 (1)

-LINE-IDC-PL-SL-

00166   C  0  0 {-----------------------------------------------------------------------------}
00167      0  0 [ GLOBAL ]
00168      1  0 PROCEDURE termconfig_VT125 (configcontrol : configcontrol_type);
00169      1  1 BEGIN
00170      1  2 CASE configcontrol OF
00171      1  3    CON:  BEGIN
00172      1  3          config_REGIS (768,240);
00173      1  3          qiowwrite (ESC + '>');
00174      1  3          config.ch.width       := REGIS_control.xresolution * 10;
00175      1  3          config.ch.height      := REGIS_control.yresolution * 10;
00176      1  3          config.ch.charspacing := REGIS_control.xresolution * 3;
00177      1  3          config.ch.linespacing := REGIS_control.yresolution;
00178      1  3          config.resolution     := imax (REGIS_control.xresolution,
00179      1  3                                         REGIS_control.yresolution);
00180      1  3          config.dotsize        := config.resolution;
00181      1  3          config.starsize       := config.resolution*3;
00182      1  3          config.ansi364        := true;
00183      1  3          config.drawblack      := false;
00184      1  2          END;
00185      1  2    QUE:  ;
00186      1  2    REP:  ;
00187      1  1    END;
00188      0  0 END;
00189   C  0  0 {-----------------------------------------------------------------------------}
00190      0  0 END.

TERM_VT125                                                      23-Dec-1988 10:12:59    VAX Pascal V3.7-254                Page    5
QPLOT                           Pascal Compilation Statistics   12-Nov-1987 09:36:44    DUA1:[QPLOT.QPLOT.SOURCE]VT125.TERM;1 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                3603  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  4  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        41        33
DUA1:[QPLOT.QPLOT.SOURCE]MATH.PEN;1                       59         3         5
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        49        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        57        56
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        24        45
DUA1:[QPLOT.QPLOT.SOURCE]TERM_REGIS.PEN;1                109        30        28



TERM_VT240                                                      23-Dec-1988 10:13:32    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  19-Nov-1987 14:36:45    DUA1:[QPLOT.QPLOT.SOURCE]VT240.TERM;27 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:MATH',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:FIG',
00006      0  0                'QLIBHOME:COLOR',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_ANSI',
00009      0  0                'QLIBHOME:TERM_REGIS'),
00010      0  0   ENVIRONMENT ('QLIBHOME:VT240.TEN') ]
00011      0  0 MODULE term_VT240;
00012   C  0  0 {=============================================================================}
00013   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VT240 ---------------------------------------}
00014   C  0  0 {=============================================================================}
00015      0  0 [ GLOBAL ]
00016      1  0 FUNCTION termname_VT240 (i : integer) : devname_type;
00017      1  1 BEGIN
00018      1  2 CASE i OF
00019      1  2    0: termname_VT240 := '1';
00020      1  2    1: termname_VT240 := 'VT240   ';
00021      1  1    END;
00022      0  0 END;
00023   C  0  0 {-----------------------------------------------------------------------------}
00024      0  0 [ GLOBAL ]
00025      1  0 PROCEDURE colorsetup_VT240;
00026      1  1 BEGIN
00027      0  0 END;
00028   C  0  0 {-----------------------------------------------------------------------------}
00029      0  0 [ GLOBAL ]
00030      1  0 PROCEDURE executecom_VT240;
00031      1  0 VAR
00032      1  0    hlsa : hlsa_type;
00033      1  1 BEGIN
00034      1  2 WITH plotitem DO CASE ins OF
00035      1  3    I_col:  BEGIN
00036      1  3            bufferempty_REGIS;
00037      1  3            hlsa := hlsaofcolor (st);
00038      1  3            IF      hlsa.lightness < 20 THEN env.buffer := 'W(I0)'
00039      1  3            ELSE IF hlsa.lightness < 50 THEN env.buffer := 'W(I1)'
00040      1  3            ELSE IF hlsa.lightness < 80 THEN env.buffer := 'W(I2)'
00041      1  3            ELSE                             env.buffer := 'W(I3)';
00042      1  3            bufferempty_REGIS;
00043      1  2            END;
00044      1  2    I_pan:  ;
00045      1  2    I_clo:  ;
00046      1  3    I_pos:  BEGIN
00047      1  3            bufferempty_REGIS;
00048      1  3            env.pos.ix := ix;
00049      1  3            env.pos.iy := iy;
00050      1  2            END;
00051      1  2    I_dra:  draw_REGIS (ix,iy,bufferempty_REGIS);
00052      1  2    I_siz:  ;
00053      1  2    I_mar:  ;
00054      1  2    I_pri:  IF env.visible AND (st <> '') 
00055      1  2             THEN 

TERM_VT240                                                      23-Dec-1988 10:13:32    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  19-Nov-1987 14:36:45    DUA1:[QPLOT.QPLOT.SOURCE]VT240.TERM;27 (1)

-LINE-IDC-PL-SL-

00056      1  3              BEGIN
00057      1  3              bufferempty_REGIS;
00058      1  3              env.pos.iy := env.pos.iy + config.ch.height 
00059      1  3                                       - config.ch.linespacing;
00060      1  3              env.buffer := 'P' + strofpos_REGIS + 'T(S1)"' + st + '"';
00061      1  3              env.pos.iy := env.pos.iy - config.ch.height
00062      1  3                                       + config.ch.linespacing;
00063      1  3              bufferempty_REGIS;
00064      1  2              END;
00065      1  2    I_emp:  bufferempty_REGIS;
00066      1  1    END;
00067      0  0 END;
00068   C  0  0 {-----------------------------------------------------------------------------}
00069      0  0 [ GLOBAL ]
00070      1  0 PROCEDURE writeterm_VT240 (str : VARYING [l2] OF char);
00071      1  1 BEGIN
00072      1  1 IF env.mode = M_PLOT
00073      1  1  THEN
00074      1  2   BEGIN
00075      1  2   env.mode := M_DUAL;
00076      1  2   qiowwrite (ESC + '\' + ESC + '[21;24r' + ESC + '[24;1H' + CRLF);
00077      1  1   END;
00078      1  1 qiowwritevirtual (str);
00079      0  0 END;
00080   C  0  0 {-----------------------------------------------------------------------------}
00081      0  0 [ GLOBAL ]
00082      1  0 PROCEDURE readterm_VT240 (VAR outstr : VARYING [l2] OF char);  
00083      1  1 BEGIN
00084      1  1 readterm_vax (outstr);
00085      0  0 END;
00086   C  0  0 {-----------------------------------------------------------------------------}
00087      0  0 [ GLOBAL ]
00088      1  0 PROCEDURE screenerase_VT240;
00089      1  1 BEGIN
00090      1  1 screenerase_REGIS;
00091      0  0 END;
00092   C  0  0 {-----------------------------------------------------------------------------}
00093      0  0 [ GLOBAL ]
00094      1  0 PROCEDURE screencopy_VT240;
00095      1  1 BEGIN
00096      1  1 screencopy_REGIS;
00097      0  0 END;
00098   C  0  0 {-----------------------------------------------------------------------------}
00099      0  0 [ GLOBAL ]
00100      1  0 PROCEDURE gin_VT240 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00101      1  0 VAR
00102      1  0    tbuffer,posstr : VARYING [80] OF char;
00103      1  1 BEGIN
00104      1  1 IF env.mode IN [M_TEXT,M_DUAL]
00105      1  1  THEN qiowwrite (ESC + 'Pp');
00106      1  1 qiowwrite (ESC + '\' + ESC + '[2h' + ESC + 'Pp'); {Lock keyboard}
00107      1  1 env.mode := M_PLOT;
00108      1  1 tbuffer := '';
00109      1  1 qiowreadnoechopurge(tbuffer,0);
00110      1  1 qiowwrite ('P' + REGIS_control.ginpos); 

TERM_VT240                                                      23-Dec-1988 10:13:32    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  19-Nov-1987 14:36:45    DUA1:[QPLOT.QPLOT.SOURCE]VT240.TERM;27 (1)

-LINE-IDC-PL-SL-

00111      1  1 qiowwrite (ESC + '\' + ESC + '[2l' + ESC + 'Pp'); {Unlock keyboard}
00112      1  1 qiowwrite ('R(P(I))'); 
00113      1  1 
00114      1  1 posstr := '    ';
00115      1  1 qiowreadnoecho (posstr,4);
00116      1  2 REPEAT
00117      1  2    tbuffer := ' ';
00118      1  2    qiowreadnoecho (tbuffer,1);
00119      1  2    posstr := posstr + tbuffer[1];
00120      1  1    UNTIL (tbuffer[1] IN [']']) OR (length (posstr) > 24);
00121      1  1 
00122      1  1 key := posstr[1];
00123      1  1 ipt := posofstr_REGIS (substr (posstr,2,length(posstr)-1));
00124      1  1 REGIS_control.ginpos := '[' + strofi_REGIS
00125      1  1                         (ipt.ix DIV REGIS_control.xresolution)
00126      1  1                       + ',' + strofi_REGIS
00127      1  1                         (ipt.iy DIV REGIS_control.yresolution) + ']';
00128      0  0 END;
00129   C  0  0 {-----------------------------------------------------------------------------}
00130      0  0 [GLOBAL]
00131      1  0 FUNCTION readmenu_VT240 (default : char;  toplevel : boolean;
00132      1  0    helpprefix : anystring) : command_type;
00133      1  1 BEGIN
00134      1  1 readmenu_VT240 := readmenu_ansi (default,toplevel,helpprefix,true);
00135      0  0 END;
00136   C  0  0 {-----------------------------------------------------------------------------}
00137      0  0 [ GLOBAL ]
00138      1  0 PROCEDURE termconfig_VT240 (configcontrol : configcontrol_type);
00139      1  1 BEGIN
00140      1  2 CASE configcontrol OF
00141      1  3    CON:  BEGIN
00142      1  3          config_REGIS (800,500);
00143      1  3          qiowwrite (ESC + '>');
00144      1  3          config.ch.width       := REGIS_control.xresolution * 10;
00145      1  3          config.ch.height      := REGIS_control.yresolution * 20;
00146      1  3          config.ch.charspacing := REGIS_control.xresolution * 3;
00147      1  3          config.ch.linespacing := REGIS_control.yresolution * 6;
00148      1  3          config.resolution     := imax (REGIS_control.xresolution,
00149      1  3                                         REGIS_control.yresolution);
00150      1  3          config.dotsize        := config.resolution;
00151      1  3          config.starsize       := config.resolution*3;
00152      1  3          config.ansi364        := true;
00153      1  3          config.drawblack      := true;
00154      1  2          END;
00155      1  2    QUE:  ;
00156      1  2    REP:  ;
00157      1  1    END;
00158      0  0 END;
00159   C  0  0 {=============================================================================}
00160      0  0 END.

TERM_VT240                                                      23-Dec-1988 10:13:32    VAX Pascal V3.7-254                Page    4
QPLOT                           Pascal Compilation Statistics   19-Nov-1987 14:36:45    DUA1:[QPLOT.QPLOT.SOURCE]VT240.TERM;27 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                2729  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]MATH.PEN;1                       59         3         5
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         0         0
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        49        23
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        23        25
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        57        56
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        14        26
DUA1:[QPLOT.QPLOT.SOURCE]TERM_REGIS.PEN;1                109        33        30



TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:MATH',
00004      0  0                'QLIBHOME:STRING',
00005      0  0                'QLIBHOME:COLOR',
00006      0  0                'QLIBHOME:FIG',
00007      0  0                'QLIBHOME:TERM_VAX',
00008      0  0                'QLIBHOME:TERM_ANSI',
00009      0  0                'QLIBHOME:TERM_REGIS'),
00010      0  0   ENVIRONMENT ('QLIBHOME:VT241.TEN') ]
00011      0  0 MODULE term_VT241;
00012      0  0 [ HIDDEN ] VAR
00013      0  0    paneltoopen : boolean := false;
00014      0  0    panelopen   : boolean := false;
00015   C  0  0 {=============================================================================}
00016   C  0  0 {-- PROCEDURES FOR TERMINAL TYPE VT241 ---------------------------------------}
00017   C  0  0 {=============================================================================}
00018      0  0 [ GLOBAL ]
00019      1  0 FUNCTION termname_VT241 (i : integer) : devname_type;
00020      1  1 BEGIN
00021      1  2 CASE i OF
00022      1  2    0: termname_VT241 := '1';
00023      1  2    1: termname_VT241 := 'VT241   ';
00024      1  1    END;
00025      0  0 END;
00026   C  0  0 {-----------------------------------------------------------------------------}
00027      0  0 [ GLOBAL ]
00028      1  0 PROCEDURE colorsetup_VT241;
00029   C  1  0 {------------------------------}
00030      2  0 PROCEDURE bufferempty;
00031      2  1 BEGIN
00032      2  1 IF env.buffer <> ''
00033      2  1  THEN
00034      2  2   BEGIN
00035      2  2   qiowwrite (env.buffer + ';');
00036      2  2   env.buffer := '';
00037      2  1   END;
00038      1  0 END;
00039   C  1  0 {------------------------------}
00040      1  1 BEGIN
00041      1  1 initpalette (termpalette,4,2,false);
00042      1  1 IF env.mode = M_TEXT
00043      1  1  THEN
00044      1  2   BEGIN
00045      1  2   qiowwrite (ESC + 'Pp' + CRLF);
00046      1  2   qiowwrite ('S(I0)' + CRLF);
00047      1  2   getcolorindex_REGIS (termpalette,'TEXTBOX',bufferempty);
00048      1  2   getcolorindex_REGIS (termpalette,'CURSOR_1',bufferempty);
00049      1  2   getcolorindex_REGIS (termpalette,'TEXTCHAR',bufferempty);
00050      1  2   qiowwrite ('W(I2)' + CRLF);
00051      1  2   qiowwrite (ESC + '\' + ESC + '[1;24r' + ESC + '[24;1H' + CRLF);
00052      1  2   env.mode := M_TEXT;
00053      1  2   END
00054      1  1  ELSE
00055      1  2   BEGIN

TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

-LINE-IDC-PL-SL-

00056      1  2   qiowwrite ('S(I0)' + CRLF);
00057      1  2   getcolorindex_REGIS (termpalette,'PLOTBACK',bufferempty);
00058      1  1   END;
00059      0  0 END;
00060   C  0  0 {-----------------------------------------------------------------------------}
00061      0  0 [ GLOBAL ]
00062      1  0 PROCEDURE executecom_VT241;
00063      1  0 VAR
00064      1  0    j    : integer;
00065      1  0    hlsa : hlsa_type;
00066   C  1  0 {------------------------------}
00067      2  0 PROCEDURE bufferempty;
00068      2  1 BEGIN
00069      2  1 IF env.mode IN [M_TEXT,M_DUAL]
00070      2  1  THEN 
00071      2  2   BEGIN
00072      2  2   qiowwrite (ESC + 'Pp');
00073      2  2   env.mode := M_PLOT;
00074      2  2   colorsetup_VT241;
00075      2  1   END;
00076      2  1 IF env.buffer <> ''
00077      2  1  THEN
00078      2  2   BEGIN
00079      2  2   qiowwrite (env.buffer + '' + CRLF);
00080      2  2   env.buffer := '';
00081      2  1   END;
00082      1  0 END;
00083   C  1  0 {------------------------------}
00084      1  1 BEGIN
00085      1  2 WITH plotitem DO CASE ins OF
00086      1  3    I_col:  BEGIN
00087      1  3            bufferempty;
00088      1  3            j := getcolorindex_REGIS (termpalette,st,bufferempty);
00089      1  3            IF env.visible THEN env.buffer := 'W(I' + strofi(j-1,1) + ')';
00090      1  3            bufferempty;
00091      1  2            END;
00092      1  3    I_pan:  BEGIN
00093      1  3            bufferempty;
00094      1  3            j := getcolorindex_REGIS (termpalette,st,bufferempty);
00095      1  3            IF env.visible THEN env.buffer := 'W(I' + strofi(j-1,1) + ')';
00096      1  3            bufferempty;
00097      1  3            hlsa := hlsaofcolor (st);
00098      1  3            paneltoopen := hlsa.attribute <> 'C';
00099      1  2            END;
00100      1  3    I_clo:  BEGIN
00101      1  3            IF panelopen
00102      1  3             THEN
00103      1  4              BEGIN
00104      1  4              env.buffer := env.buffer + ');';
00105      1  4              panelopen := false;
00106      1  3              END;
00107      1  3            bufferempty;
00108      1  2            END;
00109      1  3    I_pos:  BEGIN
00110      1  3            bufferempty;

TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

-LINE-IDC-PL-SL-

00111      1  3            env.pos.ix := ix;
00112      1  3            env.pos.iy := iy;
00113      1  2            END;
00114      1  3    I_dra:  BEGIN
00115      1  3            IF paneltoopen
00116      1  3             THEN 
00117      1  4              BEGIN
00118      1  4              env.buffer := env.buffer + 'P' + strofpos_REGIS + 'F(';
00119      1  4              paneltoopen := false;
00120      1  4              panelopen := true;
00121      1  3              END;
00122      1  3            draw_REGIS (ix,iy,bufferempty);
00123      1  2            END;
00124      1  2    I_siz:  ;
00125      1  2    I_mar:  ;
00126      1  2    I_pri:  IF env.visible AND (st <> '') 
00127      1  2             THEN 
00128      1  3              BEGIN
00129      1  3              bufferempty;
00130      1  3              env.pos.iy := env.pos.iy + config.ch.height
00131      1  3                                       - config.ch.linespacing;
00132      1  3              env.buffer := 'P' + strofpos_REGIS + 'T(S1)"' + st + '"';
00133      1  3              env.pos.iy := env.pos.iy - config.ch.height
00134      1  3                                       + config.ch.linespacing;
00135      1  3              bufferempty;
00136      1  2              END;
00137      1  2    I_emp:  bufferempty;
00138      1  1    END;
00139      0  0 END;
00140   C  0  0 {-----------------------------------------------------------------------------}
00141      0  0 [ GLOBAL ]
00142      1  0 PROCEDURE writeterm_VT241 (str : VARYING [l2] OF char);
00143      1  1 BEGIN
00144      1  1 IF env.mode = M_PLOT
00145      1  1  THEN
00146      1  2   BEGIN
00147      1  2   env.mode := M_DUAL;
00148      1  2   qiowwrite (ESC + '\' + ESC + '[21;24r' + ESC + '[24;1H' + CRLF);
00149   C  1  2   {exit graphics mode}
00150      1  1   END;
00151      1  1 qiowwritevirtual (str);
00152      0  0 END;
00153   C  0  0 {-----------------------------------------------------------------------------}
00154      0  0 [ GLOBAL ]
00155      1  0 PROCEDURE readterm_VT241 (VAR outstr : VARYING [l2] OF char);  
00156      1  1 BEGIN
00157      1  1 readterm_vax (outstr);
00158      0  0 END;
00159   C  0  0 {-----------------------------------------------------------------------------}
00160      0  0 [ GLOBAL ]
00161      1  0 PROCEDURE screenerase_VT241;
00162      1  1 BEGIN
00163      1  1 screenerase_REGIS;
00164      1  1 env.mode := M_TEXT;
00165      1  1 colorsetup_VT241;

TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

-LINE-IDC-PL-SL-

00166      1  1 paneltoopen := false;
00167      0  0 END;
00168   C  0  0 {-----------------------------------------------------------------------------}
00169      0  0 [ GLOBAL ]
00170      1  0 PROCEDURE screencopy_VT241;
00171      1  1 BEGIN
00172      1  1 screencopy_REGIS;
00173      0  0 END;
00174   C  0  0 {-----------------------------------------------------------------------------}
00175      0  0 [ GLOBAL ]
00176      1  0 PROCEDURE gin_VT241 (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00177      1  0 VAR
00178      1  0    tbuffer,posstr : VARYING [80] OF char;
00179      1  1 BEGIN
00180      1  1 IF env.mode IN [M_TEXT,M_DUAL]
00181      1  1  THEN qiowwrite (ESC + 'Pp');
00182      1  1 
00183      1  1 qiowwrite (ESC + '\' + ESC + '[2h' + ESC + 'Pp'); {Lock keyboard}
00184      1  1 env.mode := M_PLOT;
00185      1  1 tbuffer := '';
00186      1  1 qiowreadnoechopurge (tbuffer,0);
00187      1  1 qiowwrite ('P' + REGIS_control.ginpos); 
00188      1  1 qiowwrite (ESC + '\' + ESC + '[2l' + ESC + 'Pp'); {Unlock keyboard}
00189      1  1 qiowwrite ('R(P(I))'); 
00190      1  1 
00191   C  1  1 { POSITION CURSOR; REPORT POSITION - INTERACTIVE MODE }
00192      1  1 posstr := '    ';
00193      1  1 qiowreadnoecho (posstr,4);
00194      1  2 REPEAT
00195      1  2    tbuffer := ' ';
00196      1  2    qiowreadnoecho (tbuffer,1);
00197      1  2    posstr := posstr + tbuffer[1];
00198      1  1    UNTIL (tbuffer[1] IN [']']) OR (length (posstr) > 24);
00199      1  1 
00200      1  1 key := posstr[1];
00201      1  1 ipt := posofstr_REGIS (substr (posstr,2,length(posstr)-1));
00202      1  1 REGIS_control.ginpos := '[' + strofi_REGIS
00203      1  1                         (ipt.ix DIV REGIS_control.xresolution)
00204      1  1                       + ',' + strofi_REGIS
00205      1  1                         (ipt.iy DIV REGIS_control.yresolution) + ']';
00206      0  0 END;
00207   C  0  0 {-----------------------------------------------------------------------------}
00208      0  0 [GLOBAL]
00209      1  0 FUNCTION readmenu_VT241 (default : char;  toplevel : boolean;
00210      1  0    helpprefix : anystring) : command_type;
00211      1  1 BEGIN
00212      1  1 readmenu_VT241 := readmenu_ansi (default,toplevel,helpprefix,true);
00213      0  0 END;
00214   C  0  0 {-----------------------------------------------------------------------------}
00215      0  0 [ GLOBAL ]
00216      1  0 PROCEDURE termconfig_VT241 (configcontrol : configcontrol_type);
00217      1  1 BEGIN
00218      1  2 CASE configcontrol OF
00219      1  3    CON:  BEGIN
00220      1  3          config_REGIS (800,500);

TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

-LINE-IDC-PL-SL-

00221      1  3          qiowwrite (ESC + '>');
00222      1  3          config.ch.width       := REGIS_control.xresolution * 10;
00223      1  3          config.ch.height      := REGIS_control.yresolution * 20;
00224      1  3          config.ch.charspacing := REGIS_control.xresolution * 3;
00225      1  3          config.ch.linespacing := REGIS_control.yresolution * 6;
00226      1  3          config.resolution     := imax (REGIS_control.xresolution,
00227      1  3                                         REGIS_control.yresolution);
00228      1  3          config.dotsize        := config.resolution;
00229      1  3          config.starsize       := config.resolution*3;
00230      1  3          config.ansi364        := true;
00231      1  3          config.drawblack      := true;
00232      1  2          END;
00233      1  2    QUE:  ;
00234      1  2    REP:  ;
00235      1  1    END;
00236      0  0 END;
00237   C  0  0 {-----------------------------------------------------------------------------}
00238      0  0 END.

TERM_VT241                                                      23-Dec-1988 10:15:06    VAX Pascal V3.7-254                Page    6
QPLOT                           Pascal Compilation Statistics   15-Jan-1988 09:34:19    DUA1:[QPLOT.QPLOT.SOURCE]VT241.TERM;58 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                4537  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  2  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(0)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        45        36
DUA1:[QPLOT.QPLOT.SOURCE]MATH.PEN;1                       59         3         5
DUA1:[QPLOT.QPLOT.SOURCE]STRING.PEN;1                     72         8        11
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        42        45
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        49        23
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        57        56
DUA1:[QPLOT.QPLOT.SOURCE]TERM_ANSI.PEN;1                  53        14        26
DUA1:[QPLOT.QPLOT.SOURCE]TERM_REGIS.PEN;1                109        55        50



TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    1
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00001      0  0 [ IDENT       ('QPLOT'),
00002      0  0   INHERIT     ('QLIBHOME:STANDARD',
00003      0  0                'QLIBHOME:COLOR',
00004      0  0                'QLIBHOME:FIG',
00005      0  0                'QLIBHOME:TERM_VAX',
00006      0  0                'QLIBHOME:HARDIO',
00007      0  0                'QLIBHOME:DUMB.TEN',
00008      0  0                'QLIBHOME:ERGO301.TEN',
00009      0  0                'QLIBHOME:NONE.TEN',
00010      0  0                'QLIBHOME:PCPLOT.TEN',
00011      0  0                'QLIBHOME:TEK4010.TEN',
00012      0  0                'QLIBHOME:TEK4014.TEN',
00013      0  0                'QLIBHOME:TEK4016.TEN',
00014      0  0                'QLIBHOME:TEK4105.TEN',
00015      0  0                'QLIBHOME:TEK4106.TEN',
00016      0  0                'QLIBHOME:TEK4107.TEN',
00017      0  0                'QLIBHOME:TEK4114.TEN',
00018      0  0                'QLIBHOME:VDITERM.TEN',
00019      0  0                'QLIBHOME:VERSAMAC.TEN',
00020      0  0                'QLIBHOME:VT100.TEN',
00021      0  0                'QLIBHOME:VT125.TEN',
00022      0  0                'QLIBHOME:VT240.TEN',
00023      0  0                'QLIBHOME:VT241.TEN'),
00024      0  0   ENVIRONMENT ('QLIBHOME:TERMIO')]
00025      0  0 MODULE termio;
00026      0  0 VAR
00027      0  0    TERMIDLIM      : integer := 17;
00028      0  0    DUMBID         : integer :=  1;
00029   C  0  0 {=============================================================================}
00030      0  0 [ GLOBAL ]
00031      1  0 FUNCTION termname (i,j : integer) : devname_type;
00032      1  1 BEGIN
00033      1  2 CASE i OF
00034      1  2     1:  termname := termname_DUMB      (j);
00035      1  2     2:  termname := termname_ERGO301   (j);
00036      1  2     3:  termname := termname_NONE      (j);
00037      1  2     4:  termname := termname_PCPLOT    (j);
00038      1  2     5:  termname := termname_TEK4010   (j);
00039      1  2     6:  termname := termname_TEK4014   (j);
00040      1  2     7:  termname := termname_TEK4016   (j);
00041      1  2     8:  termname := termname_TEK4105   (j);
00042      1  2     9:  termname := termname_TEK4106   (j);
00043      1  2    10:  termname := termname_TEK4107   (j);
00044      1  2    11:  termname := termname_TEK4114   (j);
00045      1  2    12:  termname := termname_VDITERM   (j);
00046      1  2    13:  termname := termname_VERSAMAC  (j);
00047      1  2    14:  termname := termname_VT100     (j);
00048      1  2    15:  termname := termname_VT125     (j);
00049      1  2    16:  termname := termname_VT240     (j);
00050      1  2    17:  termname := termname_VT241     (j);
00051      1  1    END;
00052      0  0 END;
00053   C  0  0 {-----------------------------------------------------------------------------}
00054      0  0 [ GLOBAL ]
00055      1  0 PROCEDURE colorsetup;

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    2
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00056      1  1 BEGIN
00057      1  2 CASE terminal.id OF
00058      1  2     1:  colorsetup_DUMB     ;
00059      1  2     2:  colorsetup_ERGO301  ;
00060      1  2     3:  colorsetup_NONE     ;
00061      1  2     4:  colorsetup_PCPLOT   ;
00062      1  2     5:  colorsetup_TEK4010  ;
00063      1  2     6:  colorsetup_TEK4014  ;
00064      1  2     7:  colorsetup_TEK4016  ;
00065      1  2     8:  colorsetup_TEK4105  ;
00066      1  2     9:  colorsetup_TEK4106  ;
00067      1  2    10:  colorsetup_TEK4107  ;
00068      1  2    11:  colorsetup_TEK4114  ;
00069      1  2    12:  colorsetup_VDITERM  ;
00070      1  2    13:  colorsetup_VERSAMAC ;
00071      1  2    14:  colorsetup_VT100    ;
00072      1  2    15:  colorsetup_VT125    ;
00073      1  2    16:  colorsetup_VT240    ;
00074      1  2    17:  colorsetup_VT241    ;
00075      1  1    END;
00076      0  0 END;
00077   C  0  0 {-----------------------------------------------------------------------------}
00078      0  0 [ GLOBAL ]
00079      1  0 PROCEDURE executecom;
00080      1  0 VAR
00081      1  0    hlsa : hlsa_type;
00082      1  1 BEGIN
00083      1  1 env.termclear := false;
00084      1  2 WITH plotitem DO CASE ins OF
00085      1  3    I_col:  BEGIN
00086      1  3            hlsa := hlsaofcolor (st);
00087      1  3            env.visible := (hlsa.attribute <> 'C') AND
00088      1  3                           (config.drawblack OR (hlsa.lightness > 0))
00089      1  2            END;
00090      1  2    I_pan:  ;
00091      1  2    I_clo:  ;
00092      1  2    I_pos:  ;
00093      1  2    I_dra:  ;
00094      1  3    I_siz:  BEGIN
00095      1  3            env.curch.width  := ix;
00096      1  3            env.curch.height := iy;
00097      1  2            END;
00098      1  3    I_mar:  BEGIN
00099      1  3            env.curch.charspacing := ix;
00100      1  3            env.curch.linespacing := iy;
00101      1  2            END;
00102      1  2    I_pri:  ;
00103      1  2    I_emp:  ;
00104      1  1    END;
00105      1  2 CASE terminal.id OF
00106      1  2     1:  executecom_DUMB     ;
00107      1  2     2:  executecom_ERGO301  ;
00108      1  2     3:  executecom_NONE     ;
00109      1  2     4:  executecom_PCPLOT   ;
00110      1  2     5:  executecom_TEK4010  ;

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    3
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00111      1  2     6:  executecom_TEK4014  ;
00112      1  2     7:  executecom_TEK4016  ;
00113      1  2     8:  executecom_TEK4105  ;
00114      1  2     9:  executecom_TEK4106  ;
00115      1  2    10:  executecom_TEK4107  ;
00116      1  2    11:  executecom_TEK4114  ;
00117      1  2    12:  executecom_VDITERM  ;
00118      1  2    13:  executecom_VERSAMAC ;
00119      1  2    14:  executecom_VT100    ;
00120      1  2    15:  executecom_VT125    ;
00121      1  2    16:  executecom_VT240    ;
00122      1  2    17:  executecom_VT241    ;
00123      1  1    END;
00124      0  0 END;
00125   C  0  0 {-----------------------------------------------------------------------------}
00126      0  0 [ GLOBAL ]
00127      1  0 PROCEDURE writeterm (str : VARYING [l2] OF char);
00128      1  1 BEGIN
00129      1  1 env.termclear := false;
00130      1  2 CASE terminal.id OF
00131      1  2     1:  writeterm_DUMB      (str);
00132      1  2     2:  writeterm_ERGO301   (str);
00133      1  2     3:  writeterm_NONE      (str);
00134      1  2     4:  writeterm_PCPLOT    (str);
00135      1  2     5:  writeterm_TEK4010   (str);
00136      1  2     6:  writeterm_TEK4014   (str);
00137      1  2     7:  writeterm_TEK4016   (str);
00138      1  2     8:  writeterm_TEK4105   (str);
00139      1  2     9:  writeterm_TEK4106   (str);
00140      1  2    10:  writeterm_TEK4107   (str);
00141      1  2    11:  writeterm_TEK4114   (str);
00142      1  2    12:  writeterm_VDITERM   (str);
00143      1  2    13:  writeterm_VERSAMAC  (str);
00144      1  2    14:  writeterm_VT100     (str);
00145      1  2    15:  writeterm_VT125     (str);
00146      1  2    16:  writeterm_VT240     (str);
00147      1  2    17:  writeterm_VT241     (str);
00148      1  1    END;
00149      0  0 END;
00150   C  0  0 {-----------------------------------------------------------------------------}
00151      0  0 [ GLOBAL ]
00152      1  0 PROCEDURE readterm (VAR outstr : VARYING [l2] OF char); 
00153      1  1 BEGIN
00154      1  1 env.termclear := false;
00155      1  2 CASE terminal.id OF
00156      1  2     1:  readterm_DUMB      (outstr);
00157      1  2     2:  readterm_ERGO301   (outstr);
00158      1  2     3:  readterm_NONE      (outstr);
00159      1  2     4:  readterm_PCPLOT    (outstr);
00160      1  2     5:  readterm_TEK4010   (outstr);
00161      1  2     6:  readterm_TEK4014   (outstr);
00162      1  2     7:  readterm_TEK4016   (outstr);
00163      1  2     8:  readterm_TEK4105   (outstr);
00164      1  2     9:  readterm_TEK4106   (outstr);
00165      1  2    10:  readterm_TEK4107   (outstr);

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    4
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00166      1  2    11:  readterm_TEK4114   (outstr);
00167      1  2    12:  readterm_VDITERM   (outstr);
00168      1  2    13:  readterm_VERSAMAC  (outstr);
00169      1  2    14:  readterm_VT100     (outstr);
00170      1  2    15:  readterm_VT125     (outstr);
00171      1  2    16:  readterm_VT240     (outstr);
00172      1  2    17:  readterm_VT241     (outstr);
00173      1  1    END;
00174      0  0 END;
00175   C  0  0 {-----------------------------------------------------------------------------}
00176      0  0 [ GLOBAL ]
00177      1  0 PROCEDURE screenerase (clearfile : boolean);
00178      1  1 BEGIN
00179      1  1 env.buffer := '';
00180      1  1 env.curch := config.ch;
00181      1  1 IF clearfile THEN rewrite (plotitemfile);
00182      1  2 IF NOT env.termclear THEN CASE terminal.id OF
00183      1  2     1:  screenerase_DUMB     ;
00184      1  2     2:  screenerase_ERGO301  ;
00185      1  2     3:  screenerase_NONE     ;
00186      1  2     4:  screenerase_PCPLOT   ;
00187      1  2     5:  screenerase_TEK4010  ;
00188      1  2     6:  screenerase_TEK4014  ;
00189      1  2     7:  screenerase_TEK4016  ;
00190      1  2     8:  screenerase_TEK4105  ;
00191      1  2     9:  screenerase_TEK4106  ;
00192      1  2    10:  screenerase_TEK4107  ;
00193      1  2    11:  screenerase_TEK4114  ;
00194      1  2    12:  screenerase_VDITERM  ;
00195      1  2    13:  screenerase_VERSAMAC ;
00196      1  2    14:  screenerase_VT100    ;
00197      1  2    15:  screenerase_VT125    ;
00198      1  2    16:  screenerase_VT240    ;
00199      1  2    17:  screenerase_VT241    ;
00200      1  1    END;
00201      1  1 env.mode := M_TEXT;
00202      1  1 env.termclear := true;
00203      0  0 END;
00204   C  0  0 {-----------------------------------------------------------------------------}
00205      0  0 [ GLOBAL ]
00206      1  0 PROCEDURE screencopy;
00207      1  0 VAR
00208      1  0    i    : integer;
00209      1  0    line : anystring;
00210      1  1 BEGIN
00211      1  1 env.termclear := false;
00212      1  1 IF      terminal.hardname = 'NONE    '
00213      1  1  THEN
00214      1  1 ELSE IF terminal.hardname = 'LOCAL   '
00215      1  1  THEN
00216      1  2   CASE terminal.id OF
00217      1  2     1:  screencopy_DUMB     ;
00218      1  2     2:  screencopy_ERGO301  ;
00219      1  2     3:  screencopy_NONE     ;
00220      1  2     4:  screencopy_PCPLOT   ;

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    5
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00221      1  2     5:  screencopy_TEK4010  ;
00222      1  2     6:  screencopy_TEK4014  ;
00223      1  2     7:  screencopy_TEK4016  ;
00224      1  2     8:  screencopy_TEK4105  ;
00225      1  2     9:  screencopy_TEK4106  ;
00226      1  2    10:  screencopy_TEK4107  ;
00227      1  2    11:  screencopy_TEK4114  ;
00228      1  2    12:  screencopy_VDITERM  ;
00229      1  2    13:  screencopy_VERSAMAC ;
00230      1  2    14:  screencopy_VT100    ;
00231      1  2    15:  screencopy_VT125    ;
00232      1  2    16:  screencopy_VT240    ;
00233      1  2    17:  screencopy_VT241    ;
00234      1  2      END
00235      1  1  ELSE 
00236      1  2   BEGIN
00237      1  2   writeterm ('Using Non-Local Hardcopy');
00238      1  2   hardmake;
00239      1  1   END;
00240      0  0 END;
00241   C  0  0 {-----------------------------------------------------------------------------}
00242      0  0 [ GLOBAL ]
00243      1  0 PROCEDURE gin (VAR key : char;  VAR ipt : ipoint;  color : color_type);
00244      1  1 BEGIN
00245      1  1 env.termclear := false;
00246      1  2 CASE terminal.id OF
00247      1  2     1:  gin_DUMB      (key,ipt,color);
00248      1  2     2:  gin_ERGO301   (key,ipt,color);
00249      1  2     3:  gin_NONE      (key,ipt,color);
00250      1  2     4:  gin_PCPLOT    (key,ipt,color);
00251      1  2     5:  gin_TEK4010   (key,ipt,color);
00252      1  2     6:  gin_TEK4014   (key,ipt,color);
00253      1  2     7:  gin_TEK4016   (key,ipt,color);
00254      1  2     8:  gin_TEK4105   (key,ipt,color);
00255      1  2     9:  gin_TEK4106   (key,ipt,color);
00256      1  2    10:  gin_TEK4107   (key,ipt,color);
00257      1  2    11:  gin_TEK4114   (key,ipt,color);
00258      1  2    12:  gin_VDITERM   (key,ipt,color);
00259      1  2    13:  gin_VERSAMAC  (key,ipt,color);
00260      1  2    14:  gin_VT100     (key,ipt,color);
00261      1  2    15:  gin_VT125     (key,ipt,color);
00262      1  2    16:  gin_VT240     (key,ipt,color);
00263      1  2    17:  gin_VT241     (key,ipt,color);
00264      1  1    END;
00265      1  1 env.ginflag := true;
00266      0  0 END;
00267   C  0  0 {-----------------------------------------------------------------------------}
00268      0  0 [GLOBAL]
00269      1  0 FUNCTION readmenu (default : char;  toplevel : boolean;  
00270      1  0    helpprefix : anystring) : command_type;
00271      1  1 BEGIN
00272      1  1 screenerase (true);
00273      1  2 CASE terminal.id OF
00274      1  2     1:  readmenu := readmenu_DUMB      (default,toplevel,helpprefix);
00275      1  2     2:  readmenu := readmenu_ERGO301   (default,toplevel,helpprefix);

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    6
QPLOT                           Source Listing                  23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

-LINE-IDC-PL-SL-

00276      1  2     3:  readmenu := readmenu_NONE      (default,toplevel,helpprefix);
00277      1  2     4:  readmenu := readmenu_PCPLOT    (default,toplevel,helpprefix);
00278      1  2     5:  readmenu := readmenu_TEK4010   (default,toplevel,helpprefix);
00279      1  2     6:  readmenu := readmenu_TEK4014   (default,toplevel,helpprefix);
00280      1  2     7:  readmenu := readmenu_TEK4016   (default,toplevel,helpprefix);
00281      1  2     8:  readmenu := readmenu_TEK4105   (default,toplevel,helpprefix);
00282      1  2     9:  readmenu := readmenu_TEK4106   (default,toplevel,helpprefix);
00283      1  2    10:  readmenu := readmenu_TEK4107   (default,toplevel,helpprefix);
00284      1  2    11:  readmenu := readmenu_TEK4114   (default,toplevel,helpprefix);
00285      1  2    12:  readmenu := readmenu_VDITERM   (default,toplevel,helpprefix);
00286      1  2    13:  readmenu := readmenu_VERSAMAC  (default,toplevel,helpprefix);
00287      1  2    14:  readmenu := readmenu_VT100     (default,toplevel,helpprefix);
00288      1  2    15:  readmenu := readmenu_VT125     (default,toplevel,helpprefix);
00289      1  2    16:  readmenu := readmenu_VT240     (default,toplevel,helpprefix);
00290      1  2    17:  readmenu := readmenu_VT241     (default,toplevel,helpprefix);
00291      1  1    END;
00292      0  0 END;
00293   C  0  0 {-----------------------------------------------------------------------------}
00294      0  0 [ GLOBAL ]
00295      1  0 PROCEDURE termconfig (configcontrol : configcontrol_type);
00296      1  1 BEGIN
00297      1  1 env.termclear := false;
00298      1  2 CASE terminal.id OF
00299      1  2     1:  termconfig_DUMB     (configcontrol);
00300      1  2     2:  termconfig_ERGO301  (configcontrol);
00301      1  2     3:  termconfig_NONE     (configcontrol);
00302      1  2     4:  termconfig_PCPLOT   (configcontrol);
00303      1  2     5:  termconfig_TEK4010  (configcontrol);
00304      1  2     6:  termconfig_TEK4014  (configcontrol);
00305      1  2     7:  termconfig_TEK4016  (configcontrol);
00306      1  2     8:  termconfig_TEK4105  (configcontrol);
00307      1  2     9:  termconfig_TEK4106  (configcontrol);
00308      1  2    10:  termconfig_TEK4107  (configcontrol);
00309      1  2    11:  termconfig_TEK4114  (configcontrol);
00310      1  2    12:  termconfig_VDITERM  (configcontrol);
00311      1  2    13:  termconfig_VERSAMAC (configcontrol);
00312      1  2    14:  termconfig_VT100    (configcontrol);
00313      1  2    15:  termconfig_VT125    (configcontrol);
00314      1  2    16:  termconfig_VT240    (configcontrol);
00315      1  2    17:  termconfig_VT241    (configcontrol);
00316      1  1    END;
00317      0  0 END;
00318   C  0  0 {-----------------------------------------------------------------------------}
00319      0  0 END.

TERMIO                                                          23-Dec-1988 10:17:02    VAX Pascal V3.7-254                Page    7
QPLOT                           Pascal Compilation Statistics   23-Dec-1988 10:16:59    DUA1:[QPLOT.QPLOT.SOURCE]TERMIO.PAS;76 (1)

PSECT SUMMARY

        Name                     Bytes                         Attributes

$CODE                                6371  NOVEC,NOWRT,  RD,  EXE,  SHR,  LCL,  REL,  CON,  PIC,ALIGN(2)
$LOCAL                                  8  NOVEC,  WRT,  RD,NOEXE,NOSHR,  LCL,  REL,  CON,  PIC,ALIGN(2)


ENVIRONMENT STATISTICS

                                                       -------- Symbols --------
        File                                           Total    Loaded   Percent

DUA1:[QPLOT.QPLOT.SOURCE]STANDARD.PEN;1                  124        39        31
DUA1:[QPLOT.QPLOT.SOURCE]COLOR.PEN;1                      93        23        25
DUA1:[QPLOT.QPLOT.SOURCE]FIG.PEN;1                       213        58        27
DUA1:[QPLOT.QPLOT.SOURCE]TERM_VAX.PEN;1                  101        29        29
DUA1:[QPLOT.QPLOT.SOURCE]HARDIO.PEN;1                     58         1         2
DUA1:[QPLOT.QPLOT.SOURCE]DUMB.TEN;1                       94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]ERGO301.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]NONE.TEN;1                       76        48        63
DUA1:[QPLOT.QPLOT.SOURCE]PCPLOT.TEN;1                    100        48        48
DUA1:[QPLOT.QPLOT.SOURCE]TEK4010.TEN;1                    84        48        57
DUA1:[QPLOT.QPLOT.SOURCE]TEK4014.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]TEK4016.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]TEK4105.TEN;1                    98        48        49
DUA1:[QPLOT.QPLOT.SOURCE]TEK4106.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]TEK4107.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]TEK4114.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VDITERM.TEN;1                    94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VERSAMAC.TEN;1                   94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VT100.TEN;1                      94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VT125.TEN;1                      94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VT240.TEN;1                      94        48        51
DUA1:[QPLOT.QPLOT.SOURCE]VT241.TEN;1                      94        48        51



