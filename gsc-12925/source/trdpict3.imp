   (* $INCLUDE : 'compile.inc' *)
   (* $INCLUDE : 'getparam.int'*)
   (* $INCLUDE : 'utility.int' *)
   (* $INCLUDE : 'vbpas.int'   *)
   (* $INCLUDE : 'display.int' *)
   (* $INCLUDE : 'sfpas.int'   *)
   (* $INCLUDE : 'option.int'  *)
   (* $INCLUDE : 'execute.int' *)
   (* $INCLUDE : 'trdpict.int'   *)
   (* $INCLUDE : 'trdexec.int'   *)

   implementation of trdpict;

      uses getparam;

      uses utility;

      uses vbpas;

      uses display;

      uses sfpas;

      uses option;

      uses execute;

      uses trdexec;

   procedure skeletrd; extern;

   procedure picture; extern;
   var
      def		   : suplstring2(8);
      x, y		   : supinteger(8);
      range		   : supset(16);
      msg		   : suplstring(25);
      old_total,temp_total : byte;
      oldy		   : integer;
      newnode		   : entity;
      tot,month 	   : string(2);
      buf		   : lstring(10);
      current_node	   : byte;

   procedure get_list;

   var
	 current  : entity;
	 i,j	  : byte;
	 nchar	  : integer;
	 numtype  : byte;
	 numberx  : integer;
	 numbery  : integer;
	 numxtex  : integer;
	 numytex  : integer;
	 boxwide  : integer;
	 boxhigh  : integer;
	 temytex  : integer;

   begin

      current := first^.up;
      delete ( current );
      current := first^.up^.up^.up^.up
      delete ( current );
      delete ( current );
      numtype := current^.etype;
      numberx := current^.x;
      numbery := current^.y;
      numxtex := current^.xtext;
      numytex := current^.ytext;
      temytex := numytex;
      nchar   := xy[49];
      boxhigh := xy[9];
      boxwide := xy[40];

      for j := 1 to (3 * total) do
	 begin
	    if ( (j mod total) = 1 ) and ( j <> 1 ) then
		begin	       (* for initial value of ACWP and BCWP *)
		  create ( newnode, numtype );
		  newnode^.etype := numtype;
		  newnode^.x	 := numberx;
		  newnode^.y	 := current^.y + boxhigh;
		  temytex	 := temytex + 1;
		  newnode^.xtext := numxtex ;
		  newnode^.ytext := temytex ;
		  link ( current, newnode );
		end;  (* if *)
	    create ( newnode, numtype );
	    newnode^.etype := numtype;
	    newnode^.x	   := current^.x + boxwide ;
	    newnode^.y	   := current^.y ;
	    if ( total > 6 ) and ( j in [7, 7+total, 7+(2*total)] ) then
	       begin
		  newnode^.xtext := numxtex + nchar ;
		  newnode^.ytext := temytex + 5 ;
	       end
	    else
	       begin
		  newnode^.xtext := current^.xtext + nchar;
		  newnode^.ytext := current^.ytext;
	       end;
	    link ( current, newnode );
	 end; (* for *)

      temytex := numytex;
      current := first^.up;

      for i := 1 to 2 do
	begin
	  create ( newnode, current^.etype );
	  link ( current, newnode );
	  with current^ do
	    begin
	      x := up^.x;
	      y := up^.y + 8;
	      xtext := up^.xtext;
	      ytext := up^.ytext + 1 ;
	    end; (* with *)
	end;	 (* for *)
   end; 	 (* get list *)

(************************************************)

procedure format;
var
      i,j,n		   : integer;

begin
   msg[1]  := '                      Trend Analysis Chart Format Options' ;

   msg[2]  := '                                     ';

   msg[3]  := '                              Default';
   concat  (msg[3],'                                  Default');
   msg[4]  := '                                     ';

   msg[5]  := 'Starting year    (yy):               ';
   msg[6]  := '                                     ';
   msg[7]  := 'Starting month   (mm):               ';
   msg[8]  := '                                     ';
   msg[9]  := 'Type of period:                      ';
   msg[10] := '  M = months    Q = quarters         ';
   msg[11] := '  Y = years                          ';
   msg[12] := '                                     ';
   msg[13] := 'Number of periods   (1 - 12):        ';
   msg[14] := '      (can not be decreased)         ';
   msg[15] := '                                     ';
   msg[16] := 'Start of Fiscal Year:                ';
   msg[17] := '  C = calendar   A = April           ';
   msg[18] := '  J = July       O = October         ';
   msg[19] := '                                     ';
   msg[20] := '                                     ';
   msg[21] := '                                     ';
   msg[22] := '  Modify default options as needed - press return key for next option.';
   msg[23] := '  Select F2 to begin creating chart';
   msg[24] := '                                       ';
   msg[25] := null;

   buf.len := 1;
   for i := 1 to 10 do
     if fctn_map^[1][i] <> 0 then
	 begin
	    if i < 10 then  [ buf[1] := chr( i + 48 );
			      concat (msg [25], buf ); ]
		      else    concat (msg [25], '10');
	    if fctn_map^[1][i] = 7 then concat( msg[25], 'End ' );
	    concat (msg [25], fctn_tag^[fctn_map^[1][i] ] );
	    if i < 10 then concat (msg [25], ' ' );
	    if i = 2 then while msg[25].len < 21 do concat( msg[25], ' ' );
	    if i = 7 then while msg[25].len < 60 do concat( msg[25], ' ' );
	 end; (* for *)

   for i := 4 to 19 do concat ( msg[i], chr(219) );(* append the center line *)


   concat ( msg[5],  '  Values to be entered:                ');
   concat ( msg[6],  '    C = cumulative  I = incremental    ');
   concat ( msg[10], '  GFSC  symbol  (N = no, Y = yes):    ');
   concat ( msg[14], '  Background color:                    ');
   concat ( msg[15], '    X = black       W = white          ');
   concat ( msg[16], '    R = red         M = magenta        ');
   concat ( msg[17], '    G = green       Y = yellow         ');
   concat ( msg[18], '    B = blue        C = cyan           ');

   (*	set the default value	 *)

   def[1][1] := year[1];   def[1][2] := year[2];     (* year *)
						     (* month *)
   if start > 9 then [ month[1] := '1';  month[2] := chr( start + 48 - 10 ); ]
		else [ month[1] := ' ';  month[2] := chr( start + 48 ); ];
   def[2][1] := month[1];   def[2][2] := month[2];

   def[3][1] := ' ';                                 (* type of period *)
   case period of
	0     : def[3][2] := 'M' ;
	1..4  : def[3][2] := 'Q' ;
	5     : def[3][2] := 'Y' ;
   end;
						     (* total # of periods *)
   if total > 9 then [ tot[1] := '1' ;  tot[2] := chr( total + 48 - 10)]
		else [ tot[1] := ' ' ;  tot[2] := chr( total + 48 ) ];
   copylst( tot, def[4] );

   if update then old_total := total
   else begin
	if first_create then begin
	   current := first;
	   while current^.etype <> 11 do current := current^.down ;
	   repeat
		size := current^.field^.len ;
		for i := 1 to size do
		    if current^.field^[i] <> ' ' then
			 first_create := false ;
		current := current^.down;
	   until ( current^.etype <> 11 ) or ( not first_create );
	end; (* if first_create *)
	if first_create then [ old_total := 0 ;
			       first_create := false ;]
			else
			       old_total := total ;
   end; (* if update *)

   for i := 5 to 8 do def[i][1] := ' ';

   case fiscal_year of				(* start of fiscal year *)
	0  : def[5][2] := 'C' ;
	1  : def[5][2] := 'A' ;
	2  : def[5][2] := 'J' ;
	3  : def[5][2] := 'O' ;
   end;

   if enter_mode = 0 then def[6][2] := 'C'      (* value to be enter *)
		     else def[6][2] := 'I';

   if symbol = 0 then def[7][2] := 'N'
		 else def[7][2] := 'Y';         (* GFSC symble *)

   case color of				(* background color *)
	0 : def[8][2] := 'X' ;
	1 : def[8][2] := 'B' ;
	2 : def[8][2] := 'G' ;
	3 : def[8][2] := 'C' ;
	4 : def[8][2] := 'R' ;
	5 : def[8][2] := 'M' ;
	6 : def[8][2] := 'Y' ;
	7 : def[8][2] := 'W' ;
   end;

   for i := 1 to 8 do def[i].len := 2 ;

   (* set the default location x y *)

   y[1] := 4;  y[2] := 6;  y[3] := 8;  y[4] :=12;
   y[5] := 15; y[6] := 4;  y[7] :=  9; y[8] := 13;
   for i := 1 to 5 do x[i] := 33 ;
   for i := 6 to 8 do x[i] := 73 ;

   (* valid set of format options *)

   range[1]  := [ '0'..'9' ];
   range[2]  := [ '0'..chr( 48 + 99 ) ] ;          (* range of year : 0..99 *)

   range[3]  := [ '0'..'9' ];
   range[4]  := [ '1'..chr( 48 + 12 ) ] ;          (* range of month : 1..12 *)

   range[5]  := [' '];                               (* type of period *)
   range[6]  := ['m', 'q', 'y', 'M', 'Q', 'Y' ];

   range[7]  := [ '0'..'9' ];                      (* total # of the periods *)
   if old_total <> 0 then			   (* old_total - 12 *)
      range[8]	:= [ chr( old_total + 48 )..chr( 48 + 12 ) ]
   else
      range[8]	:= [ '1'..chr( 48 + 12 ) ] ;

   range[9]  := [' '];                               (* start of fiscal year *)
   range[10] := ['c', 'a', 'j', 'o', 'C', 'A', 'J', 'O' ];

   range[11] := [' '];                               (* enter mode   *)
   range[12] := [ 'c', 'i', 'C', 'I' ];

   range[13] := [' '];                               (* GFSC  symbol *)
   range[14] := [ 'n', 'y', 'N', 'Y' ]

   range[15] := [' '];                               (* Background color *)
   range[16] := [ 'x', 'w', 'r', 'm', 'g', 'y', 'b', 'c',
		  'X', 'W', 'R', 'M', 'G', 'Y', 'B', 'C' ];

   (* display format menu and accept the user option *)

   multimenu( msg, 25, 0, 8, def, x, y, range, inkey, 2 );

   for n := 1 to 8 do
       case n of
	    1  : begin
		    year.len  := 2;
		    if def[1][1] = ' ' then def[1][1] := chr( 48 );
		    year[1] := def[1][1]; year[2] := def[1][2];
		 end;
	    2  : begin
		    if def[2][1] = ' ' then def[2][1] := chr( 48 ) ;
		    start := ( ord(def[2][1]) - 48)*10 + ord( def[2][2] ) - 48;
		 end;
	    3  : case def[3][2] of
		     'm', 'M' : period := 0;
		     'q', 'Q' : period := 1;
		     'y', 'Y' : period := 5;
		 end;
	    4  : begin
		   if def[4][1] = ' ' then  def[4][1] := chr(48) ;
		   total := ( ord( def[4][1] ) - 48)*10 + ord( def[4][2] ) -48;
		  end;
	     5	: case def[5][2] of
		    'c', 'C' : fiscal_year := 0;
		    'a', 'A' : fiscal_year := 1;
		    'j', 'J' : fiscal_year := 2;
		    'o', 'O' : fiscal_year := 3;
		  end;
	     6	: case def[6][2] of
		    'c', 'C' : enter_mode := 0;
		    'i', 'I' : enter_mode := 1;
		  end;
	     7	: case def[7][2] of
		    'n', 'N' : symbol := 0;
		    'y', 'Y' : symbol := 1;
		  end;
	     8	: case def[8][2] of
		    'x', 'X' : color  := 0 ;
		    'b', 'B' : color  := 1 ;
		    'g', 'G' : color  := 2 ;
		    'c', 'C' : color  := 3 ;
		    'r', 'R' : color  := 4 ;
		    'm', 'M' : color  := 5 ;
		    'y', 'Y' : color  := 6 ;
		    'w', 'W' : color  := 7 ;
		   end;
	      otherwise
	 end; (* case n *)

  if (period <> 0) and (period <> 5) then
      period := (( ((start-1) div 3) + 4 - fiscal_year) mod 4 ) + 1 ;

  if   ( old_total = 0 ) and ( total <> 12 )  then begin
      current := first;
      while current^.etype <> 11 do  current := current^.down;
      n := 12 - ord(total);
      for i := 1 to 3  do begin
	  for j := 1 to (total+1) do  current := current^.down;
	  for j := 1 to n  do  delete ( current );
      end; (* for i *)
  end;

  current := first;
  if total > old_total	then begin
      while current^.etype <> 11 do  current := current^.down;
      for i := 1 to 3  do begin
	oldy := current^.y;
	for j := 1 to total  do begin
	    if (oldy <> current^.down^.y) and (j <> 1) then
	       with current^  do  begin
		  create ( newnode, 11);
		  newnode^.x := x + skeleton^[40];
		  newnode^.y := y;
		  if ( total > 6 ) and ( j = 7 )  then
		     [ newnode^.xtext := node_data^[11].xtext + skeleton^[49];
		       newnode^.ytext := ytext + 5; ]
		  else
		     [ newnode^.xtext := xtext + skeleton^[49];
		       newnode^.ytext := ytext;];
		  link ( current, newnode );
		  current := current^.up;
	       end; (* if oldy *)
	    current := current^.down;
	end; (* for j *)
	current := current^.down;
      end; (* for i *)
  end; (* if total *)

     current := first;	   (* if values are cumulative and y was not changed *)
     while current^.etype <> 11 do current := current^.down;
     if (enter_mode = 0) and (node_data^[11].y = current^.y) then
	 repeat
	    current^.y := current^.y + 32;
	    current := current^.down;
	 until current^.etype <> 11;
     if (enter_mode = 1) and (node_data^[11].y <> current^.y) then
	 repeat
	    current^.y := current^.y - 32;
	    current := current^.down;
	 until current^.etype <> 11;

     screen (3); colors (0,color);
     inkey := fctn_map^[1][inkey-58];
     if inkey in [1,4,5]  then current_node := 0
			  else current_node := current^.etype;

     if inkey = 7 then inkey := 3;
     if not( inkey in [ 1,2,4,5,7,41 ] ) then  redraw(1,current,first);

     perform2 ( inkey, first, name, skeleton^ );
     perform  ( inkey, current, current_node, first );

     if inkey in [4,5] then redraw( 1, current, first );
 end;


 procedure chartinfo;

 var

       current : entity;
       i, l    : integer;
   begin

      current := first^.up;
      case code of
       1 :  begin
	      create ( newnode, 12 );
	      with newnode^ do
		begin
		  field^.len := 18;
		  x := 0;
		  y := 0;
		  xtext := 0;
		  ytext := 0;
		  field^[1] := year[1];
		  field^[2] := year[2];
		  field^[3] := chr ( period + 48 );
		  field^[4] := chr ( color  + 48 );
		  field^[5] := chr ( varno  + 48 );
		  field^[6] := chr (color3[1] + 48 );
		  field^[7] := chr (color3[2] + 48 );
		  field^[8] := chr (color3[3] + 48 );
		  field^[9] := chr (pattern3[1] + 48 );
		  field^[10]:= chr (pattern3[2] + 48 );
		  field^[11]:= chr (pattern3[3] + 48 );

		  if total > 9 then [ tot[1] := '1'; tot[2] := chr ( total + 48 - 10 ) ]
			       else [ tot[1] := ' '; tot[2] := chr ( total + 48 ) ];

		  if start > 9 then [ month[1] := '1'; month[2] := chr ( start + 48 - 10 ) ]
			       else [ month[1] := ' '; month[2] := chr ( start + 48 ) ];
		  field^[12] := tot[1];
		  field^[13] := tot[2];
		  field^[14] := month[1];
		  field^[15] := month[2];
		  field^[16] := chr ( symbol + 48 );
		  field^[17] := chr ( fiscal_year + 48);
		  field^[18] := chr ( enter_mode  + 48);
	       end;
	     link ( current, newnode );

	     current := first;
	     repeat
		if current^.etype = 11 then current^.y :=current^.y+22;
		current := current^.down;
	     until current = first;


	     current := first;
	     for l := 1 to 7 do
		current := current^.down;
	     add_node ( current, 9 );
	     with current^ do
		begin
		  for l := 1 to bac.len do
		    field^[l] := bac[l];
		  field^.len := bac.len;
		  x := node_data^[etype].x;
		  y := node_data^[etype].y;
		end;
	     add_node ( current, 10 );
	     with current^ do
		begin
		  for l := 1 to eac.len do
		    field^[l] := eac[l];
		  field^.len := eac.len;
		  x := node_data^[etype].x;
		  y := node_data^[etype].y;
		end;
	   end;

      2   : begin
	     with current^ do
	       begin
		  year.len := 2;
		  year[1]     :=      field^[1];
		  year[2]     :=      field^[2];
		  period      := ord( field^[3] ) - 48;
		  color       := ord( field^[4] ) - 48;
		  varno       := ord( field^[5] ) - 48;
		  if varno > 3 then varno := 3;
		  color3[1]   := ord( field^[6] ) - 48;
		  color3[2]   := ord( field^[7] ) - 48;
		  color3[3]   := ord( field^[8] ) - 48;
		  pattern3[1] := ord( field^[9] ) - 48;
		  pattern3[2] := ord( field^[10]) - 48;
		  pattern3[3] := ord( field^[11]) - 48;
		  tot[1]      :=      field^[12];
		  tot[2]      :=      field^[13];
		  month[1]    :=      field^[14];
		  month[2]    :=      field^[15];
		  symbol      := ord( field^[16]) - 48;
		  fiscal_year := ord( field^[17]) - 48;
		  enter_mode  := ord( field^[18]) - 48;
		  if month[1] = ' ' then start := ord ( month[2] ) - 48
				    else start := (ord ( month[1] ) - 48)* 10 + ord ( month[2] ) -48;
		  if tot[1] = ' ' then total := ord ( tot[2] ) - 48
		    else total := (ord ( tot[1] ) - 48)* 10 + ord ( tot[2] ) -48;
	      end;

	      current := first;
	      for l := 1 to 8 do
		current := current^.down;
	      with current^ do
		begin
		  for l := 1 to field^.len do
		    bac[l] := field^[l];
		  bac.len := field^.len;
		end;
	      delete(current);
	      with current^ do
		begin
		  for l := 1 to field^.len do
		    eac[l] := field^[1];
		  eac.len := field^.len;
		end;
	      delete (current);

	      current := first;
	      repeat
		if current^.etype = 11 then current^.y :=current^.y-22;
		current := current^.down;
	      until current = first;
	    end;(* case 2 *)

	 3  :	begin
		    year[1] := '8'; year[2] := '5'; period := 0;
			 tot[1] := '1'; tot[2] := '2';
			 start := 1 ; month[1] := ' '; month[2] := '1';
		   fiscal_year := 0; enter_mode := 1;
		   color := 1;	varno  := 3;
		   total := 12; symbol := 0;
		   get_list (first, total, xy);
		end;
   otherwise begin end; end; (* case code *)
   end; (* chartinfo *)
   end.
