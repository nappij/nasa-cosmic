 { $INCLUDE : 'compile.inc' }
{$include:'plpas.int'}

implementation of plpas;


{ The low_level routines for the plotter are found here.  These provide
        the necessary control characters for the plotter commands.
        These routines were originally included in a separate unit,
        as is evidenced by the next comment.  }

{implementation of low_level_graphics;}

  { The bodies of the routines described in file 'GRLLEVEL.INT' are
          found here.  One of the crucial routines here is SENDATA, as
          most of the routines create a buffer, storing the necessary
          control characters and data in them, and then giving the data
          to the SENDATA routine, which then sends the data to the
          plotter.  The escape character( chr(27) ) is used to tell
          the plotter a command is forthcoming, and a carriage return
          ( chr(13) ) usually ends the command.
  }

type data = lstring(255);

var f : text;

function dosxqq ( command : byte; parm : word ) : word; extern;

procedure initek; extern; { The body of the procedure is in an
                                  assembly language file.  }


procedure crite(c: char); extern; { Write one character to 'com1'.  }

procedure sendata(const db: string);

{ Send data to the plotter interface; check to see if the plotter's
        data buffer is full; if full then wait until buffer is clear
        before exiting.  }

var index: integer;
    s: data;

begin
  for index := 1 to upper(db) do crite(db[index]);
end;

function cstring(n1: integer): data;

{ Converts an integer within the range 0 to 9999 to a string of characters,
        one character for each digit.  The plotter requires most numeric
        data to be in the form of an ASCII string.  }

var d1,d2,d3,d4: integer;
    s1,s2,s3,s4: char;

begin
  cstring := null;
  d1 := n1 div 1000;
    { Get thousands digit.  }
  d2 := (n1 - d1 * 1000) div 100;
    { Get hundreds digit.  }
  d3 := (n1 - (d1 * 1000 + d2 * 100)) div 10;
    { Get tens digit.  }
  d4 := n1 mod 10;
    { Get units digit.  }
  d1 := d1 + 48; d2 := d2 + 48; d3 := d3 + 48; d4 := d4 + 48;
    { Add 48 to every digit to read its ASCII code.  }
  s1 := chr(d1); s2 := chr(d2); s3 := chr(d3); s4 := chr(d4);
    { Convert each digit to its associated ASCII character.  }
  concat(cstring,s1); concat(cstring,s2);
  concat(cstring,s3); concat(cstring,s4);
end;

procedure writing_angle(rangle:integer);

{ Set the angle at which characters are written to ANGLE.  }

var w,z: lstring(80);
    angle: integer;

begin
  angle := rangle;
  if angle > 360 then
    write('Angle too large. ANGLE=',angle)
  else
  begin
    w := cstring(angle);
      { Convert number to its ASCII representation.  }
    z := null;
    concat(z,chr(27)); concat(z,'AJ');
    concat(z,w); concat(z,chr(13));
    sendata( z)
  end
end;


procedure char_size(rxlength,ryheight:integer);

{ Set the width of the character space to XLENGTH, the height of the
        character space to YHEIGHT.  The character space is larger than
        the actual written character, to provide for spacing between
        characters.  The width must be between 0 and 4095, the height
        between 0 and 3123.  }

var x,y,z: lstring(80);
    xlength, yheight: integer;

begin
  xlength := round(rxlength); yheight := round(ryheight);
  if (xlength > 4095) or (yheight > 3124) then
  begin
    write('Character size out of limits. XLENGTH=',xlength);
    writeln(' YHEIGHT=',yheight)
  end
  else
  begin
    x := cstring(xlength); y := cstring(yheight);
      { Convert numeral to its ASCII representation.  }
    z := null;
    concat(z,chr(27)); concat(z,'AI'); concat(z,x);
    concat(z,','); concat(z,y); concat(z,chr(13));
    sendata( z)
  end
end;

procedure plotter_on;

{ Readies the plotter to accept commands.  Commands are ignored unless
        the sequence of characters in this routine is sent to the plotter.  }

begin
  sendata(chr(27) * 'AE' * chr(13));
end;


procedure plotter_off;

{ Requests the plotter to ignore subsequent commands unless PLOTTER_ON
        is performed again.  }

begin
  sendata(chr(27) * 'AF' * chr(13));
end;


procedure move_to_home;

{ Moves the pen carriage to the home position, the upper left corner
        of the plot space.  }

begin
  sendata(chr(27) * chr(12));
end;

procedure graphics_on;

{ Signals processor to process subsequent data as coordinate data,
       which are x and y coordinates encoded in a total of five bytes.  }

begin
  sendata(chr(29));
end;


procedure graphics_off;

{ Signals plotter to stop processing data as coordinates, returning to
        normal command format.  }

begin
  sendata(chr(31));
end;


procedure set_xy(x,y:integer);

{ Converts x and y coordinates to a sequence of five bytes for the
        purpose of x-y graphics plotting.  }

var line: lstring(80);
    x1,y1,hiy,eb,loy,hix,lox: integer;
    c1,c2,c3,c4,c5: char;

begin
  if (x<0) or (x>4095) or (y<0) or (y>3123) then
    writeln('Coordinate out of limits.  X=',x,'Y=',y)
  else
  begin
      { The following five lines of code create the bit patterns
              which are the encoded coordinates.  Refer to the
              comments in the file 'GRLLEVEL.INT' for a full ex-
              planation of the bit patterns.  In general, an OR
              combines the results of two patterns, an AND sets
              particular bits, a multiplication is a left shift
              of the bit pattern, while a division is a right
              shift.
      }
    x1 := x; y1 := y;
    hiy := #20 or ((y1 and #F80) div 128);
    eb := #60 or (((y1 * 4) and #C) or (x1 and 3));
    loy := #60 or ((y1 and #7C) div 4);
    hix := #20 or ((x1 and #F80) div 128);
    lox := #40 or ((x1 and #7C) div 4);
    c1 := chr(hiy); c2 := chr(eb); c3 := chr(loy); 
      c4 := chr(hix); c5 := chr(lox);
    line := null;
    concat(line,c1); concat(line,c2); concat(line,c3);
      concat(line,c4); concat(line,c5);
    sendata( line);
  end;
end;


procedure color(rppen:integer);

{ Selects a pen color.  Valid colors are from 0 to 8; a color of 0
        returns the current pen to the pen turret without selecting
        another pen.  }

var line: lstring(80);
    color: lstring(80);
    ppen: integer;

begin
  ppen := round(rppen) mod 9;
  if (ppen < 0) or (ppen > 8) then
    writeln('Pen color out of range.  PPEN=',ppen)
  else
  begin
    color := cstring(ppen);
    line := chr(27);
    concat(line,'ABP');
    concat(line,color);
    concat(line,chr(13));
    sendata( line);
  end
end;


function xconvert(x:integer):integer;

{ Converts the display space x-coordinate (0-640) to the plotter's
        x-coordinate (0 - 4095).  All that is involved is a straight
        multiplication by a scaling.  }

begin
  if (x < 0) or (x > 639)
  then
    writeln('X coordinate out of limits, X = ',x)
  else
    xconvert := round(float(x) * 4095 / 639)
end;


function yconvert(y:integer):integer;

{ Converts the display space y-coordinate (0 - 400) to the plotter's
        y-coordinate (0 - 3123).  The DS coordinate is subtracted from
        399 first, since y = 0 on the DS is the upper left corner,
        while y = 0 on the plotter is the lower left.  This is then
        multiplied by a scaling factor to obtain the correct coordinate.  }

begin
  if (y < 0) or (y > 400)
  then
    writeln('Y coordinate out of limits, Y = ',y)
  else
    if y = 400 then yconvert := 0 else
    yconvert := round(float(399 - y) * 3123 / 399)
end;


{ The high-level plotter routines follow.}

{ NOTE: The first coordinate pair sent to the 4662 after a graphics_on
        command is interpreted as a move; the pen moves to the point
        without drawing a line.  Any subsequent pairs are interpreted
        as draw; the pen is set down, then moved, thus drawing a line
        to the point.  This continues until either a graphics_on is
        sent, in which case the first pair is again a move, or until
        a graphics_off is used, so that one must use the graphics_on
        command for graphics.

  NOTE: Explanations for some routines are involved and require much
        graphics; these are found on an attendant sheet(s).  }

procedure plinit;

begin;
  initek;
    { Set up parameters for 'com1'.  }
  plotter_on;
end;

procedure plpoint;

begin
  color(pcolor);
  graphics_on;
  x1 := xconvert(x1); y1 := yconvert(y1);
  set_xy(x1,y1); set_xy(x1,y1);
  graphics_off;
end;

procedure plline;

var space_length,total_length,radius,angle,
      x,y,r1,leftover: real;
      index: integer;
      dash_length : integer;
      downup: integer;

begin
  x1 := xconvert(x1); y1 := yconvert(y1);
  x2 := xconvert(x2); y2 := yconvert(y2);
  dash_length := xconvert(ndon);
  color(lcolor);
  if lcolor <> 0 then
  begin

  if ndoff = 0 then
    begin
      graphics_on;
      set_xy(x1,y1);
      set_xy(x2,y2);
    end
  else
    begin
      space_length := xconvert(ndoff);
      total_length := dash_length + space_length;
      radius := sqrt(sqr(float(x2-x1))+sqr(float(y2-y1)));
      x := x1; y := y1;
      leftover := radius - (trunc(radius / total_length)*total_length);
      if radius < total_length then
        begin
          graphics_on; set_xy(x1,y1);
          r1 := 0;
          for index := 1 to 3 do;
            begin
              if float(x2)-x = 0 then angle := 2*arctan(1) else
                angle := arctan((float(y2)-y) / (float(x2)-x));
              if (x2<x1) or ((x2=x1)and(y2<y1)) then angle := angle + 4*arctan(1);
              r1 := r1 + leftover / 3;
              x := float(x1) + r1*cos(angle); y := float(y1) + r1*sin(angle);
              downup := index mod 2;
              if downup = 0 then graphics_on; set_xy(round(x),round(y));
            end;
        end
      else
        begin
          if leftover > dash_length 
          then
            r1 := (leftover - space_length) / 2
          else
            r1 := (leftover + dash_length) / 2;
          graphics_on; set_xy(x1,y1);
          if ((( x2 - x ) > .00001 ) or ( ( x2 - x ) < -.00001 )) then
          angle := arctan((y2-y) / (x2-x));
          else angle := ( 4*arctan (1)) / 2;
          if (x2<x1) or ((x2=x1)and(y2<y1)) then angle := angle + 4*arctan(1);
          repeat
            x := float(x1) + r1*cos(angle); y := float(y1) + r1*sin(angle);
            set_xy(round(x),round(y));
              r1 := r1 + space_length;
              x := x1 + round(r1*cos(angle)); y := y1 + round(r1*sin(angle));
              graphics_on;
              set_xy(round(x),round(y));
            r1 := r1 + dash_length;
          until r1 >= radius;
          set_xy(x2,y2);
        end;
    end;
  graphics_off;

  end;
end;


procedure plbar;

var a,b,u,v,x,y,lu,lv,la,lb,p,q:integer;
    aflag, vflag, texture_index: integer;
    spacing : integer;
    i,j : integer;

    procedure fillbox(weave:integer);

    begin
      case weave of
        1: begin a:=x1; b:=y1; u:=x1; v:=y2;
                 la:=x2; lb:=y1; lu:=x2; lv:=y2;
           end;
        2: begin a:=x1; b:=-y1; u:=x2; v:=-y1;
                 la:=x1; lb:=-y2; lu:=x2; lv:=-y2;
           end;
        4: begin a:=x1; b:=-y1; u:=x1; v:=-y1;
                 spacing := round(spacing * sqrt(2));
                 la:=x2; lb:=-y2; lu:=x2; lv:=-y2;
           end;
        3: begin a:=x1; b:=y2; u:=x1; v:=y2;
                 spacing := round(spacing * sqrt(2));
                 la:=x2; lb:=y1; lu:=x2; lv:=y1;
           end;
        otherwise {do nothing}
      end;
      aflag := 0; vflag := 0;
      repeat
        if aflag = 0 then a := a + spacing;
        if vflag = 0 then v := v + spacing;
        if aflag = 1 then b := b + spacing;
        if vflag = 1 then u := u + spacing;
        if a > la then
        begin
          aflag := 1; b := b + a - la; a := la
        end;
        if v > lv then
        begin
          vflag := 1; u := u + v - lv; v := lv
        end;
        if b > lb then b := lb;
        if u > lu then u := lu;
        p := abs(b); q := abs(v);
        graphics_on; set_xy(a,p); set_xy(u,q);
      until (a=la) and (b=lb) and (u=lu) and (v=lv);
    end;

begin
  if bcolor <> 0 then
  begin

  color(bcolor);
  x1 := xconvert(x1); y1 := yconvert(y1);
  x2 := xconvert(x2); y2 := yconvert(y2);
  case fill of
       0 : [texture_index := fill; spacing := 4;];
 1,2,4,5 : begin
	     texture_index := fill; spacing := 4;
	   end;
     3,6 : begin
	     texture_index := fill;spacing := 4;
	   end;
       9 : begin
             texture_index := 2   ; spacing := 1;
           end;
      10 : [texture_index := fill-10;spacing := 4;];
11,12,14,15 : begin
	     texture_index := fill-10; spacing := 4;
	   end;
   13,16 : begin
             texture_index := fill-10; spacing := 4;
           end;
    otherwise texture_index := 0;
    end;
  spacing := xconvert(spacing);
  if fill < 10 then i := 1 else i := 2;
  for j := 1 to i do
    begin
  graphics_on;
  set_xy(x1,y1);
  set_xy(x2,y1);
  set_xy(x2,y2);
  set_xy(x1,y2);
  set_xy(x1,y1);
    end;
  case texture_index of
    1: [fillbox(1);];
    2: [fillbox(2);];
    3: begin fillbox(1); fillbox(2); end;
    4: [fillbox(3);];
    5: [fillbox(4);];
    6: begin fillbox(3); fillbox(4); end;
    otherwise {do nothing};
  end;
  graphics_off;

  end;
end;

procedure plsymbol;
  procedure polygon(cx,cy,radius,number_of_sides,degree:integer);

  var deg,side_angle,pi:real;
      x,y,index,nos: integer;

  begin
     deg := degree;
   nos := number_of_sides;
    pi := 4*arctan(1);
    deg := deg * pi /  180;
    side_angle := 2*pi / number_of_sides;
    graphics_on;
    for index := 1 to nos + 1 do
    begin
      x:= cx+round(radius*cos(deg)); y:= cy+round(radius*sin(deg));
      set_xy(x,y);
      deg := deg+side_angle;
    end;
    graphics_off;
  end;


  procedure star(cx,cy,inner_radius,outer_radius:integer;
			nop:integer; degrees:integer);

  var outer_angle,inner_angle,sector_angle,x,y:integer;
      index: integer;

  begin
{   sector_angle := round(8*arctan(1) / nop);
    outer_angle := round(4*arctan(1)*degrees / 180);
    inner_angle := sector_angle div 2 + outer_angle;
    x := cx + round(outer_radius*cos(outer_angle));
    y := cy + outer_radius*sin(outer_angle);
    graphics_on; set_xy(x,y);
    for index := 1 to nop do
    begin
      x := cx + inner_radius*cos(inner_angle);
      y := cy + inner_radius*sin(inner_angle);
      set_xy(x,y);
      outer_angle := outer_angle+sector_angle;
      inner_angle := inner_angle+sector_angle;
      x := cx + outer_radius*cos(outer_angle);
      y := cy + outer_radius*sin(outer_angle);
      set_xy(x,y);
    end;
    graphics_off;}
  end;

var r1,r2,n,ang,height:real;
    xc,yc,sl,index: integer;
     ch : char;

begin
  index := id1;
  height := 63 * scale;
  x1 := xconvert(x1); y1 := yconvert(y1);
  case index of 
    1,2: begin
                    color(scolor + index - 1 );
	            xc := x1;
                    yc := round ( -height / 3 ) + y1;
                    sl := round ( 2 * height / 3 );
                    polygon ( xc,yc,sl,3,30 );
                    char_size (32,39 );
                    writing_angle ( 0 );
                    if id2 = 10 then ch := ' '
                      else ch := chr ( id2 + 48 );
                    graphics_on;set_xy(x1-8,y1-32);graphics_off;
                    sendata( ch);
       end;
    otherwise (*do nothing*)
  end;
end;

procedure pltext;

var index,temp,temp2: integer;
    cl,clen: word;
    height, width: integer;
    j  : real;
    i,k: integer;

begin
  x1 := xconvert ( x1 ); y1 := yconvert ( y1 );
  k := 0;
  case size of
    0: begin height := 63; width := 51; end;
    1: begin height := 63; width := 38; end;
    2: begin height := 92; width := 64; end;
    3: begin height :=124; width := 87; end;
    otherwise begin writeln('Invalid character size, default to 0');
      height := 63; width := 51; end;
  end;
  for i := 1 to chars.len do
    begin
      if ( chars[i] < ' ' ) or ( chars[i] = chr(255) ) then
        if size = 1 then
          begin
            width  := 32;
            case ord(chars[i]) of
           23,22 : begin
                   if chars[i]=chr(22) then chars[i] := 'e'
                     else chars[i] := 'L';
                   width := 20;
                   height := 32;
                   graphics_on;set_xy(x1+8,y1+8);set_xy(x1+8,y1-40);
                   x1 := x1 + 20;
                   y1 := y1 - 32;
                   end;
              24 : chars[i] := 'J';
              25 : chars[i] := 'F';
              26 : chars[i] := 'M';
              27 : chars[i] := 'A';
              28 : chars[i] := 'S';
              29 : chars[i] := 'O';
              30 : chars[i] := 'N';
              31 : chars[i] := 'D';
              otherwise begin
                writeln ('Unplotable character');
                chars[i] := ' ';
                end;
             end;
         end
         else
           begin
             case ord(chars[i]) of
               1,2 : begin
                       tcolor := 5 - ord(chars[i]);
                       color ( tcolor );
                       chars[i] := 'O';
                       graphics_on;set_xy(x1+10,y1-10);set_xy(x1+10,y1-10);
                       graphics_on;set_xy(x1+24,y1-10);set_xy(x1+24,y1-10);
                       graphics_on;set_xy(x1+10,y1-22);set_xy(x1+16,y1-26);
                       set_xy(x1+24,y1-22);
                     end;
                30 : begin
                       chars[i] := ' ';
                       graphics_on;set_xy(x1+25,y1);set_xy(x1+50,y1-50);
                       set_xy(x1,y1-50);set_xy(x1+25,y1);
                     end;
                otherwise begin
                  writeln ( 'unplotable character');
                  chars[i] := ' ';
                  end;
                end;
            end;
    if (ord(chars[i])=127) and (size=0) then
      begin
        chars[i] := ' ';
        color ( tcolor - 1 );
        graphics_on;set_xy(x1+25,y1);set_xy(x1+50,y1-50);set_xy(x1,y1-50)
        ;set_xy(x1+25,y1);
      end;
    if chars[i] = ' ' then k := k + 1 else k := 0;
  end;
  char_size(width,height);
  writing_angle(angle);
  y1 := y1 - height + 25;
  color(tcolor); graphics_on; set_xy(x1,y1); graphics_off;
  chars.len := chars.len - k;
  cl := chars.len; temp := charslen; clen := wrd(temp);
  if cl > clen then [cl := clen; chars.len := clen;];
  sendata( chars);
end;

procedure plcircle;

var sa,ea,increment,pi,work_angle,sector:real;
    x,y:integer;

begin
   sa := starting_angle;
   ea := ending_angle;
 color(ccolor);
  radius := xconvert(radius);
  cx := xconvert(cx); cy := yconvert(cy);
  graphics_on; set_xy(cx,cy);
  sector := (sa - ea) / 360;
  sector := (sa - ea) - 360*trunc(sector);
  increment := 8 / float( radius ); pi := 4*arctan(1);
  sa := pi*sa / 180;
  ea := pi*ea / 180;
  x := round ( radius * cos(sa) )+cx;
  y := round ( radius * sin(sa) )+cy;
  if sector = 0 then graphics_on;
  set_xy(x,y);
  work_angle := sa;
  while (work_angle <= ea) do
    begin
    x := round( radius * cos(work_angle) )+cx;
    y := round( radius * sin(work_angle) )+cy;
    set_xy(x,y);
    work_angle := work_angle+increment;
  end;
  if sector = 0 then graphics_on;
    set_xy(cx,cy);
  graphics_off;
end;

procedure plfinish;

begin
  color(0);
  move_to_home;
end;

end.
