  { $INCLUDE : 'compile.inc' }
  { $INCLUDE : 'vbpas.int' }
  { $INCLUDE : 'vdmgen.int' }
  { $INCLUDE : 'getparam.int' }
  { $INCLUDE : 'display.int' }
  { $INCLUDE : 'utility.int' }
  { $INCLUDE : 'dspas.int' }
  { $INCLUDE : 'sfpas.int' }
  { $INCLUDE : 'option.int' }
  { $INCLUDE : 'dialog.int' }
  { $INCLUDE : 'ldb.int' }
  { $INCLUDE : 'execute.int' }

  implementation of execute;


  USES vbpas;

  USES getparam;

  USES display;

  USES utility;

  USES dspas;

  USES sfpas;

  USES option;

  USES dialog;

  USES vdmgen;

  USES ldb;

  var
    msg1:lstring(80);
    n: integer;
    p: byte;
      funct   : func;
      status  : mode;
      buffer  : lstring(127);
      dum,temp,temp1: entity;

  procedure redraw ( code:integer; var current,first:entity ); extern;

  procedure format(var inkey:byte;var current,first:entity);extern;

  procedure perform;

  const
      xindex = 8;
      yindex = 8;
      xindx = 6;
      yindx = 4;
      prompt_line = 22;

  var
      i,j,l,m,k,msglen : byte;
      length  : byte;
      upd1    : boolean;
      x1,y1   : integer;
      width   : integer;
      height  : integer;
      inkey1,k1 : byte;

  begin
     case inkey of

	0: begin
	     current_node := current^.etype;
	   end;
	1: begin
	     if not saved then
	       begin
		 upd1 := escape;
		 escape := true;
		 length := 0;
		   if scrmode < 4 then n := -1 else n := 0;
                   repeat
                   inkey := 0;
                   msglen := messages^[15].len+1;
		   incom(prompt_line,messages^[14],messages^[15],n,
			 rtype,0,msglen,prompt_line+1,2,1,
			 8,1,1,1,1,1,1,status,buffer,length,inkey);
                   if inkey=2 then help (0);
                   until inkey <> 2;
		 page := 1;
		 if (length = 0) and (inkey = 0) then inkey := 3;
		 if length > 0 then
		     if buffer[1] in ['y','Y'] then inkey := 4
					       else inkey := 1;
		 case inkey of
		   4 : begin
			 inkey1 := 4;
			 perform(inkey1,current,current_node,first);
			 if inkey1 = 1 then inkey := 1;
		       end;
		   3 : begin
			 redraw ( 1, current, first );
			 current_node := current^.etype;
		       end;
		   otherwise
		  end;
		 escape := upd1;
	       end;
		 if inkey=1 then
		   begin
		     saved := true;
		     while first <> nil do delete ( first );
		   end;
	   end;

	  2 : help( 0 );

	  4 : begin
		  ldbman ( inkey, gtype, sav, first, name );
		  rtype := 2;
		  if (inkey <> 1) and ( current_node <> 0 ) then
		    reduce(rtype,color);
		   else current_node := current^.etype;
	      end;
   22..29,36: if rtype < 4 then
	    begin
	      case inkey of
	       36: repeat
		     current := current^.down;
		   until not ( current^.etype in skipfield );
	       28: begin
		     temp := current^.down;
		     while temp^.etype in skipfield do temp := temp^.down;
		     dum  := current;
		     while temp <> dum do
		       begin
			 if temp^.ytext > dum^.ytext then
			   if (temp^.ytext<current^.ytext)or(current=dum) then
			    current := temp
			   else
			    if temp^.ytext=current^.ytext then
			     if (abs(temp^.xtext-dum^.xtext)<abs(current^.xtext-dum^.xtext) then
			       current := temp;
			 repeat
			   temp := temp^.down;
			 until not ( temp^.etype in skipfield );
		       end;
		   end;
	       23: begin
		     temp := current^.up;
		     while temp^.etype in skipfield do temp:=temp^.up;
		     dum  := current;
		     while temp <> dum do
		       begin
			 if temp^.ytext < dum^.ytext then
			   if (temp^.ytext>current^.ytext)or(current=dum) then
			    current := temp
			   else
			    if temp^.ytext=current^.ytext then
			     if (abs(temp^.xtext-dum^.xtext)<abs(current^.xtext-dum^.xtext) then
			       current := temp;
			 repeat
			   temp := temp^.up;
			 until not ( temp^.etype in skipfield );
		       end;
		   end;
	       22: [current := first;	       { move cursor home }
		    while current^.etype in skipfield do
		      current := current^.down;];
	       27: [current := first^.up;      { move cursor end  }
		    while current^.etype in skipfield do
		      current := current^.up;];
	       25: begin
		     temp := current^.up;
		     while temp^.etype in skipfield do temp:=temp^.up;
		     dum  := current;
		     while temp <> dum do
		       begin
			 if temp^.ytext = dum^.ytext then
			   if temp^.xtext < dum^.xtext then
			     if (temp^.xtext>current^.xtext)or(current^.xtext=dum^.xtext) then
			       current := temp;
			 repeat
			   temp := temp^.up;
			 until not ( temp^.etype in skipfield );
		       end;
		   end;
	       26: begin
		     temp := current^.down;
		     while temp^.etype in skipfield do temp := temp^.down;
		     dum  := current;
		     while temp <> dum do
		       begin
			 if temp^.ytext = dum^.ytext then
			   if temp^.xtext > dum^.xtext then
			     if (temp^.xtext<current^.xtext)or(current^.xtext=dum^.xtext) then
			       current := temp;
			 repeat
			   temp := temp^.down;
			 until not ( temp^.etype in skipfield );
		       end;
		   end;
		otherwise begin end;
	      end;
	      current_node := current^.etype;
	    end
	    else
	      begin
	       upd1 := false;
		case inkey of
		 28 : if wy1 <= 200-yindex then [wy1 := wy1 + yindex;
					    upd1 := true;];
		 23 : if wy1 >= yindex then [wy1 := wy1 - yindex;
					    upd1 := true;];
		 25 : if wx1 >= xindex then [wx1 := wx1 - xindex;
					    upd1 := true;];
		 26 : if wx1 <= 320-xindex then [wx1 := wx1 + xindex;
					    upd1 := true;];
		 22 : begin wx1 := 0; wy1 := 0; upd1 := true; end;
		 24 : begin wx1 := 320; wy1 := 0; upd1 := true; end;
		 27 : begin wx1 := 0; wy1 := 200; upd1 := true; end;
		 29 : begin wx1 := 320; wy1 := 200; upd1 := true; end;
		 otherwise begin end;
		end;
		if upd1 then wdupdate ( wx1, wy1, 0, 0, 320, 200, 0 );
	      end;
	 6: dscopy;
	 7: begin
	      format ( inkey, current, first );
	    end;
	  8: begin
		 rtype := 4;
		 x1 := current^.x;
		 y1 := current^.y;
		 with node_data^[current_node] do
		   begin
		     case character_size of
		       0 : [height := 8; width := 8;];
		       1 : [height := 8; width := 6;];
		       2 : [height :=12; width :=10;];
		       3 : [height :=16; width :=14;];
		       end;
		     wx1:=x1+(width*ord(current^.field^.len)div 2)-160;
		     wy1 := y1 + ( height div 2 ) - 100;
		   end;
		 if wx1 < 0 then wx1 := 0
			    else if wx1 > 320 then wx1 := 320;
		 if wy1 < 0 then wy1 := 0
			    else if wy1 > 200 then wy1 := 200;
		 screen(4);
		 colors(0,color);
		 wdupdate ( wx1, wy1, 0, 0, 320, 200, 0 );
	     repeat
	       inkey := 0;
	       buffer.len := 0;
	       length := 0;
	       msg1 := null;
	       with node_data^[current_node] do
	       incom ( 22, prtmsg, msg1, 24, rtype, character_size,
		       current^.x, current^.y, 3, 2,
		       valid_key_set_id, esc, backspace,
		       0, 0, ins, del, status, buffer, length, inkey );
	       if inkey = 2 then [help ( 7 );
				  screen(4);colors(0,color);
				  wdupdate(wx1,wy1,0,0,320,200,0);
				  inkey := 255;];
	       if length <> 0 then
		 begin
		   n := 0;
		   for i := 1 to length do
		     n := n*10 + ord ( buffer[i] ) - 48;
		   upd1 := false;
		   case inkey of
		     28 : begin
			    wy1 := wy1 + yindex * n;
			    upd1 := true;
			    if wy1 > 200 then wy1 := 200;
			  end;
		     23 : begin
			    wy1 := wy1 - yindex * n;
			    upd1 := true;
			    if wy1 < 0 then wy1 := 0;
			  end;
		     25 : begin
			    wx1 := wx1 - xindex * n;
			    upd1 := true;
			    if wx1 < 0 then wx1 := 0;
			  end;
		     26 : begin
			    wx1 := wx1 + xindex * n;
			    upd1 := true;
			    if wx1 > 320 then wx1 := 320;
			  end;
		      otherwise
		       if inkey = 1 then
			 begin
			   rtype := 2;
			   screen ( 2 );
			   colors ( 0, color );
			   inkey1 := 1;
			 end
			else inkey1 := 0;
		       perform(inkey,current,current_node,first);
		      end;
		   if upd1 then wdupdate (wx1,wy1,0,0,320,200,0);
		 end
		else
	       begin
	       if inkey=1 then
		 begin
		   rtype := 2;
		   screen ( 2 );
		   colors ( 0, color );
		   inkey1 := 1;
		 end
		else inkey1 := 0;
	       perform ( inkey, current, current_node, first );
	       end;
	     until ( inkey in [1,3,9] ) or ( rtype < 4 );
		if (inkey in [3,9]) and (inkey1 <> 1) then
		  begin
		    rtype := 2;
		    reduce ( rtype, color );
		    inkey := 0;
		  end;
	   end;
	 10 : begin
		temp := current;
		i := upper ( node_data^ );
		create ( dum , i );
		dum^.x := current^.x;
		dum^.y := current^.y;
		dum^.field^.len := 0;
		newdraw := false;
		repeat
		  k := 0;
		  inkey := 0;
		  buffer := null;
		  length := 0;
		  msg1 := null;
		  with node_data^[i] do
		    incom (prompt_line,prtmsg,msg1,-3,rtype,character_size,
			    dum^.x,dum^.y,data_type,2,valid_key_set_id,
			    esc, backspace, cursor_left, cursor_right,
			    ins, del, status, buffer, length, inkey );
		   if (length = 1) and (buffer[1] in ['0'..'9']) then
		     [n:=ord(buffer[1])-48;there(0,prompt_line+1);write(' ');]
		     else if (length = 2)and(buffer[1]in['0'..'9'])and
			     (buffer[2] in ['0'..'9']) then
		     [ n:=(ord(buffer[1])-48)*10+ord(buffer[2])-48;
		       there(0,prompt_line+1);write('  ');]
			  else n := 1;
		  case inkey of
			28 :[dum^.y:=dum^.y+n*yindx;if dum^.y>392 then dum^.y:=392;];
			23 :[dum^.y:=dum^.y-n*yindx;if dum^.y<0 then dum^.y:=0;];
			25 :[dum^.x:=dum^.x-n*xindx;if dum^.x<0 then dum^.x:=0;];
			26 :[dum^.x:=dum^.x+n*xindx;if dum^.x>634 then dum^.x:=634;];
                         2 : help ( 0 );
		  1,8,30..33:begin
			     x1 := dum^.x;
			     y1 := dum^.y;
			     k:=inkey;
			     perform(k,dum,i,first);
			     if (k in [0,30..33,3,5]) then
			       begin
				 i := upper ( node_data^ );
				 create ( dum, i );
				 dum^.x := x1;
				 dum^.y := y1;
				 dum^.field^.len := 0;
			       end;
			     end;
		     otherwise
		     end;
		 if (k = 1) or (inkey = 1) then inkey := k;
		  if (inkey in [22..29]) then promptupd := 3;
	       until (inkey in [11,1]) or (k in [11,1]);
		if (newdraw)and(inkey<>1) then begin
			       dsinit;
			       redraw ( 3, current, first );
			     end;
		promptupd := 1;
	       current := temp;
	     end;
      30..33 : begin
		 msg1 := null;
		 dum := current;
		i := upper ( node_data^ );
		inkey1 := inkey;
                 k:=0;
		temp1 := first;
		 if inkey1 <> 30 then
		repeat
		  inkey := 0;
		  buffer := null;
		  length := 0;
		  msg1 := null;
		     temp := first^.up;
		     while ((temp^.etype<>current_node ) or
((dum^.x<temp^.x)or(dum^.x>temp^.x+6*temp^.field^.len)) or
((dum^.y<temp^.y)or(dum^.y>temp^.y+8)))and (temp <> first) do
		      temp := temp^.up;
		     if temp <> temp1 then
		       begin
			 if temp1 <> first then
			   with temp1^ do
			     vbtrvs ( rtype, x, y, 1, field^.len );
			 if temp <> first then
			   with temp^ do
			     vbtrvs ( rtype, x, y, 1, field^.len );
			 temp1 := temp;
		       end;
		  with node_data^[i] do
		    incom (prompt_line,messages^[26],msg1,-3,rtype,character_size,
			    dum^.x,dum^.y,data_type,2,valid_key_set_id,
			    esc, backspace, cursor_left, cursor_right,
			    ins, del, status, buffer, length, inkey );
		   if (length = 1) and (buffer[1] in ['0'..'9']) then
		     [n:=ord(buffer[1])-48;there(0,prompt_line+1);write(' ');]
		     else if (length = 2)and(buffer[1]in['0'..'9'])and
			     (buffer[2] in ['0'..'9']) then
		     [n:=(ord(buffer[1])-48)*10+ord(buffer[2])-48;
		      there(0,prompt_line+1);write('  ');]
			  else n := 1;
		  if status = txt then inkey := 36;
		  case inkey of
			28 :[dum^.y:=dum^.y+n*yindx;if dum^.y>392 then dum^.y:=392;];
			23 :[dum^.y:=dum^.y-n*yindx;if dum^.y<0 then dum^.y:=0;];
			25 :[dum^.x:=dum^.x-n*xindx;if dum^.x<0 then dum^.x:=0;];
			26 :[dum^.x:=dum^.x+n*xindx;if dum^.x>634 then dum^.x:=634;];
                         2 : [help ( 0 );
			 if temp <> first then
			   with temp^ do
			     vbtrvs ( rtype, x, y, 1, field^.len );];
			 1,8:begin
			     x1 := dum^.x;
			     y1 := dum^.y;
			     k:=inkey;
			     perform(k,dum,i,first);
			     if (k in [0,30..33,3,5]) then
			       begin
				 i := upper ( node_data^ );
				 create ( dum, i );
				 dum^.x := x1;
				 dum^.y := y1;
				 dum^.field^.len := 0;
			       end;
			     if k = 3 then k := 0;
			     end;
		     otherwise
		     end;
		  if not (inkey in [2,8,30..33]) then promptupd := 3;
	       until (inkey in [11,3,1,36]) or (k in [11,3,1,36]) 
	       promptupd:=2;
               if (k=1) or (inkey=1) or (k=11) or (inkey=11) then inkey:=k
		else
		 begin
		 inkey := inkey1;
		 if inkey <> 30 then
		   begin
		     temp := first^.up;
		     while ((temp^.etype<>current_node ) or
((dum^.x<temp^.x)or(dum^.x>temp^.x+6*temp^.field^.len)) or
((dum^.y<temp^.y)or(dum^.y>temp^.y+8)))and (temp <> first) do
		      temp := temp^.up;
			 if temp <> first then
			   with temp^ do
			     vbtrvs ( rtype, x, y, 1, field^.len );
		   end;
		 if inkey in [32,33] then
		  if (temp<>first) then
		   begin
		     with temp^ do
		       begin
                         for j := 1 to field^.len do
                           buffer[j] := ' ';
			 buffer.len:=field^.len;
			 dstext(x,y,1,3,buffer,buffer.len,0);
			 rdtupd(rtype,x,y,1,field^.len);
		       end;
		     if inkey <> 33 then delete ( temp );
		   end;
		  if inkey <> 32 then
		  if (temp<>first) or (inkey = 30) then
		   begin
		    if inkey = 31 then
		     begin
		      copylst ( temp^.field^,buffer );
		      i := 1;
		      while (i<=25)and(fctn_map^[node_data^[current_node].valid_key_set_id][i]<>34)do i:=i+1;
		      if i<=25 then fctn_map^[node_data^[current_node].valid_key_set_id][i]:=35;
                      if i>25 then
                      begin
                       j:=1;
                       while (j<=25) and (fctn_map^[node_data^[current_node].valid_key_set_id][j]<>31 do j:=j+1;
                       if j<=25 then fctn_map^[node_data^[current_node].valid_key_set_id][j]:=35;
                      end
                      else j:=26;
		     end
		     else
		      buffer := null;
                     if (inkey in [30,31]) then
                     begin
                      l := 58+14;
                      m :=node_data^[current_node].valid_key_set_id
                      valid_set^[m] := valid_set^[m] - [l];
                      l := 58 + 22;
                      valid_set^[m] := valid_set^[m] - [l];
                      end;
		     k := 0;
		     length := buffer.len;
		     if inkey = 33 then
		     begin
		     repeat
		       k := 0;
		       incom(prompt_line,messages^[21],msg1,-3,rtype,
			     0,dum^.x,dum^.y,4,0,15,1,1,0,0,1,1,status,
			     buffer,length,k)
		      case k of
			28 :[dum^.y:=dum^.y+n*yindx;if dum^.y>392 then dum^.y:=392;];
			23 :[dum^.y:=dum^.y-n*yindx;if dum^.y<0 then dum^.y:=0;];
			25 :[dum^.x:=dum^.x-n*xindx;if dum^.x<0 then dum^.x:=0;];
			26 :[dum^.x:=dum^.x+n*xindx;if dum^.x>634 then dum^.x:=634;];
                         2 : help ( 0 );
		       otherwise
		      end;
		      if (k<>2) and (k<>8) then promptupd :=3;
                       if k=8 then begin
                         k1:=k;
                         perform(k1,dum,current_node,first);
                         end;
                     until (k in [0,1,3,11]);
		     end
		      else
                     repeat
                      k:=0;
		     with node_data^[current_node] do
		      incom(prompt_line,messages^[inkey-6],msg1,-2,
		       rtype,character_size,dum^.x,dum^.y,
		       data_type,input_length,
		       valid_key_set_id,esc,backspace,1,
		       1,ins,del,status,buffer,length,k);
                     if k = 2 then help ( 0 );
                     if k=8 then 
                      begin
                       k1 := k;
                       perform (k1,dum,current_node,first);
                      end;
                     until (k in [0,1,3,11]);
                      if k=1 then k:=11;
		    if (i<=25)and(inkey = 31) then fctn_map^[node_data^[current_node].valid_key_set_id][i]:=34;
                    if (i>25) and (j<=25) and (inkey=31) then fctn_map^[node_data^[current_node].valid_key_set_id][j]:=31;
                    if (inkey in [30,31]) then
                      begin
                      l := 58+14;
                      m :=node_data^[current_node].valid_key_set_id
                      valid_set^[m] := valid_set^[m] + [l];
                      l := 58 + 22;
                      valid_set^[m] := valid_set^[m] + [l];
                      end;
		    promptupd := 1;
		    if (length > 0) or (inkey = 33) then
		      begin
			if (inkey <> 33) and (not (k in [1,3,11])) then
			  begin
			    if inkey = 30 then
			      begin
				temp := first^.up;
				add_node(temp,current_node);
				with temp^ do
				  begin
				    x:=dum^.x;
				    y:=dum^.y;
				  end;
			      end;
			  end
		       else
                      if not (k in [1,3,11]) then
                        begin
			  temp^.x := dum^.x;
			  temp^.y := dum^.y;
			end;
		       with temp^ do
			begin
			  if inkey<>33 then copylst ( buffer, field^ );
			  dstext(x,y,1,3,field^,field^.len,0);
			  if field^.len > 0 then
			  rdtupd(rtype,x,y,1,field^.len);
			end;
			saved := false;
			newdraw := true;
		       end;
		      if k in [1,8] then
			  perform(k,dum,current_node,first);
		      if k = 1 then inkey := 1;
		   end;
		 end;
	       end;
     otherwise begin end;
     end; {case}
  end;
end.
