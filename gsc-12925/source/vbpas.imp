   {  $INCLUDE : 'compile.inc'  }
   (* $INCLUDE : 'vbpas.int' *)

   implementation of vbpas;
   

      procedure colors; extern;
      procedure screen0(mode:integer);extern;
      procedure there; extern;
      procedure there1; extern;
      procedure spage; extern;
      procedure sclear; extern;
      procedure vblrvs(u,v,npix:integer);extern;

  procedure get_equip;

    var
      p        : ads of byte;
      f        : text;
      j        : integer;

    begin
      p.s := #40;
      p.r := #10;
      equipflg := p^;
   assign ( f, 'prt.drv' );
   f.trap := true;
   f.errs := 0;
   reset ( f );
   if f.errs = 0 then
     begin
       for j := 1 to 3 do
         readln ( f, equipprt[j] );
       readln ( f, drive );
       if f.errs <> 0 then
         begin
           drive := 'A';
           prtnum := '2';
         end
       else begin
          readln(f, prtnum);
          if f.errs <> 0 then prtnum := '2';
          end;
     end
    else
     begin
       equipprt[1][1] := chr(27);
       equipprt[1][2] := chr(65);
       equipprt[1][3] := chr(8);
       equipprt[1].len := 3;
       equipprt[2][1] := chr(27);
       equipprt[2][2] := 'L';
       equipprt[2][3] := chr(32);
       equipprt[2][4] := chr(3);
       equipprt[2].len := 4;
       equipprt[3][1] := chr(27);
       equipprt[3][2] := chr(65);
       equipprt[3][3] := chr(12);
       equipprt[3].len := 3;
       drive := 'A';
       prtnum := '2';
     end;
   f.errs := 0;
   close ( f );
    end;

  procedure screen;

  var
    p       : ads of byte;

  begin
    if mode < 4 then
      begin
        p.s := #40;
        p.r := #10;
        p^ := equipflg;
      end;
    scrmode := mode;
    screen0 ( mode );
  end;

  procedure vbtrvs;

  var i,width,height,npix,nline,u,v :integer;
  begin

  if nochar <> 0 then
  begin
    case size of
      0 : [width :=  8; height :=  8];
      1 : [width :=  6; height :=  8];
      2 : [width := 10; height := 12];
      3 : [width := 14; height := 16];
      otherwise begin end; end;
    npix := width * nochar;
    case rtype of
      1 : [u:=(x+1) div 2; npix:=(npix+1) div 2];
      2,3 : u:=x;
      otherwise begin end; end;
    v := (y+1) div 2;
    nline := (height+1) div 2;
    for i := 1 to nline do
      begin
      vblrvs(u,v,npix);
      v := v+1;
      end;
  end;
  end;


  procedure vbbrvs;

  var i,u,v :integer;

  begin
    case rtype of
      1 : [u:=(x+1) div 2; npix:=(npix+1) div 2];
      2,3 : u:=x;
      otherwise begin end; end;
    v := (y+1) div 2;
    nline := (nline+1) div 2;
    if npix <> 0 then
    for i := 1 to nline do
      begin
      vblrvs(u,v,npix);
      v := v+1;
      end;
  end;


  procedure vbblink;

  var i,j,k :integer;

  begin
    for k := 1 to 2 do
      begin
        if (nline = 0) then
          begin
          i:=npix*4+1;
          vbbrvs(rtype,x-2*npix,y     ,i,1);
          vbbrvs(rtype,x     ,y-2*npix,1,i);
          end
        else
          vbbrvs(rtype,x,y,npix,nline);
        for i:=1 to delay do j:=j+1;
      end;
  end;

  procedure tbclr;

  var a : ads of byte;
  begin
    if (equipflg div 256) mod 4=3 then a.s := #b000 else a.s := #b800;
    a.r := ( ytext * 80 + xtext ) * 2 + 1;
    while len > 0 do
      begin
        a^ := b;
        a.r := a.r + 2;
        if a.r = (ytext+1)*160+1 then
          a.r := ( ( ytext + 1 ) * 80 + xtext ) * 2 + 1;
        len := len - 1;
      end;
  end;

   end.
