  { $INCLUDE : 'compile.inc' }
  { $INCLUDE : 'vbpas.int' }
  { $INCLUDE : 'getparam.int' }
  { $INCLUDE : 'utility.int' }
  { $INCLUDE : 'dspas.int' }
  { $INCLUDE : 'sfpas.int' }
  { $INCLUDE : 'display.int' }
  { $INCLUDE : 'ldb.int' }
  { $INCLUDE : 'execute.int' }
  { $INCLUDE : 'wbsexec.int' }
  { $INCLUDE : 'wbsalts.int' }
  { $INCLUDE : 'wbsaltd.int' }

  implementation of wbsaltd;

  USES vbpas;

  USES getparam;

  USES utility;

  USES dspas;

  USES sfpas;

  USES display;

  USES execute;

  USES wbsexec;

  USES wbsalts;

  var
    msg : suplstring(25);

  procedure format;

    var
      i, j, k, n: integer;
      buffer	: lstring(40);
      reply	: supinteger(7);
      def	: suplstring2(7);
      x,y	: supinteger(7);
      range	: supset(14);
      current_node:byte;
      buf	: lstring(1);

    begin
    if (plotchoice <> 2) then
       begin
	 msg[1] := '                  Work Breakdown Structure Chart Format Options';
	 msg[2] := ' ';
	 msg[3] := '                                Default                                 Default';
	 msg[4] := '                                       ';
	 msg[5] := 'Mid-level entries ( 1 - 10 ):          ';
	 msg[6] := '                                       ';
	 msg[7] := '  Trunction may occur if               ';
	 msg[8] := '  Mid-level is increased.              ';
	 msg[9] := '  Press Help for more information.     ';
	 msg[10]:= '                                       ';
	 msg[11]:= 'Display level numbers:                 ';
	 msg[12]:= '  ( n = no, y = yes )                  ';
	 msg[13]:= '                                       ';
	 msg[14]:= 'Level number starting values:          ';
	 msg[15]:= '  Hundreds ( 0 - 10 )                  ';
	 msg[16]:= '  Tens     ( 0 - 10 )                  ';
	 msg[17]:= '  Ones     ( 0 - 10 )                  ';
	 msg[18]:= 'On chart "10" will be displayed as "A" ';
	 msg[19]:= '                                       ';
	 msg[20]:= '                                       ';
	 for i := 4 to 20 do concat ( msg[i], chr(219) );
	 concat (msg[14],' GSFC symbol ( n = no, y = yes ):');
	 concat (msg[16],' Background Color');
	 concat (msg[17],'      x = black     w = white');
	 concat (msg[18],'      r = red       m = magenta');
	 concat (msg[19],'      b = blue      c = cyan');
	 concat (msg[20],'      g = green     y = yellow');
	 msg[21]:= ' ';
	 msg[22]:= 'Modify default options as needed - press return key for next option.';
	 msg[23]:= 'Select F2 to begin creating chart.';
	 msg[24]:= ' ';
	 msg[25] := null;
	 buf.len := 1;

	 for i := 1 to 10 do
	   if fctn_map^[1][i] <> 0 then
	     begin
	       if i < 10 then [ buf[1] := chr(i+48); concat( msg[25], buf); ]
			 else concat ( msg[25], '10' );
	       if fctn_map^[1][i] = 7 then concat( msg[25], 'End ' );
	       concat ( msg[25], fctn_tag^[fctn_map^[1][i]] );
	       if i < 10 then concat ( msg[25], ' ' );
	       if i = 2 then while msg[25].len < 21 do concat(msg[25],' ');
	       if i = 7 then while msg[25].len < 60 do concat(msg[25],' ');
	  end; (* for , if fctn *)

	 def[1][1] := chr ( ( skeleton^[5] div 10 ) + 48 );
	 if def[1][1] = '0' then def[1][1] := ' ';
	 def[1][2] := chr ( ( skeleton^[5] mod 10 ) + 48 );
	 def[2][1] := ' ';
	 if skeleton^[19] = 2 then def[2][2] := 'y'
	   else def[2][2] := 'n';
	 for i := 1 to 3 do
	   begin
	     def[i+2][1] := chr ( ( skeleton^[i+19] div 10 ) + 48 );
	     if def[i+2][1] = '0' then def[i+2][1] := ' ';
	     def[i+2][2] := chr ( ( skeleton^[i+19] mod 10 ) + 48 );
	   end;
	 def[6][1] := ' ';
	 if skeleton^[7] = 2 then def[6][2] := 'y'
	   else def[6][2] := 'n';
	 def[7][1] := ' ';
	 case skeleton^[8] of
	   0 : def[7][2] := 'x';
	   1 : def[7][2] := 'b';
	   2 : def[7][2] := 'g';
	   3 : def[7][2] := 'c';
	   4 : def[7][2] := 'r';
	   5 : def[7][2] := 'm';
	   6 : def[7][2] := 'y';
	   7 : def[7][2] := 'w';
	   otherwise
	  end;
	 for i := 1 to 7 do
	   def[i].len := 2;
	 y[1] := 4;
	 y[2] := 10;
	 y[3] := 14;
	 y[4] := 15;
	 y[5] := 16;
	 y[6] := 13;
	 y[7] := 15;
	 x[1] := 36;
	 x[2] := 36;
	 x[3] := 36;
	 x[4] := 36;
	 x[5] := 36;
	 x[6] := 76;
	 x[7] := 76;
	 range[1] := ['0'..'9'];
	 if imids > 0 then range[2] := [chr(48+imids)..chr(10+48)]
	  else range[2] := ['1'..chr(10+48)];
	 range[3] := [' '];
	 range[4] := ['y','Y','n','N'];
	 for i := 1 to 3 do
	   begin
	     range[i*2+3] := ['0'..'9'];
	     range[i*2+4] := ['0'..chr(10+48)];
	   end;
	 range[11] := [' '];
	 range[12] := ['y','Y','n','N'];
	 range[13] := [' '];
	 range[14] := ['x','X','r','R','b','B','g','G','w','W','m','M','c','C','y','Y'];
	 multimenu ( msg, 25, 0, 7, def, x, y, range, inkey, 2 );
	for n := 1 to 7 do
	  case n of
	    1 : if def[1][1] = ' ' then
		  skeleton^[5] := ord ( def[1][2] ) - 48
		 else
		  skeleton^[5]:=ord(def[1][2])-48+(ord(def[1][1])-48)*10;
	    2 : case def[2][2] of
		  'y','Y' : skeleton^[19] := 2;
		  'n','N' : skeleton^[19] := 1;
		  otherwise
		 end;
	  3..5 : begin
		if def[n][1] = ' ' then
		  skeleton^[n+17] := ord ( def[n][2] ) - 48
		 else
		  skeleton^[n+17]:=ord(def[n][2])-48+(ord(def[n][1])-48)*10;
		end;
	    6 : case def[6][2] of
		  'y','Y' : skeleton^[7] := 2;
		  'n','N' : skeleton^[7] := 1;
		  otherwise
		 end;
	    7 : case def[7][2] of
		  'x','X' : skeleton^[8] := 0;
		  'b','B' : skeleton^[8] := 1;
		  'g','G' : skeleton^[8] := 2;
		  'c','C' : skeleton^[8] := 3;
		  'r','R' : skeleton^[8] := 4;
		  'm','M' : skeleton^[8] := 5;
		  'y','Y' : skeleton^[8] := 6;
		  'w','W' : skeleton^[8] := 7;
		  otherwise
		 end;
	    otherwise
	   end;
	 current := first^.down;
	 color := skeleton^[8];
	 inkey := fctn_map^[1][inkey-58];
	 if inkey in [1,4,5] then current_node := 0
		             else current_node := current^.etype;

	 for n := 1 to 4 do
	   node_data^[5+n].input_length := skeleton^[8+skeleton^[5]]
					  -((n-1) div 2);
	 nmids := 84 div ( node_data^[6].input_length + 4 );

	 if inkey = 7 then inkey := 3;
	 if not (inkey in [1,2,4,5,7,41]) then redraw(1,current,first);

	 perform2 ( inkey, current, current_node, first );
	 perform  ( inkey, current, current_node, first );

	 if inkey in [4,5] then redraw (1, current, first) ;

       end;
    end;

  procedure alter_display_space;

  var
      no_1l	 : integer;
      max_2l	 : integer;
      nchar_0l	 : integer;
      nchar_1l	 : integer;
      nchar_2l	 : integer;
      tsize	 : integer;
      width	 : integer;
      height	 : integer;
      i 	 : integer;
      pix_0b	 : integer;
      spix_0b	 : integer;
      pix_1b	 : integer;
      pix_1f	 : integer;
      spix_1b	 : integer;
      pix_1i	 : integer;
      spix_1h	 : integer;
      pix_2b	 : integer;
      spix_2b	 : integer;
      spix_2h	 : integer;
      line_b	 : integer;
      line_f	 : integer;
      line_hf	 : integer;
      sline_0b	 : integer;
      sline_1b	 : integer;
      line_i	 : integer;
      sline_2b	 : integer;
      sline_2h	 : integer;
      sline_1h	 : integer;
      temp	 : entity;

      current_level	 : integer;
      current_sub_level  : integer;
      x1, y1, x2, y2	 : integer;


  (************************************************************)

  procedure draw_box ( var x1, y1 : integer );

  var
      x2, y2 : integer;
      empty1 : boolean;
      empty2 : boolean;
      buffer : lstring(6);
      i      : integer;

  (************************************************************)

  procedure ds_write ( x, y : integer );

  var

      max    : integer;
      l      : integer;
      i      : integer;
      buffer : lstring(255);


  begin
    with temp^ do
      begin
	max := node_data^[etype].input_length;
	if field^.len > max then field^.len := max;
	l   := ( max - field^.len ) div 2;
	if l <> 0 then
	  begin
	    buffer.len := max;
	    for i := 1 to l buffer[i] := ' ';
	    for i := l+1 to field^.len+l do buffer[i] := field^[i-l];
	    for i := field^.len+l+1 to max do buffer[i] := ' ';
	  end
	    else
	  begin
	    for i := 1 to field^.len do buffer[i] := field^[i];
	    buffer.len := field^.len;
	  end;
      end;
    dstext ( x, y, tsize, 3, buffer, buffer.len, 0 );
  end;

  (************************************************************)

  begin
    if skeleton^[19] = 2 then
      begin
	if (skeleton^[21]=0)and(skeleton^[22]=0)and(skeleton^[20]=0) then
	  buffer[1] := chr ( current_level + 48 )
	 else
	  buffer[1] := chr ( skeleton^[20] + 48 );
	if buffer[1] > '9' then buffer[1] := chr (ord(buffer[1])+7);
	if (skeleton^[21]=0)and(skeleton^[22]=0)and(skeleton^[20]=0) then
	  buffer[2] := chr ( current_sub_level + 48 )
	 else
	  if (skeleton^[22] = 0)and(skeleton^[21] = 0) then
	    buffer[2] := chr ( current_level + 48 )
	   else
	    buffer[2] := chr ( skeleton^[21] + 48 )
	if buffer[2] > '9' then buffer[2] := chr (ord(buffer[2])+7);
	if (skeleton^[21]=0)and(skeleton^[22]=0)and(skeleton^[20]=0) then
	  [buffer[3] := '0'; buffer.len := 3;]
	 else
	  if (skeleton^[22] = 0)and(skeleton^[21] = 0) then
	    [buffer[3] := chr ( current_sub_level + 48 );buffer.len:=3]
	   else
	    begin
	     buffer[4] := '.';
	     if skeleton^[22]=0 then
	      [buffer[3] := chr ( current_level + 48 );
	       buffer[5] := chr ( current_sub_level + 48 );
	       buffer.len := 5;]
	     else
	      [buffer[3] := chr ( skeleton^[22] + 48 );
	       buffer[5] := chr ( current_level + 48 );
	       buffer[6] := chr ( current_sub_level + 48 );
	       buffer.len := 6;];
	    end;
	if buffer[3] > '9' then buffer[3] := chr (ord(buffer[3])+7);
	if buffer.len > 4 then
	 if buffer[5] > '9' then buffer[5] := chr (ord(buffer[5])+7);
	if buffer.len > 5 then
	 if buffer[6] > '9' then buffer[6] := chr (ord(buffer[6])+7);
	dstext ( x1, y1-8, 1, 3, buffer, buffer.len, 0 );
      end;

    case temp^.etype of
      1: x2 := x1 + pix_0b - 1;
      6: x2 := x1 + pix_1b - 1;
      8: x2 := x1 + pix_2b - 1;
    end;

    y2 := y1 + line_b - 1;
    dsbar ( x1, y1, x2, y2, 3, 0 );

    empty1 := true;
    i := 1;
    while empty1 and (i<=temp^.field^.len) do
      if temp^.field^[i] <> ' ' then empty1 := false
				else i := i + 1;
    empty2 := true;
    i := 1;
    while empty2 and (i<=temp^.down^.field^.len) do
      if temp^.down^.field^[i] <> ' ' then empty2 := false
				      else i := i + 1;
    if empty1 then if empty2 then i := 0
			     else i := 2
	      else if empty2 then i := 1
			     else i := 3;
    case i of
      0: temp := temp^.down;
    1,2: begin
	   if i=2 then temp := temp^.down;
	   x2 := x1 + 2;
	   y2 := y1 + 2 + ( height div 2 );
	   ds_write ( x2, y2 );
	   if i = 1 then temp := temp^.down;
	 end;
      3: begin
	  x2 := x1 + 2;
	  y2 := y1 + 2;
	  ds_write ( x2, y2 );
	  temp := temp^.down;
	  ds_write ( x2, y2 + height + 1 );
	 end;
    end;

  end;

  (************************************************************)

  begin
    if plotchoice <> 2 then
      begin
	screen(3);
	colors(0,color);
	there(0,0);
	write('Drawing in Progress...');
	dsinit;
      end;
    no_1l := 0;
    max_2l := 0;
    for i := 1 to 10 do
	begin
	  if dimension[i] <> -1 then
	     begin
	       no_1l := no_1l + 1;
	       if dimension[i] > max_2l then max_2l := dimension[i];
	     end;
	end;
    tsize := 1;
    if (no_1l<=4) and (max_2l<=10) then tsize := 0;
    if (no_1l<=3) and (max_2l<=8 ) then tsize := 2;
    if (no_1l<=2) and (max_2l<=6 ) then tsize := 3;

    case tsize of
      0: [ width := 8; height := 8; ];
      1: [ width := 6; height := 8; ];
      2: [ width := 10; height := 12; ];
      3: [ width := 14; height := 16; ];
    end;

    nchar_0l := node_data^[1].input_length;
    nchar_1l := node_data^[6].input_length;
    nchar_2l := node_data^[8].input_length;

    pix_0b   := 1 + 1 + width*nchar_0l + 1;

    spix_0b  := ( (640 - pix_0b) div 4 )*2;

    pix_1b   := 1 + 1 + width*nchar_1l + 1;

    pix_1f   := 0;
    if no_1l <> 0 then
       pix_1f	:= ((((640-no_1l*pix_1b) div no_1l) -1) div 2)*2 + 1;

    spix_1b  := ((640-no_1l*pix_1b-(no_1l-1)*pix_1f) div 4 )*2;

    pix_1i   := pix_1b + pix_1f;

    spix_1h  := spix_1b + ( pix_1b div 4 )*2 + 2;

    pix_2b   := 1 + 1 + width*nchar_2l + 1;

    spix_2b  := spix_1b + width*(nchar_1l - nchar_2l);

    spix_2h  := spix_1b + ( (spix_2b - spix_1b) div 4 )*2;

    line_b   := 1 + 1 + height + 1 + height + 1 + 1;

    line_f   := ((((400-(max_2l+2)*line_b) div (max_2l+2))-1) div 2)*2+1;
    if tsize in [2,3] then line_f := line_f - 2;

    line_hf  := (line_f div 4 )*2;

    sline_0b := 8 + line_hf;

    sline_1b := ((400-(max_2l+1)*line_b-max_2l*line_f-line_hf) div 2)*2;

    line_i   := line_b + line_f;

    sline_2b := sline_1b + line_i;

    sline_2h := sline_2b + ( line_b div 4 )*2;

    sline_1h := sline_1b - ( (sline_1b-sline_0b-line_b) div 4 )*2;

    temp     := first;
    current_level := 0;
    current_sub_level := 0;

    repeat
      case temp^.etype of
	1: begin
	     draw_box ( spix_0b, sline_0b );
	     if temp^.down^.etype <> 7 then
		dsline ( 320, sline_0b+line_b, 320, sline_1h, 3, 1, 0);
	   end;
	6: begin
	     spix_2h := spix_2h + ord ( current_level <> 0 ) * pix_1i;
	     spix_2b := spix_2b + ord ( current_level <> 0 ) * pix_1i;
	     current_level := current_level + 1;
	     x1 := spix_1h + ( current_level - 1 ) * pix_1i;
	     if current_level <> no_1l then
		begin
		  x2 := x1 + pix_1i;
		  dsline ( x1, sline_1h, x2, sline_1h, 3, 1, 0 );
		end;
	     dsline ( x1, sline_1h, x1, sline_1b, 3, 1, 0 );
	     x1 := spix_1b + ( current_level - 1 ) * pix_1i;
	     draw_box ( x1, sline_1b );
	     if temp^.down^.etype = 8 then
		begin
		  x1 := spix_2h;
		  y1 := sline_1b + line_b - 1;
		  dsline ( x1, y1, spix_2h, sline_2h, 3, 1, 0 );
		  dsline ( x1, sline_2h, spix_2b, sline_2h, 3, 1, 0 );
		end;
	   end;
	8: begin
	     current_sub_level := current_sub_level + 1;
	     y1 := sline_2b + (current_sub_level-1)*line_i;
	     draw_box ( spix_2b, y1 );
	     if temp^.down^.etype <> 8 then
		begin
		  current_sub_level := 0;
		end
		  else
		begin
		  x1 := spix_2h;
		  y1 := sline_2h + (current_sub_level-1)*line_i;
		  y2 := y1 + line_i;
		  dsline ( x1, y1, x1, y2, 3, 1, 0 );
		  dsline ( x1, y2, spix_2b, y2, 3, 1, 0 );
		end;
	   end;
	3: begin
	     with temp^ do
		  dstext ( skeleton^[1],skeleton^[2],1,3,field^,field^.len,0 );
	     temp := temp^.down;
	     with temp^ do
		  dstext ( skeleton^[1],skeleton^[2]+10,1,3,field^,field^.len,0 );
	     temp := temp^.down;
	     with temp^ do
	       dstext ( skeleton^[1],skeleton^[2]+20,1,3,field^,field^.len,0 );
	     if skeleton^[7] = 2  then
	       dsymbol ( skeleton^[3],skeleton^[4],3,0,0, 1 );
	   end;
       10: with temp^ do
	     dstext ( x, y, 1, 3, field^, field^.len, 0 );
      end;
      temp := temp^.down;

    until temp^.etype=1;
  end;
  end.
