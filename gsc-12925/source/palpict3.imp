   (* $INCLUDE : 'compile.inc' *)
   (* $INCLUDE : 'getparam.int'*)
   (* $INCLUDE : 'utility.int' *)
   (* $INCLUDE : 'vbpas.int'   *)
   (* $INCLUDE : 'display.int' *)
   (* $INCLUDE : 'sfpas.int'   *)
   (* $INCLUDE : 'option.int'  *)
   (* $INCLUDE : 'execute.int' *)
   (* $INCLUDE : 'palpict.int'   *)
   (* $INCLUDE : 'palexec.int'   *)

   implementation of palpict;

      uses getparam;

      uses utility;

      uses vbpas;

      uses display;

      uses sfpas;

      uses option;

      uses execute;

      uses palexec

   procedure skelepal; extern;

   procedure picture; extern;

   var
      def		   : suplstring2(11);
      x, y		   : supinteger(11);
      range		   : supset(22);
      msg		   : suplstring(25);
      old_total,temp_total : byte;
      oldy		   : integer;
      newnode		   : entity;
      tot,month 	   : string(2);
      buf		   : lstring(10);
      current_node	   : byte;

   procedure get_list;

   var
	 current  : entity;
	 i,j	  : byte;
	 nchar	  : integer;
	 numberx  : integer;
	 numxtex  : integer;
	 numytex  : integer;
	 boxwide  : integer;
	 boxhigh  : integer;

   begin

      current := first^.up;
      delete ( current );

      current := first^.up^.up;
      numberx := current^.x;
      numxtex := current^.xtext;
      numytex := current^.ytext;
      nchar   := xy[35];
      boxhigh := xy[18];
      boxwide := xy[11];

      for i := 1 to 2 do begin
	  if i = 2  then begin
	     add_node (current, current^.etype);
	     current^.x     := numberx;
	     current^.y     := current^.up^.y + boxhigh;
	     current^.xtext := numxtex;
	     current^.ytext := numytex + 1;
	  end;
	  for j := 1 to total do begin
	      add_node (current, current^.etype);
	      current^.x   := current^.up^.x + boxwide;
	      current^.y   := current^.up^.y ;
	      if j = 7 then
	       [ current^.xtext := numxtex + nchar;
		 current^.ytext := current^.up^.ytext + 4; ]
	      else
	       [ current^.xtext := current^.up^.xtext + nchar;
		 current^.ytext := current^.up^.ytext;	   ];
	  end; (* for j *)
      end;     (* for i *)

      current := first^.up;
      for i := 1 to 2 do begin		    (* two lines of footnotes *)
	  add_node (current, current^.etype);
	  current^.x	 := current^.up^.x;
	  current^.y	 := current^.up^.y + 8;
	  current^.xtext := current^.up^.xtext;
	  current^.ytext := current^.up^.ytext + 1;
      end; (* for *)
 end; (* get list *)

(************************************************)

procedure format;
var
      i,j,n		: integer;

begin
   msg[1]  := '                Progress/Level of Effort Chart Format Option';
   msg[2]  := '                              Default';
   concat  (msg[2],'                                  Default');
   msg[3]  := '                                     ';
   msg[4]  := 'Starting year    (yy):               ';
   msg[5]  := '                                     ';
   msg[6]  := 'Starting month   (mm):               ';
   msg[7]  := '                                     ';
   msg[8]  := 'Type of period:                      ';
   msg[9]  := '  M  = months     Q = quarters       ';
   msg[10] := '  Y  = years                         ';
   msg[11] := '                                     ';
   msg[12] := 'Number of periods  (1 - 12):         ';
   msg[13] := '                                     ';
   msg[14] := 'Start of Fiscal Year:                ';
   msg[15] := '  C  = calendar   A = April          ';
   msg[16] := '  J  = July       O = October        ';
   msg[17] := '                                     ';
   msg[18] := 'Type of plot:                        ';
   msg[19] := '  B  = bar        C = curve          ';
   msg[20] := '  BC = both                          ';
   msg[21] := '                                     ';
   msg[22] := '  Modify default options as needed - press return key for next option.';
   msg[23] := '  Select F2 to begin creating chart';
   msg[24] := '                                     ';
   msg[25] := null;

   buf.len := 1;
   for i := 1 to 10 do
      if fctn_map^[1][i] <> 0 then
	 begin
	    if i < 10 then  [ buf[1] := chr( i + 48 );
			      concat (msg [25], buf ); ]
		      else    concat (msg [25], '10');
	    if fctn_map^[1][i] = 7 then concat( msg[25], 'End ' );
	    concat (msg [25], fctn_tag^[fctn_map^[1][i] ] );
	    if i < 10 then concat (msg [25], ' ' );
	    if i = 2 then while msg[25].len < 21 do concat( msg[25], ' ' );
	    if i = 7 then while msg[25].len < 60 do concat( msg[25], ' ' );
	 end; (* for *)

   for i := 3 to 20 do concat ( msg[i], chr(219) );(* append the center line *)


   concat ( msg[4],  '  Values to be entered:                ');
   concat ( msg[5],  '    C  = cumulative  I = incremental   ');
   concat ( msg[7],  '  Values to be displayed:              ');
   concat ( msg[8],  '    C  = cumulative  I = incremental   ');
   concat ( msg[9],  '    CI = both                          ');
   concat ( msg[11], '  Type of chart:                       ');
   concat ( msg[12], '    P  = progress   L = level of effort');
   concat ( msg[14], '  GFSC  symbol  (N = no, Y = yes):    ');
   concat ( msg[16], '  Background color:                    ');
   concat ( msg[17], '    X = black       W = white          ');
   concat ( msg[18], '    R = red         M = magenta        ');
   concat ( msg[19], '    G = green       Y = yellow         ');
   concat ( msg[20], '    B = blue        C = cyan           ');

   (*	set the default value	 *)

   def[1][1] := year[1];   def[1][2] := year[2];     (* year *)
						     (* month *)
   if start > 9 then [ month[1] := '1';  month[2] := chr( start + 48 - 10 ); ]
		else [ month[1] := ' ';  month[2] := chr( start + 48 ); ];
   def[2][1] := month[1];   def[2][2] := month[2];

   def[3][1] := ' ';                                 (* type of period *)
   case period of
	0     : def[3][2] := 'M' ;
	1..4  : def[3][2] := 'Q' ;
	5     : def[3][2] := 'Y' ;
   end;
						     (* total # of periods *)
   if total > 9 then [ tot[1] := '1' ;  tot[2] := chr( total + 48 - 10)]
		else [ tot[1] := ' ' ;  tot[2] := chr( total + 48 ) ];
   copylst( tot, def[4] );

   if update then old_total := total
   else begin
	if first_create then begin
	   current := first;
	   while current^.etype <> 10 do current := current^.down ;
	   repeat
		size := current^.field^.len ;
		for i := 1 to size do
		    if current^.field^[i] <> ' ' then
			 first_create := false ;
		current := current^.down;
	   until ( current^.etype <> 10 ) or ( not first_create );
	end; (* if first_create *)
	if first_create then [ old_total := 0 ;
			       first_create := false ;]
			else
			       old_total := total ;
   end; (* if update *)

   temp_total := total ;
   for i := 5 to 11 do def[i][1] := ' ';

   case fiscal_year of				(* start of fiscal year *)
	0  : def[5][2] := 'C' ;
	1  : def[5][2] := 'A' ;
	2  : def[5][2] := 'J' ;
	3  : def[5][2] := 'O' ;
   end;

   case curve of				(* type of plot  *)
	1  :   def[6][2] := 'B' ;
	2  :   def[6][2] := 'C' ;
	3  : [ def[6][1] := 'B' ;  def[6][2] := 'C'; ];
   end;

   if enter_mode = 0 then def[7][2] := 'C'      (* value to be enter *)
		     else def[7][2] := 'I';

   case dis_mode of				(* values to be display *)
	1  :   def[8][2] := 'C' ;
	2  :   def[8][2] := 'I' ;
	3  : [ def[8][1] := 'C' ;  def[8][2] := 'I'; ];
   end;

   if form = 0 then  def[9][2] := 'L'           (* type of chart *)
	       else  def[9][2] := 'P' ;

   if symbol = 0 then def[10][2] := 'N'
		 else def[10][2] := 'Y';         (* GFSC symble *)

   case color of				(* background color *)
	0 : def[11][2] := 'X' ;
	1 : def[11][2] := 'B' ;
	2 : def[11][2] := 'G' ;
	3 : def[11][2] := 'C' ;
	4 : def[11][2] := 'R' ;
	5 : def[11][2] := 'M' ;
	6 : def[11][2] := 'Y' ;
	7 : def[11][2] := 'W' ;
   end;

   for i := 1 to 11 do def[i].len := 2 ;

   (* set the default location x y *)

   y[1] := 3;  y[2] := 5;  y[3] := 7;  y[4]  := 11; y[5]  := 13;  y[6] := 17;
   y[7] := 3;  y[8] := 6;  y[9] := 10; y[10] := 13; y[11] := 15;
   for i := 1 to 6  do x[i] := 33 ;
   for i := 7 to 11 do x[i] := 73 ;

   (* valid set of format options *)

   range[1]  := [ '0'..'9' ];
   range[2]  := [ '0'..chr( 48 + 99 ) ] ;          (* range of year : 0..99 *)

   range[3]  := [ '0'..'9' ];
   range[4]  := [ '1'..chr( 48 + 12 ) ] ;          (* range of month : 1..12 *)

   range[5]  := [' '];                               (* type of period *)
   range[6]  := ['m', 'q', 'y', 'M', 'Q', 'Y' ];

   range[7]  := [ '0'..'9' ];                      (* total # of the periods *)
   if old_total <> 0 then				   (* old_total - 12 *)
      range[8]	:= [ chr( old_total + 48 )..chr( 48 + 12 ) ]
   else
      range[8]	:= [ '1'..chr(48 + 12) ];

   range[9]  := [' '];                               (* start of fiscal year *)
   range[10] := ['c', 'a', 'j', 'o', 'C', 'A', 'J', 'O' ];

   range[11] := [' ', 'b', 'B'];                     (* type of plot *)
   range[12] := ['b', 'c', 'B', 'C'];

   range[13] := [' '];                               (* enter mode   *)
   range[14] := [ 'c', 'i', 'C', 'I' ];

   range[15] := [' ', 'c', 'C'];                   (* values to be displayed *)
   range[16] := ['c', 'i', 'C', 'I'];

   range[17] := [' '];                               (* type of chart *)
   range[18] := ['p', 'l', 'P', 'L'];

   range[19] := [' '];                               (* GFSC  symbol *)
   range[20] := [ 'n', 'y', 'N', 'Y' ] ;

   range[21] := [' '];                               (* Background color *)
   range[22] := [ 'x', 'w', 'r', 'm', 'g', 'y', 'b', 'c',
		  'X', 'W', 'R', 'M', 'G', 'Y', 'B', 'C' ];

   (* display format menu and accept the user option *)

   multimenu( msg, 25, 0, 11, def, x, y, range, inkey, 2 );

   for n := 1 to 11 do
       case n of
	    1  : begin
		    year.len  := 2;
		    if def[1][1] = ' ' then def[1][1] := chr( 48 );
		    year[1] := def[1][1]; year[2] := def[1][2];
		 end;
	    2  : begin
		    if def[2][1] = ' ' then def[2][1] := chr( 48 ) ;
		    start := ( ord(def[2][1]) - 48)*10 + ord(def[2][2]) - 48;
		 end;
	    3  : case def[3][2] of
		     'm', 'M' : period := 0;
		     'q', 'Q' : period := 1;
		     'y', 'Y' : period := 5;
		 end;
	    4  : begin
		   if def[4][1] = ' ' then  def[4][1] := chr(48) ;
		   total := (ord(def[4][1])-48)*10 + ord(def[4][2])-48;
		  end;
	     5	: case def[5][2] of
		    'c', 'C' : fiscal_year := 0;
		    'a', 'A' : fiscal_year := 1;
		    'j', 'J' : fiscal_year := 2;
		    'o', 'O' : fiscal_year := 3;
		  end;
	     6	: case def[6][2] of
		    'b', 'B' : curve := 1;
		    'c', 'C' : if def[6][1] = ' ' then curve := 2
						  else curve := 3;
		  end;
	     7	: case def[7][2] of
		    'c', 'C' : enter_mode := 0;
		    'i', 'I' : enter_mode := 1;
		  end;
	     8	: case def[8][2] of
		    'c', 'C' : dis_mode   := 1;
		    'i', 'I' : if def[8][1] = ' ' then dis_mode := 2
						  else dis_mode := 3;
		  end;
	     9	: case def[9][2] of
		    'l', 'L' : form := 0 ;
		    'p', 'P' : form := 1 ;
		  end;
	     10 : case def[10][2] of
		    'n', 'N' : symbol := 0;
		    'y', 'Y' : symbol := 1;
		  end;
	     11 : case def[11][2] of
		    'x', 'X' : color  := 0 ;
		    'b', 'B' : color  := 1 ;
		    'g', 'G' : color  := 2 ;
		    'c', 'C' : color  := 3 ;
		    'r', 'R' : color  := 4 ;
		    'm', 'M' : color  := 5 ;
		    'y', 'Y' : color  := 6 ;
		    'w', 'W' : color  := 7 ;
		   end;
	     otherwise
	 end; (* case n *)

  if (period <> 0) and (period <> 5) then
      period := (( ((start-1) div 3) + 4 - fiscal_year) mod 4 ) + 1;

  if  ( old_total = 0 ) and ( total <> 12 )  then  begin
	current := first;
	while current^.etype <> 10 do  current := current^.down;
	n := 12 - ord(total);
	for i := 1 to 2  do begin
	    for j := 1 to (total+1) do current := current^.down;
	    for j := 1 to n  do  delete ( current );
	end; (* for i *)
  end;

  current := first;
  if total > old_total	then begin
      while current^.etype <> 10 do  current := current^.down;
      for i := 1 to 2  do begin
	  oldy := current^.y;
	  for j := 1 to total  do begin
	     if oldy <> current^.down^.y  then
		with current^  do begin
		   create ( newnode, 10);
		   newnode^.x := x + skeleton^[11];
		   newnode^.y := y;
		   if ( total > 6 ) and ( j = 7 )  then
		      [ newnode^.xtext := node_data^[10].xtext + skeleton^[35];
			newnode^.ytext := ytext + 4; ]
		   else
		      [ newnode^.xtext := xtext + skeleton^[35];
			newnode^.ytext := ytext; ];
		   link ( current, newnode );
		   current := current^.up;
		end; (* if oldy, with current *)
	     current := current^.down;
	  end; (* for j *)
	  current := current^.down;
      end; (* for i *)
  end; (* if total *)

  current := first;    (* if values are cumulative and y was not changed *)
  while current^.etype <> 10 do current := current^.down;

  if (enter_mode = 0) and (node_data^[10].y = current^.y) then
      repeat
	 current^.y := current^.y + 20;
	 current := current^.down;
      until current^.etype <> 10;

  if (enter_mode = 1) and (node_data^[10].y <> current^.y) then
      repeat
	 current^.y := current^.y - 20;
	 current := current^.down;
      until current^.etype <> 10;

  screen (3); colors (0,color);
  inkey := fctn_map^[1][inkey-58];
  if inkey in [1,4,5] then current_node := 0
		      else current_node := current^.etype;

  if inkey = 7 then inkey := 3;
  if not( inkey in [ 1,2,4,5,7,41 ] ) then  redraw(1,current,first);

  perform2 ( inkey, first, name, skeleton^ );
  perform  ( inkey, current, current_node, first );

  if inkey in [4,5] then redraw(1, current, first);
 end;


 procedure chartinfo;

 var

       current : entity;
       i       : integer;

   begin

      current := first^.up;
      case code of
       1 :  begin
	      create ( newnode, 11 );
	      with newnode^ do
		begin
		  field^.len := 20;
		  x := 0;
		  y := 0;
		  xtext := 0;
		  ytext := 0;
		  field^[1] := chr ( form	+ 48 );
		  field^[2] := year[1];
		  field^[3] := year[2];
		  field^[4] := chr ( period	+ 48 );
		  field^[5] := chr ( color	+ 48 );
		  field^[6] := chr ( curve	+ 48 );
		  field^[7] := chr ( (start div 10) + 48 );
		  field^[8] := chr ( (start mod 10) + 48 );
		  field^[9] := chr ( (total div 10) + 48 );
		  field^[10]:= chr ( (total mod 10) + 48 );
		  field^[11]:= chr (color2[1]	+ 48 );
		  field^[12]:= chr (color2[2]	+ 48 );
		  field^[13]:= chr ( fill2[1]	+ 48 );
		  field^[14]:= chr ( fill2[2]	+ 48 );
		  field^[15]:= chr (pattern2[1] + 48 );
		  field^[16]:= chr (pattern2[2] + 48 );
		  field^[17]:= chr ( symbol + 48 );
		  field^[18]:= chr ( fiscal_year + 48 );
		  field^[19]:= chr ( enter_mode  + 48 );
		  field^[20]:= chr ( dis_mode	 + 48 );
	       end;
	     link ( current, newnode );
	   end;

      2   : with current^ do
	       begin
		  form	      := ord ( field^[1]  ) - 48 ;
		  year.len    := 2;
		  year[1]     :=       field^[2];
		  year[2]     :=       field^[3];
		  period      := ord ( field^[4]  ) - 48;
		  color       := ord ( field^[5]  ) - 48;
		  curve       := ord ( field^[6]  ) - 48;
		  start       :=(ord(field^[7]) - 48)*10 + ord(field^[8]) - 48;
		  total       :=(ord(field^[9]) - 48)*10 + ord(field^[10])- 48;
		  color2[1]   := ord ( field^[11] ) - 48;
		  color2[2]   := ord ( field^[12] ) - 48;
		  fill2[1]    := ord ( field^[13] ) - 48;
		  fill2[2]    := ord ( field^[14] ) - 48;
		  pattern2[1] := ord ( field^[15] ) - 48;
		  pattern2[2] := ord ( field^[16] ) - 48;
		  symbol      := ord ( field^[17] ) - 48;
		  fiscal_year := ord ( field^[18] ) - 48;
		  enter_mode  := ord ( field^[19] ) - 48;
		  dis_mode    := ord ( field^[20] ) - 48;
		  delete ( current );
	       end;

	 3  :	begin
		    year[1] := '8';   year[2] := '5';   period := 0;
		    start   :=	1 ;   curve   :=  3 ;	form   := 1;
		    total   := 12 ;   symbol  := 0;	color  := 1;
		    fiscal_year := 0; enter_mode := 1;	dis_mode := 3;
		   get_list (first, total, xy);
		end;
   otherwise begin end; end; (* case code *)
   end; (* chartinfo *)
   end.



