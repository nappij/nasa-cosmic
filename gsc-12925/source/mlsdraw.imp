  { $INCLUDE : 'compile.inc' }
  { $INCLUDE : 'getparam.int' }
  { $INCLUDE : 'utility.int' }
  { $INCLUDE : 'sfpas.int' }
  { $INCLUDE : 'dspas.int' }
  { $INCLUDE : 'mlsaltd.int' }
  { $INCLUDE : 'mlsexec.int' }
  { $INCLUDE : 'mlsdraw.int' }

  implementation of mlsdraw;

  USES getparam;

  USES utility;

  USES sfpas;

  USES dspas;

  USES mlsaltd;

  USES mlsexec;

  procedure calcx;

    var
      temp : boolean;

    function ends : boolean;

      var
        by1,by2,bm1,bm2,bd1,bd2,b1,b2,b3,b4,b5,bs,bends : boolean;
        
      begin
        bends := true;
        by1 := y=y0;
        bm1 := m=m0;
        bd1 := d<=daysperx+1;
        by2 := y=y0+skeleton^[3];
        bm2 := m=m0+skeleton^[3];
        bd2 := d>=30.4-daysperx;
        bs := skeleton^[2]=1;
        b1 := by1 and bm1 and bd1;
        b2 := by1 and (m=m0+skeleton^[3]-1);
        b2 := b2 or ((y=y0+1)and(m=m0+skeleton^[3]-13));
        b3 := by2 and (m=m0-1);
        b3 := b3 or ((y=y0+skeleton^[3]-1)and(m=12);
        b4 := by1 and bm2;
        b4 := b4 or ((y=y0+1) and (m=m0+skeleton^[3]-12));
        b5 := by2 and bm1;
        if b1 then x := node_data^[17].x
         else
          if (y<y0)or(by1 and (m<m0)) then x:=node_data^[17].x-1
           else
            if (bs and ((bd2 and b2) or (bd1 and b4))) or
               ((not bs) and ((bd2 and b3) or (bd1 and b5))) then
                 x := node_data^[17].x+ncolumns*column_width
             else
              if (bs and ((m>=m0+skeleton^[3]) or ((y=y0+1) and
                 (m>=m0+skeleton^[3]-12)))) or
                 ((not bs) and ((y>y0+skeleton^[3])or(by2 and (m>m0))))
                 then x := node_data^[17].x+ncolumns*column_width+1
                 else bends := false;
        ends := bends;
      end;

    begin
     if not ends then
               begin
      if skeleton^[2]=1 then temp:=((y=y0)and(m<=m0+skeleton^[3]))or
                                   ((y=y0+1)and(m<=m0+skeleton^[3]-12))
        else temp := y <= y0 + skeleton^[3];
      if ((y>y0)or((y=y0)and(m>=m0)))and temp then
        begin
          x:=round ((float(y-y0)*365.25+float(m-m0)*30.4+float(d-1))/daysperx) + node_data^[17].x;
          error := false;
        end
       else
        [error := true;x:=0;];
      if ( x < node_data^[17].x-1 ) or ( x > node_data^[17].x+ncolumns*column_width+1 ) then error := true;
               end else error := false;
    end;

  procedure calcdate;

    var
      r : real;

    begin
      if (x>=node_data^[17].x)and(x<=node_data^[17].x+ncolumns*column_width) then
        begin
          r := (x-node_data^[17].x)*daysperx;
          y := trunc (r/365.25);
          m := trunc ((r-y*365.25)/30.4);
          d := trunc (r-y*365.25-m*30.4)+1;
          y := y + y0;
          m := m + m0;
          if m > 12 then [ m := m - 12; y := y + 1; ];
          error := false;
        end
       else
        begin
          error := true;
          m := 0;
          d := 0;
          y := 0;
        end;
    end;

  procedure drawbar;

    begin
      if xf > x1 then
        if xf < x2 then
          begin
            dsbar ( x1, y+11, xf, y+14, 3, 9 );
            dsbar ( xf, y+13, x2, y+14, 0, 9 );
            dsbar ( xf, y+11, x2, y+12, 3, 9 );
            dsline ( x2, y+13, x2, y+14, 3, 1, 0 );
          end
         else
           dsbar ( x1, y+11, x2, y+14, 3, 9 )
       else
        if x2>x1 then
        begin
          dsbar ( x1, y+13, x2, y+14, 0, 9 );
          dsbar ( x1, y+11, x2, y+12, 3, 9 );
          dsline ( x1, y+13, x1, y+14, 3, 1, 0 );
          dsline ( x2, y+13, x2, y+14, 3, 1, 0 );
        end;
      if (rtype<>0)and(x2>x1) then rdbupd(rtype,x1,y+11,x2-x1+1,4);
    end;

  procedure dbars;

    var
      m,d,yr,x1 : array[1..3] of integer;
      i         : integer;
      error     : boolean;

    begin
      with current^ do
        begin
          for i := 1 to 3 do
            begin
              m[i] := (ord(field^[1+(i-1)*6])-48)*10+ord(field^[2+(i-1)*6])-48;
              d[i] := (ord(field^[3+(i-1)*6])-48)*10+ord(field^[4+(i-1)*6])-48;
              yr[i] := (ord(field^[5+(i-1)*6])-48)*10+ord(field^[6+(i-1)*6])-48;
              calcx(x1[i],m[i],d[i],yr[i],skeleton^[6],skeleton^[5],daysperx,error);
              if error then x1[i] := 0;
              if x1[i] < node_data^[17].x then x1[i] := x1[i] + 1;
              if x1[i] > node_data^[17].x+ncolumns*column_width then x1[i] := x1[i] - 1;
            end;
          if (x1[1] >= node_data^[17].x) and (x1[2] <= node_data^[17].x+ncolumns*column_width) then
            drawbar ( x1[1], x1[2], x1[3], y );
        end;
    end;

  procedure chkbars ( var current : entity );

    var
      m,d,yr,x1 : array[1..3] of integer;
      i         : integer;
      error     : boolean;

    begin
      with current^ do
        begin
          for i := 1 to 3 do
            begin
              m[i] := (ord(field^[1+(i-1)*6])-48)*10+ord(field^[2+(i-1)*6])-48;
              d[i] := (ord(field^[3+(i-1)*6])-48)*10+ord(field^[4+(i-1)*6])-48;
              yr[i] := (ord(field^[5+(i-1)*6])-48)*10+ord(field^[6+(i-1)*6])-48;
              calcx(x1[i],m[i],d[i],yr[i],skeleton^[6],skeleton^[5],daysperx,error);
              if error then x1[i] := 0;
              if x1[i] < node_data^[17].x then x1[i] := x1[i] + 1;
              if x1[i] > node_data^[17].x+ncolumns*column_width then x1[i] := x1[i] - 1;
             end;
          if (x1[1] >= node_data^[17].x) and (x1[2] <= node_data^[17].x+ncolumns*column_width) then
           if (x1[1]<=bar_location)and(x1[2]>=bar_location)then
            drawbar ( x1[1], x1[2], x1[3], y );
        end;
    end;

  procedure chktriangle ( var current : entity );

    var
      m,d,yr,x1 : integer;
      id1,id2   : integer;
      error     : boolean;

    begin
      with current^ do
        begin
          m := (ord(field^[1])-48)*10+ord(field^[2])-48;
          d := (ord(field^[3])-48)*10+ord(field^[4])-48;
          yr := (ord(field^[5])-48)*10+ord(field^[6])-48;
          id1 := ord(field^[7])-48;
          id2 := ord(field^[8])-48;
          calcx(x1,m,d,yr,skeleton^[6],skeleton^[5],daysperx,error);
         if (x1<node_data^[17].x)or(x1>node_data^[17].x+ncolumns*column_width) then error := true;
          if (not error)and(x1>=bar_location-8)and(x1<=bar_location+8) then
            dsymbol(x1,y+1,3,id1,id2,1);
        end;
    end;

  procedure dtriangle;

    var
      m,d,yr,x1 : integer;
      id1,id2   : integer;
      error     : boolean;

    begin
      with current^ do
        begin
          m := (ord(field^[1])-48)*10+ord(field^[2])-48;
          d := (ord(field^[3])-48)*10+ord(field^[4])-48;
          yr := (ord(field^[5])-48)*10+ord(field^[6])-48;
          id1 := ord(field^[7])-48;
          id2 := ord(field^[8])-48;
          calcx(x1,m,d,yr,skeleton^[6],skeleton^[5],daysperx,error);
          if (not error)and(x1>=node_data^[18].x)and(x1<=node_data^[17].x+ncolumns*column_width) then
            dsymbol(x1,y+1,3,id1,id2,1);
          if rtype <> 0 then rdbupd ( rtype, x1-5, y+1, 11, 11 );
        end;
    end;

  procedure draw_nowline;

  var
       valid     : boolean;
       j         : integer;
       current   : entity;
       error     : boolean;
       x1        : integer;

  begin
     if add2 then
       begin
         current := first;
         while current^.etype <> 11 do current := current^.down;
         repeat
           with current^ do
             begin
               valid := decode ( field^, j );
               case etype of
                 11 : month := j;
                 12 : day   := j;
                 13 : year  := j;
               end;
             end;
           current := current^.down;
         until current^.etype=14;
    valid := (  (month>0) and (month<=12)
                          and
                (day>0) and (day<=31)
                          and
                  (year>=skeleton^[5])  );

    valid := valid and ((year<>skeleton^[5]) or (month>=skeleton^[6]));

    if valid then
       begin
         calcx(x1,month,day,year,skeleton^[6],skeleton^[5],daysperx,error);
         if (x1<node_data^[17].x)or(x1>node_data^[17].x+ncolumns*column_width) then error := true;
         if (not error) then
           begin
             bar_location := x1;
             dsline ( x1, 51, x1, 369, 3, 1, 0 );
             dsline ( x1+1, 51, x1+1, 369, 3, 1, 0 );
           end;
       end;
     end;
  end;

end.
