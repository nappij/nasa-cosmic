  { $INCLUDE : 'compile.inc' }
  { $INCLUDE : 'vbpas.int' }
  { $INCLUDE : 'getparam.int' }
  { $INCLUDE : 'dialog.int' }
  { $INCLUDE : 'utility.int' }
  { $INCLUDE : 'sfpas.int' }
  { $INCLUDE : 'bulalts.int' }
  { $INCLUDE : 'dspas.int' }
  { $INCLUDE : 'bulaltd.int' }
  { $INCLUDE : 'alterl.int' }
  { $INCLUDE : 'execute.int' }
  { $INCLUDE : 'bulexec.int' }
  { $INCLUDE : 'sld.int' }

  implementation of bulexec;

  USES vbpas;

  USES getparam;

  USES dialog;

  USES utility;

  USES sfpas;

  USES bulalts;

  USES dspas;

  USES alterl;

  USES execute;

  USES bulaltd;

  USES sld;


  const
    prompt_line   := 22;

  var
       temp   : entity;
       n      : integer;
       scroll : boolean;


  (*************************************************************)

  procedure exit;

   var
     newnode	 : entity;
     j		 : integer;

    begin
      current := first^.up;
      create ( newnode, 5 );
      with newnode^ do
	begin
	  field^.len := 10;
	  x := 0;
	  y := 0;
	  xtext := 0;
	  ytext := 0;
	  for j := 1 to 10 do
	    field^[j] := chr (skeleton^[j]+48);
	end;
      link ( current, newnode );
    end;

  (*************************************************************)

 procedure enter;

 begin
       current := first^.up;
       delete (current);
 end;

 (******************************************************************)

  procedure redraw;


    begin
	if code <> 2 then dsinit;
	alter_display_space ( first );
	if code <> 2 then [rtype := 2; reduce ( rtype, color );
			   draw_count := 1; ];
	first_item := first^.down^.down^.down^.down^.down;
	if first_item^.etype = 6 then
	    first_item^.ytext := first_line
	else first_item := nil;
    end;

(*************************************************************)

  procedure sldredraw;
   var
      j : integer;

  begin
     if pagenum=1000 then
       begin
         top_page := first;
         while not (top_page^.up^.etype in [5..7] ) do
           top_page := top_page^.up;
         paging( 1, pagenum, first);
       end;
     draw_count := 1;
     dscreen	:= true;
     rtype	:= 2;
     screen (2);
     if pagenum = 0 then
       begin
         current := first^.up;
         for j := 1 to 10 do
  	 skeleton^[j] := ord ( current^.field^[j] ) - 48 ;
         enter ( current, first );
         pagenum := 1;
       end
      else begin
           there (0,0);
           writeln ('Drawing next page...');
           end;
     paging (2, pagenum, first);
     colors (0, skeleton^[10]);
     redraw (1, current, first);
  end;

  (************************************************************)

  procedure insert ( var current      : entity;
		     var current_node : byte;
		     var first	      : entity );


  var
       total_length : integer;
       line_length  : integer;
       k, nlines    : integer;
       update	    : boolean;

  begin

   last_ins := current_node;
   add2      := true;
   update := false;
   destroy  := false;
   add_node ( current, current_node );
   if(current^.up^.etype=5)and(not(current^.down^.etype in [6,7]))then
      begin
	first_item := current;
	first_item^.ytext := first_line;
	temp := current;
      end
	else
      begin
	temp := current^.up;
	total_length := ord ( temp^.field^.len );
	line_length  := 80 - temp^.xtext;
	if temp^.etype = 5  then  k := first_line
	 else
	   k := temp^.ytext + (total_length div line_length)
		     +	ord ( (total_length mod line_length) <> 0 );
	with current^ do nlines:=(ord(node_data^[etype].input_length) div (80-xtext) ) +
			 ord((ord(node_data^[etype].input_length) mod (80-xtext)) <> 0 );
	temp := current;
	if temp^.down^.etype in [6,7] then update := true;
	temp^.ytext := k;
	while k >= last_line do
	  begin
	    with first_item^ do
	       k := k - ( ord ( field^.len ) div (80-xtext) )
		      - ord ( (ord (field^.len) mod (80-xtext)) <> 0 );
	    first_item := first_item^.down;
	    first_item^.ytext := first_line;
	    temp := first_item;
	    update := true;
	  end;
      end;
      if update then k := 1 else k := 2;
      alter_screen ( first, temp, k );
  end;

  (************************************************************)

  procedure getkey  ( var inkey : byte; valid_key_set_id : byte );

  var
      inchar	: twobyte;
      userkey	: byte;
      i, j	: byte;

  begin
    get_input ( inchar );
    case inchar[1] of
      0: begin
	   userkey := inchar[2];
	   if fctn_map^[valid_key_set_id][userkey - 58] <> 0  then
	     inkey := fctn_map^[valid_key_set_id][userkey - 58];
	 end;

     13: begin end;

     27: inkey := 0;

    otherwise
	 inkey := 255;
    end;
  end;

  (************************************************************)

  procedure eraline ( var current : entity );

    const
      ibuf = '                                                                                ';

    var
      i,j : integer;

    begin
      with current^ do
	begin
	  i := field^.len;
	  i := (i div (80-xtext))+ord((i mod (80-xtext))<>0);
	  for j := 1 to i do
	    begin
	      there ( 0, ytext+j-1 );
	      write ( ibuf );
	    end;
	end;
    end;

  (************************************************************)

  procedure eranode ( var current : entity );

    begin
      eraline ( current );
      if current = first_item then
	if current^.up^.etype = 5 then
	  [if current^.down^.etype in [6,7] then
	      [first_item:=current^.down;first_item^.ytext:=first_line]
	   else
	      first_item := nil]
	 else
	    first_item := current^.up;
      delete ( current );
    end;

  (************************************************************)

  procedure perform2;

  var
       i, j, k, n : integer;
       status	  : mode;
       length	  : byte;
       buffer	  : lstring ( 127 );
       buf	  : lstring (  80 );
       m	  : integer;
       last_node  : byte;

  procedure bul_upd;

  var
      temp   : entity;
      nlines : integer;
      k,l,i  : integer;


  begin


    if (status=txt) and add2 and (length=0) then [status:=fctkey;
						  inkey := 36;];

    if status = fctkey then

       begin
	 if add2 then
	    begin
	      destroy := true;
	      add2 := false;
	      if not (current^.down^.etype in [6,7]) then
		 begin
		   there ( 0, current^.ytext );
		   write ( '                                                                                ');
		   there ( 0,current^.ytext+1 );
		   write ( '                                                                                ');
		 end;
	      l := current^.etype;
	      delete ( current );
	      current_node := current^.etype;
	      k := 1;
	      if current^.up^.etype=5 then
		 begin
		   first_item := current;
		   if current^.etype in [6,7] then
		      first_item^.ytext := first_line
				       else
		      first_item := nil;
		   k := 0;
		 end;
	      if inkey in [25,26,36,43] then [inkey := 0;
		if (current^.etype in [1,8])and(l=6) then
		  begin
		    first_item := first^.down^.down^.down^.down^.down;
		    if first_item^.etype in [6,7] then
		      first_item^.ytext := first_line
		     else
		      first_item := nil;
		    k := 0;
		  end;];
	      if inkey in [44,45] then current := current^.up;
	      if current^.etype in [1,8] then
		  if inkey in [23,28] then
		    begin
		      inkey := 0;
		      current := current^.up;
		    end;
	      if inkey = 28 then inkey := 0;
	      alter_screen ( first, current^.up, k );
	    end;
       end
	 else
       begin
	 if length > 0 then
	    begin
	      with current^ do begin
		  if buffer.len <> field^.len then
		     saved := false
		  else for i := 1 to buffer.len do
			 if buffer[i] <> field^[i] then saved := false;
	      end;

	      length := current^.field^.len;
	      alter_entity_list ( current, buffer, buffer.len, 0 );
	      k := 2;
	      with current^ do
		  nlines := (ord(field^.len) div (80-xtext))
			   + ord ( ord(field^.len) mod (80-xtext)<>0 );
	      temp := current;
	      with current^ do
		if (ord(length)>80-xtext) xor (ord(buffer.len)>80-xtext) then k := 1;
	      if (k=1) and (current^.ytext>last_line-nlines+1) then
		 begin
		   first_item := first_item^.down;
		   first_item^.ytext := first_line;
		   temp := first_item;
		 end;
	      if k = 1 then alter_screen ( first, temp, k );
	    end;
	    if status = txt then inkey := 36
			    else
	       begin
		 if add2 then
		    begin
		      add2 := false;
		      destroy := true;
		    end;
	      end;
	 if inkey = 1 then
	   begin
	     sline := 0;
	     maxpix := 0;
	     top_page := nil;
	     bottom_page := nil;
	   end;

       end;
       if inkey in [1,4,5]  then current_node := 0 ;
  end;

  (*---------------------------------------------------------------*)

  begin

    color := skeleton^[10];

     case inkey of

     41   : begin  { text }
	      skipfield := [8];
	      alter_screen ( first, current, 0 );
	      current := first;
	      current_node := current^.etype;
	      buf := messages^[31];
	      last_node := 0;
	      while not ( inkey in [1,3..5,42] ) do
	       begin
		if(node_data^[last_node].valid_key_set_id=
		   node_data^[current_node].valid_key_set_id)and
		  (node_data^[current_node].prtmsg=
		   node_data^[last_node].prtmsg)and
		  (promptupd=2)and(inkey in [0,22..28,36]) then
		  promptupd := 3
		 else last_node := current_node;
		inkey := 0;
		with current^ do
		  begin
		    length := field^.len;
		    buffer.len := length;
		    for i := 1 to length  do  buffer[i] := field^[i];
		  end;
		with node_data^[current_node] do
		  incom ( prompt_line, prtmsg, buf, -1, rtype,
			  character_size, current^.xtext,
			  current^.ytext, data_type, input_length,
			  valid_key_set_id, esc, backspace,
			  cursor_left, cursor_right, ins, del, status,
			  buffer, length, inkey );

		bul_upd;

		perform2 ( inkey, current, current_node, first );
		perform  ( inkey, current, current_node, first);
	       end;

	       if not (inkey in [0,1,3]) then begin
		   screen (2);
		   colors (0,color);
		   there (0,0);  writeln ('Drawing in progress...');
		   sline := 0;
		   maxpix := 0;
		   top_page := nil;
		   bottom_page := nil;
		   redraw ( 1, current, first );
	       end;
	       if inkey in [4,5] then inkey := 255;
	    end; { text }

     43   : begin  { delete entry }
	      scroll := false;
	      if current = first_item then k := 0 else k := 1;
	      case current^.etype of
		 6,7	: begin
			    if current^.etype=6 then
			      repeat
				eranode(current);
			      until (current^.etype <> 7)
			      else
				if current^.etype = 7  then
				  eranode(current);
			    if first_item <> nil then first_item^.ytext := first_line;
			    if current^.up^.etype=5 then
			       begin
				 first_item := current;
				 if current^.etype in [6,7] then
				   first_item^.ytext := first_line
				 else
				   first_item := nil;
				 k := 0;
			       end;
			     if current^.etype in [1,8] then
				begin
				  k := 0;
				  first_item := first^.down^.down^.down^.down^.down;
				  if first_item^.etype in [6,7] then
				     first_item^.ytext := first_line
				  else first_item := nil;
				end;
			      current_node := current^.etype;
			      alter_screen ( first, current^.up, k );
			  end;	(* case 6 7 *)
		 otherwise  {begin
			      there (0,22); writeln (messages^[32],chr(7));
			      write ('   ',messages^[1]);
			      get_input (inchar);
			    end;}
	      end; (* case current_node *)
	    end; (* case inkey of 43 -- delete *)
     44,45: begin  { insert }
	      if (current^.down^.etype in [6..8,1]) then
		begin
		  current_node := inkey - 38;
		  if current_node = 6  then
		    begin
		     while current^.down^.etype = 7 do
			   current := current^.down ;
		     insert ( current, current_node, first );
		    end
		  else
		    if current^.etype <> 5 then  insert ( current, current_node, first )
		      else current_node := current^.etype;
{		    if current^.etype = 5  then
		      [ there(0,22); write(messages^[35],chr(7));
			there(0,23); write('   ',messages^[1]);
			get_input (inchar); ]
		    else  insert ( current, current_node, first );}
		end
{	      else
		[ there (0,22); write (messages^[34],chr(7));
		  there (0,23); write ('   ',messages^[1]);
		  get_input (inchar); ];}
	    end;
	36: if(not (current^.down^.etype in [1,8])or(last_ins=4)or(not destroy)then
	    begin  { move cursor down }
	      if(current=last_item)and(current^.down^.etype in [6,7]) then
			   repeat
			     first_item := first_item^.down;
			     first_item^.ytext := first_line;
			     alter_screen ( first,first_item,1 );
			   until (last_item = current^.down)or(last_item=current^.down^.down);
		perform ( inkey, current, current_node, first );
	    end
	   else
	    begin
	      current := first;
	      first_item := first^.down^.down^.down^.down^.down;
	      if first_item^.etype in [6,7] then
		first_item^.ytext := first_line
	       else first_item := nil;
	      alter_screen ( first, first_item, 1 );
	    end;
	28: begin  { move cursor down }
	      if(current=last_item)and(current^.down^.etype in [6,7]) then
			   repeat
			     first_item := first_item^.down;
			     first_item^.ytext := first_line;
			     alter_screen ( first,first_item,1 );
			   until (last_item = current^.down)or(last_item=current^.down^.down);
		perform ( inkey, current, current_node, first );
	    end;
	23: begin  { move cursor up }
	      if (current=first_item) and (current^.up^.etype<>5) then
			    begin
			      first_item := first_item^.up;
			      first_item^.ytext := first_line;
			      alter_screen ( first, first_item, 1 );
			    end;
	      perform ( inkey, current, current_node, first );
	    end ;
	22: if current <> first then
	       begin  { move cursor home }
		 current := first;
		 first_item := first^.down^.down^.down^.down^.down;
		 if first_item^.etype = 6 then
		   first_item^.ytext := first_line
		  else first_item := nil;
		 alter_screen ( first, first_item, 1 );
	       end;
	27: if current <> first^.up then
	       begin  { move cursor end }
		 current := first^.up;
		 while current^.etype in skipfield do current:=current^.up;
		 last_item := current;
		 if not(last_item^.etype in [6,7]) then last_item:=nil;
		 alter_screen ( first, current, 3 );
	       end;
	    otherwise  begin end;

     end; {case}
     if inkey in [0,22,23,27,28,36] then current_node:=current^.etype;
     if inkey in [0,36] then
	begin
	  add2 := false;
	  if (current_node in [1,8]) then
	     begin
	       if destroy then
		  begin
		    if last_ins=7 then
		       begin
			 add2 := true;
			 current_node := 6;
		       end;
		  end
		      else
		  begin
		    add2 := true;
		    current_node := current^.up^.etype + 1;
		    current_node := current_node-ord( current_node=8 );
		  end
	     end
	       else
	     begin
	       if (last_ins <> 0) and (not destroy)  then
		    begin
		      add2 := true;
		      current_node := 7;
		    end;
	     end;
	     if add2 then
	       begin
		 last_ins := current_node;
		 current := current^.up;
		 insert ( current, current_node, first );
	       end
	end;
     if inkey in [22,23,27,28,36]  then  inkey := 0;
  end;
  end.
